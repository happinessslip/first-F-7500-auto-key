
lk_inspector1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a58  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000101c  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c64  08009c64  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08009c64  08009c64  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c64  08009c64  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c64  08009c64  00019c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c68  08009c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08009c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002240  20000030  08009c9c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002270  08009c9c  00022270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6e3  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da3  00000000  00000000  0003c73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  000404e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00041b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce2c  00000000  00000000  00043058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a19c  00000000  00000000  0005fe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa39f  00000000  00000000  0007a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001243bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  00124414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000030 	.word	0x20000030
 800020c:	00000000 	.word	0x00000000
 8000210:	08008c30 	.word	0x08008c30

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000034 	.word	0x20000034
 800022c:	08008c30 	.word	0x08008c30

08000230 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <CheckFistSetting>:
  * @retval None
  * @retval if(gu16TimerJob < 300){ // (gu16TimerJob 가 300보다 보다 작으면 break;로 감, 아니면 다음 단계 ( ++gu8JobCheckStep;  gu16TimerJob = 0; )로 감.
  * @retval 동작 전원: set_low_battery();
-----------------------------------------------------*/
void CheckFistSetting(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  switch(gu8JobCheckStep)
 8000240:	4b66      	ldr	r3, [pc, #408]	; (80003dc <CheckFistSetting+0x1a0>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	3b01      	subs	r3, #1
 8000246:	2b05      	cmp	r3, #5
 8000248:	f200 80b7 	bhi.w	80003ba <CheckFistSetting+0x17e>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <CheckFistSetting+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	0800026d 	.word	0x0800026d
 8000258:	08000291 	.word	0x08000291
 800025c:	080002d9 	.word	0x080002d9
 8000260:	08000313 	.word	0x08000313
 8000264:	08000349 	.word	0x08000349
 8000268:	0800037f 	.word	0x0800037f
  {
    case 1:                           // 스탭1 = led 점등된게 있는지 확인
    {      
      if(gu16TimerJob > 200){         // Wait for cylinder, 기본 10ms 타이머, 10초 초과해도 반응없으면 에러처리, 기다리는 항목 아님.
 800026c:	4b5c      	ldr	r3, [pc, #368]	; (80003e0 <CheckFistSetting+0x1a4>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	2bc8      	cmp	r3, #200	; 0xc8
 8000272:	d903      	bls.n	800027c <CheckFistSetting+0x40>
         gu8JobCheckStep = 0xff;      // 검사 항목 중 에러 발생, 지정된 시간이 초과 되었을때 실행되어 에러 발생, 검사 스탭 표시
 8000274:	4b59      	ldr	r3, [pc, #356]	; (80003dc <CheckFistSetting+0x1a0>)
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	701a      	strb	r2, [r3, #0]
         break;
 800027a:	e0ad      	b.n	80003d8 <CheckFistSetting+0x19c>
       }
       ++gu8JobCheckStep;
 800027c:	4b57      	ldr	r3, [pc, #348]	; (80003dc <CheckFistSetting+0x1a0>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b55      	ldr	r3, [pc, #340]	; (80003dc <CheckFistSetting+0x1a0>)
 8000286:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 8000288:	4b55      	ldr	r3, [pc, #340]	; (80003e0 <CheckFistSetting+0x1a4>)
 800028a:	2200      	movs	r2, #0
 800028c:	801a      	strh	r2, [r3, #0]
         break;
 800028e:	e0a3      	b.n	80003d8 <CheckFistSetting+0x19c>
    }

    case 2:                            // 근접센서(데드볼트) 상태 검사
    {
      if(gu16TimerJob > 200){
 8000290:	4b53      	ldr	r3, [pc, #332]	; (80003e0 <CheckFistSetting+0x1a4>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	2bc8      	cmp	r3, #200	; 0xc8
 8000296:	d903      	bls.n	80002a0 <CheckFistSetting+0x64>
    	 gu8JobCheckStep = 0xff;
 8000298:	4b50      	ldr	r3, [pc, #320]	; (80003dc <CheckFistSetting+0x1a0>)
 800029a:	22ff      	movs	r2, #255	; 0xff
 800029c:	701a      	strb	r2, [r3, #0]
    	 break;
 800029e:	e09b      	b.n	80003d8 <CheckFistSetting+0x19c>
      }

      if(get_state_deadbolt())     // 만약 데드볼트가 open 상태면 다음 step
 80002a0:	4b50      	ldr	r3, [pc, #320]	; (80003e4 <CheckFistSetting+0x1a8>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d009      	beq.n	80002c0 <CheckFistSetting+0x84>
      {
       ++gu8JobCheckStep;
 80002ac:	4b4b      	ldr	r3, [pc, #300]	; (80003dc <CheckFistSetting+0x1a0>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	4b49      	ldr	r3, [pc, #292]	; (80003dc <CheckFistSetting+0x1a0>)
 80002b6:	701a      	strb	r2, [r3, #0]
    	 gu16TimerJob = 0;
 80002b8:	4b49      	ldr	r3, [pc, #292]	; (80003e0 <CheckFistSetting+0x1a4>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	801a      	strh	r2, [r3, #0]
    	 break;
 80002be:	e08b      	b.n	80003d8 <CheckFistSetting+0x19c>
      }
      else                         // 데드볼트가 close 상태면 다음 항목으로
      {
         clr_low_battery();          // 4.5V 전원 off
 80002c0:	2200      	movs	r2, #0
 80002c2:	2101      	movs	r1, #1
 80002c4:	4848      	ldr	r0, [pc, #288]	; (80003e8 <CheckFistSetting+0x1ac>)
 80002c6:	f003 fa91 	bl	80037ec <HAL_GPIO_WritePin>
    	 gu8JobCheckStep = 0;
 80002ca:	4b44      	ldr	r3, [pc, #272]	; (80003dc <CheckFistSetting+0x1a0>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
    	 gu16TimerJob = 0;
 80002d0:	4b43      	ldr	r3, [pc, #268]	; (80003e0 <CheckFistSetting+0x1a4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	801a      	strh	r2, [r3, #0]
    	 break;
 80002d6:	e07f      	b.n	80003d8 <CheckFistSetting+0x19c>
      }
    }
    
    case 3:                            // 데드볼트가 OPEN 4.5V 전원 공급
    {
      if(gu16TimerJob > 500){
 80002d8:	4b41      	ldr	r3, [pc, #260]	; (80003e0 <CheckFistSetting+0x1a4>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002e0:	d903      	bls.n	80002ea <CheckFistSetting+0xae>
         gu8JobCheckStep = 0xff;       
 80002e2:	4b3e      	ldr	r3, [pc, #248]	; (80003dc <CheckFistSetting+0x1a0>)
 80002e4:	22ff      	movs	r2, #255	; 0xff
 80002e6:	701a      	strb	r2, [r3, #0]
         break;
 80002e8:	e076      	b.n	80003d8 <CheckFistSetting+0x19c>
       }

         set_low_battery();                // 4.5V 전원 공급
 80002ea:	2201      	movs	r2, #1
 80002ec:	2101      	movs	r1, #1
 80002ee:	483e      	ldr	r0, [pc, #248]	; (80003e8 <CheckFistSetting+0x1ac>)
 80002f0:	f003 fa7c 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 500){           // 100ms초 기다림
 80002f4:	4b3a      	ldr	r3, [pc, #232]	; (80003e0 <CheckFistSetting+0x1a4>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002fc:	d365      	bcc.n	80003ca <CheckFistSetting+0x18e>
         break;
      }
      
       ++gu8JobCheckStep;
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <CheckFistSetting+0x1a0>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <CheckFistSetting+0x1a0>)
 8000308:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 800030a:	4b35      	ldr	r3, [pc, #212]	; (80003e0 <CheckFistSetting+0x1a4>)
 800030c:	2200      	movs	r2, #0
 800030e:	801a      	strh	r2, [r3, #0]
         break;
 8000310:	e062      	b.n	80003d8 <CheckFistSetting+0x19c>
    }

    case 4:                             // OPEN 버튼 동작
    {
      if(gu16TimerJob > 200){
 8000312:	4b33      	ldr	r3, [pc, #204]	; (80003e0 <CheckFistSetting+0x1a4>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	2bc8      	cmp	r3, #200	; 0xc8
 8000318:	d903      	bls.n	8000322 <CheckFistSetting+0xe6>
         gu8JobCheckStep = 0xff;        
 800031a:	4b30      	ldr	r3, [pc, #192]	; (80003dc <CheckFistSetting+0x1a0>)
 800031c:	22ff      	movs	r2, #255	; 0xff
 800031e:	701a      	strb	r2, [r3, #0]
         break;
 8000320:	e05a      	b.n	80003d8 <CheckFistSetting+0x19c>
       }
  
         set_sw_ansim1();                  // OPEN 버튼 동작
 8000322:	2201      	movs	r2, #1
 8000324:	2120      	movs	r1, #32
 8000326:	4831      	ldr	r0, [pc, #196]	; (80003ec <CheckFistSetting+0x1b0>)
 8000328:	f003 fa60 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 200){           // 100ms초 기다림
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <CheckFistSetting+0x1a4>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	2bc7      	cmp	r3, #199	; 0xc7
 8000332:	d94c      	bls.n	80003ce <CheckFistSetting+0x192>
         break;
      }
      
       ++gu8JobCheckStep;
 8000334:	4b29      	ldr	r3, [pc, #164]	; (80003dc <CheckFistSetting+0x1a0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <CheckFistSetting+0x1a0>)
 800033e:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <CheckFistSetting+0x1a4>)
 8000342:	2200      	movs	r2, #0
 8000344:	801a      	strh	r2, [r3, #0]
         break;
 8000346:	e047      	b.n	80003d8 <CheckFistSetting+0x19c>
    }

    case 5:                             // OPEN 버튼 해제
    {
      if(gu16TimerJob > 100){
 8000348:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <CheckFistSetting+0x1a4>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	2b64      	cmp	r3, #100	; 0x64
 800034e:	d903      	bls.n	8000358 <CheckFistSetting+0x11c>
         gu8JobCheckStep = 0xff;        
 8000350:	4b22      	ldr	r3, [pc, #136]	; (80003dc <CheckFistSetting+0x1a0>)
 8000352:	22ff      	movs	r2, #255	; 0xff
 8000354:	701a      	strb	r2, [r3, #0]
         break;
 8000356:	e03f      	b.n	80003d8 <CheckFistSetting+0x19c>
       }
  
         clr_sw_ansim1();                  // OPEN 버튼 해제
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	4823      	ldr	r0, [pc, #140]	; (80003ec <CheckFistSetting+0x1b0>)
 800035e:	f003 fa45 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 100){            // 100ms초 기다림
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <CheckFistSetting+0x1a4>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	2b63      	cmp	r3, #99	; 0x63
 8000368:	d933      	bls.n	80003d2 <CheckFistSetting+0x196>
         break;
      }
      
       ++gu8JobCheckStep;
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <CheckFistSetting+0x1a0>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <CheckFistSetting+0x1a0>)
 8000374:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <CheckFistSetting+0x1a4>)
 8000378:	2200      	movs	r2, #0
 800037a:	801a      	strh	r2, [r3, #0]
         break;
 800037c:	e02c      	b.n	80003d8 <CheckFistSetting+0x19c>
    }

    case 6:                             // 근접센서(데드볼트) 상태 검사
    {
      if(gu16TimerJob > 100){           
 800037e:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <CheckFistSetting+0x1a4>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	2b64      	cmp	r3, #100	; 0x64
 8000384:	d903      	bls.n	800038e <CheckFistSetting+0x152>
         gu8JobCheckStep = 0xff;       
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <CheckFistSetting+0x1a0>)
 8000388:	22ff      	movs	r2, #255	; 0xff
 800038a:	701a      	strb	r2, [r3, #0]
         break;
 800038c:	e024      	b.n	80003d8 <CheckFistSetting+0x19c>
       }
        
      if(get_state_deadbolt())       // 만약 데드볼트가 open 상태이면 error 종료
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <CheckFistSetting+0x1a8>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <CheckFistSetting+0x166>
      {
    	 gu8JobCheckStep = 0xff;     // 검사 스탭 표시하면서 Error
 800039a:	4b10      	ldr	r3, [pc, #64]	; (80003dc <CheckFistSetting+0x1a0>)
 800039c:	22ff      	movs	r2, #255	; 0xff
 800039e:	701a      	strb	r2, [r3, #0]
    	 break;
 80003a0:	e01a      	b.n	80003d8 <CheckFistSetting+0x19c>
      }
      else
      {                              // 데드볼트가 close 상태 정상 종료
    	 clr_low_battery();          // 4.5V 전원 off
 80003a2:	2200      	movs	r2, #0
 80003a4:	2101      	movs	r1, #1
 80003a6:	4810      	ldr	r0, [pc, #64]	; (80003e8 <CheckFistSetting+0x1ac>)
 80003a8:	f003 fa20 	bl	80037ec <HAL_GPIO_WritePin>
    	 gu8JobCheckStep = 0;
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <CheckFistSetting+0x1a0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
    	 gu16TimerJob = 0;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <CheckFistSetting+0x1a4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	801a      	strh	r2, [r3, #0]
         break;
 80003b8:	e00e      	b.n	80003d8 <CheckFistSetting+0x19c>
      }
    }

    default:
    {
      if(gu8JobCheckStep){
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <CheckFistSetting+0x1a0>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d009      	beq.n	80003d6 <CheckFistSetting+0x19a>
         gu8JobCheckStep = 0xff;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <CheckFistSetting+0x1a0>)
 80003c4:	22ff      	movs	r2, #255	; 0xff
 80003c6:	701a      	strb	r2, [r3, #0]
      }      
      break;
 80003c8:	e005      	b.n	80003d6 <CheckFistSetting+0x19a>
         break;
 80003ca:	bf00      	nop
 80003cc:	e004      	b.n	80003d8 <CheckFistSetting+0x19c>
         break;
 80003ce:	bf00      	nop
 80003d0:	e002      	b.n	80003d8 <CheckFistSetting+0x19c>
         break;
 80003d2:	bf00      	nop
 80003d4:	e000      	b.n	80003d8 <CheckFistSetting+0x19c>
      break;
 80003d6:	bf00      	nop
    }
  }
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20001dbf 	.word	0x20001dbf
 80003e0:	20001d66 	.word	0x20001d66
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	40011800 	.word	0x40011800

080003f0 <CheckPasswordOpen>:
  * @brief  Password Open
  * @param  None
  * @retval None
-----------------------------------------------------*/
void CheckPasswordOpen(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  switch(gu8JobCheckStep)
 80003f4:	4ba5      	ldr	r3, [pc, #660]	; (800068c <CheckPasswordOpen+0x29c>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	2b0e      	cmp	r3, #14
 80003fc:	f200 8247 	bhi.w	800088e <CheckPasswordOpen+0x49e>
 8000400:	a201      	add	r2, pc, #4	; (adr r2, 8000408 <CheckPasswordOpen+0x18>)
 8000402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000406:	bf00      	nop
 8000408:	08000445 	.word	0x08000445
 800040c:	08000469 	.word	0x08000469
 8000410:	080004a5 	.word	0x080004a5
 8000414:	0800051d 	.word	0x0800051d
 8000418:	08000563 	.word	0x08000563
 800041c:	0800059b 	.word	0x0800059b
 8000420:	08000601 	.word	0x08000601
 8000424:	08000629 	.word	0x08000629
 8000428:	080006a1 	.word	0x080006a1
 800042c:	080006c9 	.word	0x080006c9
 8000430:	0800072f 	.word	0x0800072f
 8000434:	08000757 	.word	0x08000757
 8000438:	080007bd 	.word	0x080007bd
 800043c:	080007e5 	.word	0x080007e5
 8000440:	0800084b 	.word	0x0800084b
  {
    case 1:
    {
      if(gu16TimerJob > 100){         // Wait for cylinder, 기본 10ms 타이머, 10초 초과해도 반응없으면 에러처리, 기다리는 항목 아님.
 8000444:	4b92      	ldr	r3, [pc, #584]	; (8000690 <CheckPasswordOpen+0x2a0>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	2b64      	cmp	r3, #100	; 0x64
 800044a:	d903      	bls.n	8000454 <CheckPasswordOpen+0x64>
         gu8JobCheckStep = 0xff;      // 검사 항목 중 에러 발생, 지정된 시간이 초과 되었을때 실행되어 에러 발생, 검사 스탭 표시
 800044c:	4b8f      	ldr	r3, [pc, #572]	; (800068c <CheckPasswordOpen+0x29c>)
 800044e:	22ff      	movs	r2, #255	; 0xff
 8000450:	701a      	strb	r2, [r3, #0]
         break;
 8000452:	e241      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
       
       ++gu8JobCheckStep;
 8000454:	4b8d      	ldr	r3, [pc, #564]	; (800068c <CheckPasswordOpen+0x29c>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	3301      	adds	r3, #1
 800045a:	b2da      	uxtb	r2, r3
 800045c:	4b8b      	ldr	r3, [pc, #556]	; (800068c <CheckPasswordOpen+0x29c>)
 800045e:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 8000460:	4b8b      	ldr	r3, [pc, #556]	; (8000690 <CheckPasswordOpen+0x2a0>)
 8000462:	2200      	movs	r2, #0
 8000464:	801a      	strh	r2, [r3, #0]
         break;
 8000466:	e237      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
    }

    case 2:                             // 6V 전원 공급
    {
      if(gu16TimerJob > 300){
 8000468:	4b89      	ldr	r3, [pc, #548]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000470:	d903      	bls.n	800047a <CheckPasswordOpen+0x8a>
         gu8JobCheckStep = 0xff;        
 8000472:	4b86      	ldr	r3, [pc, #536]	; (800068c <CheckPasswordOpen+0x29c>)
 8000474:	22ff      	movs	r2, #255	; 0xff
 8000476:	701a      	strb	r2, [r3, #0]
         break;
 8000478:	e22e      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }

         set_vbat_target();                // 6V 전원 공급
 800047a:	2201      	movs	r2, #1
 800047c:	2102      	movs	r1, #2
 800047e:	4885      	ldr	r0, [pc, #532]	; (8000694 <CheckPasswordOpen+0x2a4>)
 8000480:	f003 f9b4 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 300){           // 200ms초 기다림
 8000484:	4b82      	ldr	r3, [pc, #520]	; (8000690 <CheckPasswordOpen+0x2a0>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800048c:	f0c0 8207 	bcc.w	800089e <CheckPasswordOpen+0x4ae>
         break;
      }
      
       ++gu8JobCheckStep;
 8000490:	4b7e      	ldr	r3, [pc, #504]	; (800068c <CheckPasswordOpen+0x29c>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	3301      	adds	r3, #1
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b7c      	ldr	r3, [pc, #496]	; (800068c <CheckPasswordOpen+0x29c>)
 800049a:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 800049c:	4b7c      	ldr	r3, [pc, #496]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	801a      	strh	r2, [r3, #0]
         break;
 80004a2:	e219      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
    }

    case 3:                             // 웨이크 업 동작 "5"번, "8번" 터치
    {
      if(gu16TimerJob > 100){           // Wait for cylinder, 기본 10ms 타이머, 10초 초과해도 반응없으면 에러처리, 기다리는 항목 아님.
 80004a4:	4b7a      	ldr	r3, [pc, #488]	; (8000690 <CheckPasswordOpen+0x2a0>)
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	2b64      	cmp	r3, #100	; 0x64
 80004aa:	d903      	bls.n	80004b4 <CheckPasswordOpen+0xc4>
         gu8JobCheckStep = 0xff;        // 검사 항목 중 에러 발생, 지정된 시간이 초과 되었을때 실행되어 에러 발생, 검사 스탭 표시
 80004ac:	4b77      	ldr	r3, [pc, #476]	; (800068c <CheckPasswordOpen+0x29c>)
 80004ae:	22ff      	movs	r2, #255	; 0xff
 80004b0:	701a      	strb	r2, [r3, #0]
         break;
 80004b2:	e211      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
  
        set_handle_sw();                  // "5" 터치 동작
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	4877      	ldr	r0, [pc, #476]	; (8000698 <CheckPasswordOpen+0x2a8>)
 80004bc:	f003 f996 	bl	80037ec <HAL_GPIO_WritePin>
        set_KEY0();                       // "0" 터치 동작
 80004c0:	2201      	movs	r2, #1
 80004c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c6:	4874      	ldr	r0, [pc, #464]	; (8000698 <CheckPasswordOpen+0x2a8>)
 80004c8:	f003 f990 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){           // 100ms초 기다림
 80004cc:	4b70      	ldr	r3, [pc, #448]	; (8000690 <CheckPasswordOpen+0x2a0>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	2b31      	cmp	r3, #49	; 0x31
 80004d2:	f240 81e6 	bls.w	80008a2 <CheckPasswordOpen+0x4b2>
         break;
      }

         gu16JobTmpStep1 = CheckKeyLed();
 80004d6:	f002 f9d9 	bl	800288c <CheckKeyLed>
 80004da:	4603      	mov	r3, r0
 80004dc:	461a      	mov	r2, r3
 80004de:	4b6f      	ldr	r3, [pc, #444]	; (800069c <CheckPasswordOpen+0x2ac>)
 80004e0:	801a      	strh	r2, [r3, #0]
         gu16JobTmpStep1 &= KEY_LED_NUMALL;
 80004e2:	4b6e      	ldr	r3, [pc, #440]	; (800069c <CheckPasswordOpen+0x2ac>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	4b6b      	ldr	r3, [pc, #428]	; (800069c <CheckPasswordOpen+0x2ac>)
 80004ee:	801a      	strh	r2, [r3, #0]
      if(gu16JobTmpStep1 & (KEY_LED_NUMALL)){
 80004f0:	4b6a      	ldr	r3, [pc, #424]	; (800069c <CheckPasswordOpen+0x2ac>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 80004fa:	4013      	ands	r3, r2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d009      	beq.n	8000514 <CheckPasswordOpen+0x124>
       ++gu8JobCheckStep;
 8000500:	4b62      	ldr	r3, [pc, #392]	; (800068c <CheckPasswordOpen+0x29c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b60      	ldr	r3, [pc, #384]	; (800068c <CheckPasswordOpen+0x29c>)
 800050a:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 800050c:	4b60      	ldr	r3, [pc, #384]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
         break;
 8000512:	e1e1      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
      else{                              // LED가 미 점등된게 있을 경우
         gu8JobCheckStep = 0xff;          // 검사 중 에러가 발생했을 경우 에러 처리, 시간 초과 경우도 포함, 검사 중 에러가 발생한 스탭도 표시
 8000514:	4b5d      	ldr	r3, [pc, #372]	; (800068c <CheckPasswordOpen+0x29c>)
 8000516:	22ff      	movs	r2, #255	; 0xff
 8000518:	701a      	strb	r2, [r3, #0]
         break;
 800051a:	e1dd      	b.n	80008d8 <CheckPasswordOpen+0x4e8>

    }

    case 4:                             // "5"번, "8번" 터치 해제
    {
      if(gu16TimerJob > 100){           
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	2b64      	cmp	r3, #100	; 0x64
 8000522:	d903      	bls.n	800052c <CheckPasswordOpen+0x13c>
         gu8JobCheckStep = 0xff;        
 8000524:	4b59      	ldr	r3, [pc, #356]	; (800068c <CheckPasswordOpen+0x29c>)
 8000526:	22ff      	movs	r2, #255	; 0xff
 8000528:	701a      	strb	r2, [r3, #0]
         break;
 800052a:	e1d5      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
       
         clr_handle_sw();                  // "5" 터치 동작 해제
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000532:	4859      	ldr	r0, [pc, #356]	; (8000698 <CheckPasswordOpen+0x2a8>)
 8000534:	f003 f95a 	bl	80037ec <HAL_GPIO_WritePin>
         clr_KEY0();                       // "0" 터치 동작 해제
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053e:	4856      	ldr	r0, [pc, #344]	; (8000698 <CheckPasswordOpen+0x2a8>)
 8000540:	f003 f954 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){           // 100ms초 기다림
 8000544:	4b52      	ldr	r3, [pc, #328]	; (8000690 <CheckPasswordOpen+0x2a0>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	2b31      	cmp	r3, #49	; 0x31
 800054a:	f240 81ac 	bls.w	80008a6 <CheckPasswordOpen+0x4b6>
         break;
      }

       ++gu8JobCheckStep;
 800054e:	4b4f      	ldr	r3, [pc, #316]	; (800068c <CheckPasswordOpen+0x29c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b4d      	ldr	r3, [pc, #308]	; (800068c <CheckPasswordOpen+0x29c>)
 8000558:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 800055a:	4b4d      	ldr	r3, [pc, #308]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800055c:	2200      	movs	r2, #0
 800055e:	801a      	strh	r2, [r3, #0]
         break;
 8000560:	e1ba      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
    }

    case 5:                             // "1"번 터치
    {
      if(gu16TimerJob > 100){
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <CheckPasswordOpen+0x2a0>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	2b64      	cmp	r3, #100	; 0x64
 8000568:	d903      	bls.n	8000572 <CheckPasswordOpen+0x182>
    	 gu8JobCheckStep = 0xff;
 800056a:	4b48      	ldr	r3, [pc, #288]	; (800068c <CheckPasswordOpen+0x29c>)
 800056c:	22ff      	movs	r2, #255	; 0xff
 800056e:	701a      	strb	r2, [r3, #0]
    	 break;
 8000570:	e1b2      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }

         set_home_auto();                  // "1" 터치 동작
 8000572:	2201      	movs	r2, #1
 8000574:	2101      	movs	r1, #1
 8000576:	4848      	ldr	r0, [pc, #288]	; (8000698 <CheckPasswordOpen+0x2a8>)
 8000578:	f003 f938 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){            // 50ms초 기다림
 800057c:	4b44      	ldr	r3, [pc, #272]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	2b31      	cmp	r3, #49	; 0x31
 8000582:	f240 8192 	bls.w	80008aa <CheckPasswordOpen+0x4ba>
         break;
      }

       ++gu8JobCheckStep;
 8000586:	4b41      	ldr	r3, [pc, #260]	; (800068c <CheckPasswordOpen+0x29c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b3f      	ldr	r3, [pc, #252]	; (800068c <CheckPasswordOpen+0x29c>)
 8000590:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 8000592:	4b3f      	ldr	r3, [pc, #252]	; (8000690 <CheckPasswordOpen+0x2a0>)
 8000594:	2200      	movs	r2, #0
 8000596:	801a      	strh	r2, [r3, #0]
         break;
 8000598:	e19e      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
    }

    case 6:                             // "1" 터치 해제 or 확인, key led 중 1번 led가 점등시 ok , 미 점등시 NG
    {
      if(gu16TimerJob > 100){           // Wait for cylinder, 기본 10ms 타이머, 10초 초과해도 반응없으면 에러처리, 기다리는 항목 아님.
 800059a:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	2b64      	cmp	r3, #100	; 0x64
 80005a0:	d903      	bls.n	80005aa <CheckPasswordOpen+0x1ba>
         gu8JobCheckStep = 0xff;        // 검사 항목 중 에러 발생, 지정된 시간이 초과 되었을때 실행되어 에러 발생, 검사 스탭 표시
 80005a2:	4b3a      	ldr	r3, [pc, #232]	; (800068c <CheckPasswordOpen+0x29c>)
 80005a4:	22ff      	movs	r2, #255	; 0xff
 80005a6:	701a      	strb	r2, [r3, #0]
         break;
 80005a8:	e196      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
  
         clr_home_auto();                       // "1" 터치 동작 해제
 80005aa:	2200      	movs	r2, #0
 80005ac:	2101      	movs	r1, #1
 80005ae:	483a      	ldr	r0, [pc, #232]	; (8000698 <CheckPasswordOpen+0x2a8>)
 80005b0:	f003 f91c 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){                 // 50ms초 기다림
 80005b4:	4b36      	ldr	r3, [pc, #216]	; (8000690 <CheckPasswordOpen+0x2a0>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2b31      	cmp	r3, #49	; 0x31
 80005ba:	f240 8178 	bls.w	80008ae <CheckPasswordOpen+0x4be>
         break;
      }

         gu16JobTmpStep1 = CheckKeyLed();
 80005be:	f002 f965 	bl	800288c <CheckKeyLed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <CheckPasswordOpen+0x2ac>)
 80005c8:	801a      	strh	r2, [r3, #0]
         gu16JobTmpStep1 &= KEY_LED_NUMALL;
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <CheckPasswordOpen+0x2ac>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b31      	ldr	r3, [pc, #196]	; (800069c <CheckPasswordOpen+0x2ac>)
 80005d6:	801a      	strh	r2, [r3, #0]
      if(gu16JobTmpStep1 & (KEY_LED_K2)){
 80005d8:	4b30      	ldr	r3, [pc, #192]	; (800069c <CheckPasswordOpen+0x2ac>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d009      	beq.n	80005f8 <CheckPasswordOpen+0x208>
         ++gu8JobCheckStep;
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <CheckPasswordOpen+0x29c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <CheckPasswordOpen+0x29c>)
 80005ee:	701a      	strb	r2, [r3, #0]
           gu16TimerJob = 0;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <CheckPasswordOpen+0x2a0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	801a      	strh	r2, [r3, #0]
           break;
 80005f6:	e16f      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
      else{                                // 미 점등된 LED가 있을 경우
         gu8JobCheckStep = 0xff;          // 에러가 발생한 스탭 표시
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <CheckPasswordOpen+0x29c>)
 80005fa:	22ff      	movs	r2, #255	; 0xff
 80005fc:	701a      	strb	r2, [r3, #0]
         break;
 80005fe:	e16b      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
    }
    
    case 7:                             // "2"번 터치
    {      
         set_fire_sensor();                // "2" 터치 동작
 8000600:	2201      	movs	r2, #1
 8000602:	2102      	movs	r1, #2
 8000604:	4824      	ldr	r0, [pc, #144]	; (8000698 <CheckPasswordOpen+0x2a8>)
 8000606:	f003 f8f1 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){            // 50ms초 기다림
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2b31      	cmp	r3, #49	; 0x31
 8000610:	f240 814f 	bls.w	80008b2 <CheckPasswordOpen+0x4c2>
         break;
      }      
       ++gu8JobCheckStep;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <CheckPasswordOpen+0x29c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <CheckPasswordOpen+0x29c>)
 800061e:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <CheckPasswordOpen+0x2a0>)
 8000622:	2200      	movs	r2, #0
 8000624:	801a      	strh	r2, [r3, #0]
         break;
 8000626:	e157      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
    }

    case 8:                             // "2" 터치 해제 or 확인, key led 중 2번 led가 점등시 ok , 미 점등시 NG
    {
      if(gu16TimerJob > 100){           // Wait for cylinder, 기본 10ms 타이머, 10초 초과해도 반응없으면 에러처리, 기다리는 항목 아님.
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	2b64      	cmp	r3, #100	; 0x64
 800062e:	d903      	bls.n	8000638 <CheckPasswordOpen+0x248>
         gu8JobCheckStep = 0xff;        // 검사 항목 중 에러 발생, 지정된 시간이 초과 되었을때 실행되어 에러 발생, 검사 스탭 표시
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <CheckPasswordOpen+0x29c>)
 8000632:	22ff      	movs	r2, #255	; 0xff
 8000634:	701a      	strb	r2, [r3, #0]
         break;
 8000636:	e14f      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
  
         clr_fire_sensor();                     // "2" 터치 동작 해제
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4816      	ldr	r0, [pc, #88]	; (8000698 <CheckPasswordOpen+0x2a8>)
 800063e:	f003 f8d5 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){                 // 50ms초 기다림
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <CheckPasswordOpen+0x2a0>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	2b31      	cmp	r3, #49	; 0x31
 8000648:	f240 8135 	bls.w	80008b6 <CheckPasswordOpen+0x4c6>
         break;
      }

         gu16JobTmpStep1 = CheckKeyLed();
 800064c:	f002 f91e 	bl	800288c <CheckKeyLed>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <CheckPasswordOpen+0x2ac>)
 8000656:	801a      	strh	r2, [r3, #0]
         gu16JobTmpStep1 &= KEY_LED_NUMALL;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <CheckPasswordOpen+0x2ac>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <CheckPasswordOpen+0x2ac>)
 8000664:	801a      	strh	r2, [r3, #0]
      if(gu16JobTmpStep1 & (KEY_LED_K8)){
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <CheckPasswordOpen+0x2ac>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b21b      	sxth	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	da09      	bge.n	8000684 <CheckPasswordOpen+0x294>

       ++gu8JobCheckStep;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <CheckPasswordOpen+0x29c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <CheckPasswordOpen+0x29c>)
 800067a:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <CheckPasswordOpen+0x2a0>)
 800067e:	2200      	movs	r2, #0
 8000680:	801a      	strh	r2, [r3, #0]
         break;
 8000682:	e129      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
      else{                                // 미 점등된 LED가 있을 경우
          gu8JobCheckStep = 0xff;          // 에러가 발생한 스탭 표시
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <CheckPasswordOpen+0x29c>)
 8000686:	22ff      	movs	r2, #255	; 0xff
 8000688:	701a      	strb	r2, [r3, #0]
          break;
 800068a:	e125      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
 800068c:	20001dbf 	.word	0x20001dbf
 8000690:	20001d66 	.word	0x20001d66
 8000694:	40010c00 	.word	0x40010c00
 8000698:	40011800 	.word	0x40011800
 800069c:	20001960 	.word	0x20001960
          break;             
    }

    case 9:                             // "3"번 터치
    {
         set_wifi();                       // "3" 터치 동작
 80006a0:	2201      	movs	r2, #1
 80006a2:	2104      	movs	r1, #4
 80006a4:	488d      	ldr	r0, [pc, #564]	; (80008dc <CheckPasswordOpen+0x4ec>)
 80006a6:	f003 f8a1 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){            // 50ms초 기다림
 80006aa:	4b8d      	ldr	r3, [pc, #564]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	2b31      	cmp	r3, #49	; 0x31
 80006b0:	f240 8103 	bls.w	80008ba <CheckPasswordOpen+0x4ca>
         break;
      }      
       ++gu8JobCheckStep;
 80006b4:	4b8b      	ldr	r3, [pc, #556]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b89      	ldr	r3, [pc, #548]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80006be:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 80006c0:	4b87      	ldr	r3, [pc, #540]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
         break;      
 80006c6:	e107      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
    }

    case 10:                             // "3" 터치 해제 or 확인, key led 중 3번 led가 점등시 ok , 미 점등시 NG
    {
      if(gu16TimerJob > 100){           // Wait for cylinder, 기본 10ms 타이머, 10초 초과해도 반응없으면 에러처리, 기다리는 항목 아님.
 80006c8:	4b85      	ldr	r3, [pc, #532]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	2b64      	cmp	r3, #100	; 0x64
 80006ce:	d903      	bls.n	80006d8 <CheckPasswordOpen+0x2e8>
         gu8JobCheckStep = 0xff;        // 검사 항목 중 에러 발생, 지정된 시간이 초과 되었을때 실행되어 에러 발생, 검사 스탭 표시
 80006d0:	4b84      	ldr	r3, [pc, #528]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	701a      	strb	r2, [r3, #0]
         break;
 80006d6:	e0ff      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
  
      clr_wifi();                       // "3" 터치 동작 해제      
 80006d8:	2200      	movs	r2, #0
 80006da:	2104      	movs	r1, #4
 80006dc:	487f      	ldr	r0, [pc, #508]	; (80008dc <CheckPasswordOpen+0x4ec>)
 80006de:	f003 f885 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){            // 50ms초 기다림
 80006e2:	4b7f      	ldr	r3, [pc, #508]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	2b31      	cmp	r3, #49	; 0x31
 80006e8:	f240 80e9 	bls.w	80008be <CheckPasswordOpen+0x4ce>
         break;
      }

         gu16JobTmpStep1 = CheckKeyLed();
 80006ec:	f002 f8ce 	bl	800288c <CheckKeyLed>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b7c      	ldr	r3, [pc, #496]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 80006f6:	801a      	strh	r2, [r3, #0]
         gu16JobTmpStep1 &= KEY_LED_NUMALL;
 80006f8:	4b7b      	ldr	r3, [pc, #492]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b79      	ldr	r3, [pc, #484]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000704:	801a      	strh	r2, [r3, #0]
      if(gu16JobTmpStep1 & (KEY_LED_K6)){
 8000706:	4b78      	ldr	r3, [pc, #480]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800070e:	2b00      	cmp	r3, #0
 8000710:	d009      	beq.n	8000726 <CheckPasswordOpen+0x336>
       ++gu8JobCheckStep;
 8000712:	4b74      	ldr	r3, [pc, #464]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b72      	ldr	r3, [pc, #456]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 800071c:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 800071e:	4b70      	ldr	r3, [pc, #448]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 8000720:	2200      	movs	r2, #0
 8000722:	801a      	strh	r2, [r3, #0]
         break;
 8000724:	e0d8      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
      else{                                // 미 점등된 LED가 있을 경우
          gu8JobCheckStep = 0xff;          // 에러가 발생한 스탭 표시
 8000726:	4b6f      	ldr	r3, [pc, #444]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000728:	22ff      	movs	r2, #255	; 0xff
 800072a:	701a      	strb	r2, [r3, #0]
          break;
 800072c:	e0d4      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
          break;             
    }

    case 11:                             // "4"번 터치
    {
         set_rf_pin();                       // "4" 터치 동작
 800072e:	2201      	movs	r2, #1
 8000730:	2108      	movs	r1, #8
 8000732:	486a      	ldr	r0, [pc, #424]	; (80008dc <CheckPasswordOpen+0x4ec>)
 8000734:	f003 f85a 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){            // 50ms초 기다림
 8000738:	4b69      	ldr	r3, [pc, #420]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b31      	cmp	r3, #49	; 0x31
 800073e:	f240 80c0 	bls.w	80008c2 <CheckPasswordOpen+0x4d2>
         break;
      }      
       ++gu8JobCheckStep;
 8000742:	4b68      	ldr	r3, [pc, #416]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b66      	ldr	r3, [pc, #408]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 800074c:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 800074e:	4b64      	ldr	r3, [pc, #400]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 8000750:	2200      	movs	r2, #0
 8000752:	801a      	strh	r2, [r3, #0]
         break;      
 8000754:	e0c0      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
    }

    case 12:                             // "4" 터치 해제 or 확인, key led 중 4번 led가 점등시 ok , 미 점등시 NG
    {
      if(gu16TimerJob > 100){           // Wait for cylinder, 기본 10ms 타이머, 10초 초과해도 반응없으면 에러처리, 기다리는 항목 아님.
 8000756:	4b62      	ldr	r3, [pc, #392]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2b64      	cmp	r3, #100	; 0x64
 800075c:	d903      	bls.n	8000766 <CheckPasswordOpen+0x376>
         gu8JobCheckStep = 0xff;        // 검사 항목 중 에러 발생, 지정된 시간이 초과 되었을때 실행되어 에러 발생, 검사 스탭 표시
 800075e:	4b61      	ldr	r3, [pc, #388]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	701a      	strb	r2, [r3, #0]
         break;
 8000764:	e0b8      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
  
         clr_rf_pin();                     // "4" 터치 동작 해제
 8000766:	2200      	movs	r2, #0
 8000768:	2108      	movs	r1, #8
 800076a:	485c      	ldr	r0, [pc, #368]	; (80008dc <CheckPasswordOpen+0x4ec>)
 800076c:	f003 f83e 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){            // 50ms초 기다림
 8000770:	4b5b      	ldr	r3, [pc, #364]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b31      	cmp	r3, #49	; 0x31
 8000776:	f240 80a6 	bls.w	80008c6 <CheckPasswordOpen+0x4d6>
         break;
      }

         gu16JobTmpStep1 = CheckKeyLed();
 800077a:	f002 f887 	bl	800288c <CheckKeyLed>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b59      	ldr	r3, [pc, #356]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000784:	801a      	strh	r2, [r3, #0]
         gu16JobTmpStep1 &= KEY_LED_NUMALL;
 8000786:	4b58      	ldr	r3, [pc, #352]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b55      	ldr	r3, [pc, #340]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000792:	801a      	strh	r2, [r3, #0]
      if(gu16JobTmpStep1 & (KEY_LED_K5)){
 8000794:	4b54      	ldr	r3, [pc, #336]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <CheckPasswordOpen+0x3c4>
       ++gu8JobCheckStep;
 80007a0:	4b50      	ldr	r3, [pc, #320]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b4e      	ldr	r3, [pc, #312]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80007aa:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 80007ac:	4b4c      	ldr	r3, [pc, #304]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	801a      	strh	r2, [r3, #0]
         break;
 80007b2:	e091      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
      else{                                // 미 점등된 LED가 있을 경우
          gu8JobCheckStep = 0xff;          // 에러가 발생한 스탭 표시
 80007b4:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	701a      	strb	r2, [r3, #0]
          break;
 80007ba:	e08d      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
          break;             
    }

    case 13:                             // "*" 터치
    {
         set_KEYSTAR();                    // "*" 터치 동작
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c2:	484a      	ldr	r0, [pc, #296]	; (80008ec <CheckPasswordOpen+0x4fc>)
 80007c4:	f003 f812 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){            // 50ms초 기다림
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2b31      	cmp	r3, #49	; 0x31
 80007ce:	d97c      	bls.n	80008ca <CheckPasswordOpen+0x4da>
         break;
      }
      
       ++gu8JobCheckStep;
 80007d0:	4b44      	ldr	r3, [pc, #272]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80007da:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 80007dc:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	801a      	strh	r2, [r3, #0]
         break;
 80007e2:	e079      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
    }

    case 14:
    {
      if(gu16TimerJob > 100){           // Wait for cylinder, 기본 10ms 타이머, 10초 초과해도 반응없으면 에러처리, 기다리는 항목 아님.
 80007e4:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2b64      	cmp	r3, #100	; 0x64
 80007ea:	d903      	bls.n	80007f4 <CheckPasswordOpen+0x404>
         gu8JobCheckStep = 0xff;        // 검사 항목 중 에러 발생, 지정된 시간이 초과 되었을때 실행되어 에러 발생, 검사 스탭 표시
 80007ec:	4b3d      	ldr	r3, [pc, #244]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 80007ee:	22ff      	movs	r2, #255	; 0xff
 80007f0:	701a      	strb	r2, [r3, #0]
         break;
 80007f2:	e071      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
  
         clr_KEYSTAR();                        // "*" 터치 동작 해제
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fa:	483c      	ldr	r0, [pc, #240]	; (80008ec <CheckPasswordOpen+0x4fc>)
 80007fc:	f002 fff6 	bl	80037ec <HAL_GPIO_WritePin>
      if(gu16TimerJob < 50){                // 50ms초 기다림
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b31      	cmp	r3, #49	; 0x31
 8000806:	d962      	bls.n	80008ce <CheckPasswordOpen+0x4de>
         break;
      }

         gu16JobTmpStep1 = CheckKeyLed();        // 전체 KEY LED OFF 검사
 8000808:	f002 f840 	bl	800288c <CheckKeyLed>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000812:	801a      	strh	r2, [r3, #0]
         gu16JobTmpStep1 &= KEY_LED_NUMALL;
 8000814:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000820:	801a      	strh	r2, [r3, #0]
      if(!(gu16JobTmpStep1 & (KEY_LED_K9))){  // 전체 KEY LED가 OFF일 경우
 8000822:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <CheckPasswordOpen+0x4f8>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d109      	bne.n	8000842 <CheckPasswordOpen+0x452>

       ++gu8JobCheckStep;
 800082e:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000838:	701a      	strb	r2, [r3, #0]
         gu16TimerJob = 0;
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 800083c:	2200      	movs	r2, #0
 800083e:	801a      	strh	r2, [r3, #0]
         break;
 8000840:	e04a      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
      }
      else{                                 // 점등되어 있을 경우
           gu8JobCheckStep = 0xff;          // 에러가 발생한 스탭 표시
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000844:	22ff      	movs	r2, #255	; 0xff
 8000846:	701a      	strb	r2, [r3, #0]
           break;
 8000848:	e046      	b.n	80008d8 <CheckPasswordOpen+0x4e8>

    }

    case 15:                             // 근접센서(데드볼트) 상태 검사
    {
      if(gu16TimerJob > 200){
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	2bc8      	cmp	r3, #200	; 0xc8
 8000850:	d903      	bls.n	800085a <CheckPasswordOpen+0x46a>
         gu8JobCheckStep = 0xff;
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	701a      	strb	r2, [r3, #0]
         break;
 8000858:	e03e      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }

      if(gu16TimerJob > 200){
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	2bc8      	cmp	r3, #200	; 0xc8
 8000860:	d837      	bhi.n	80008d2 <CheckPasswordOpen+0x4e2>
         break;
       }

      if(!(get_state_deadbolt())){      // 만약 데드볼트가 close 상태이면 Error 처리
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <CheckPasswordOpen+0x500>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d103      	bne.n	8000876 <CheckPasswordOpen+0x486>
      	 gu8JobCheckStep = 0xff;        // 검사 스탭 표시하면서 Error
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000870:	22ff      	movs	r2, #255	; 0xff
 8000872:	701a      	strb	r2, [r3, #0]
         break;
 8000874:	e030      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
       }
      else                              // 데드볼트가 open 상태이면 종료하고 다음 항목으로
      {
        clr_vbat_target();                // 6V 전원 off
 8000876:	2200      	movs	r2, #0
 8000878:	2102      	movs	r1, #2
 800087a:	481c      	ldr	r0, [pc, #112]	; (80008ec <CheckPasswordOpen+0x4fc>)
 800087c:	f002 ffb6 	bl	80037ec <HAL_GPIO_WritePin>
        gu8JobCheckStep = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
        gu16TimerJob = 0;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <CheckPasswordOpen+0x4f0>)
 8000888:	2200      	movs	r2, #0
 800088a:	801a      	strh	r2, [r3, #0]
        break;
 800088c:	e024      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
      break;
    }
    
    default:
    {
      if(gu8JobCheckStep){
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d01f      	beq.n	80008d6 <CheckPasswordOpen+0x4e6>
        gu8JobCheckStep = 0xff;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <CheckPasswordOpen+0x4f4>)
 8000898:	22ff      	movs	r2, #255	; 0xff
 800089a:	701a      	strb	r2, [r3, #0]
      }      
      break;
 800089c:	e01b      	b.n	80008d6 <CheckPasswordOpen+0x4e6>
         break;
 800089e:	bf00      	nop
 80008a0:	e01a      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008a2:	bf00      	nop
 80008a4:	e018      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008a6:	bf00      	nop
 80008a8:	e016      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008aa:	bf00      	nop
 80008ac:	e014      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008ae:	bf00      	nop
 80008b0:	e012      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008b2:	bf00      	nop
 80008b4:	e010      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008b6:	bf00      	nop
 80008b8:	e00e      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008ba:	bf00      	nop
 80008bc:	e00c      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008be:	bf00      	nop
 80008c0:	e00a      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008c2:	bf00      	nop
 80008c4:	e008      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008c6:	bf00      	nop
 80008c8:	e006      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008ca:	bf00      	nop
 80008cc:	e004      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008ce:	bf00      	nop
 80008d0:	e002      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
         break;
 80008d2:	bf00      	nop
 80008d4:	e000      	b.n	80008d8 <CheckPasswordOpen+0x4e8>
      break;
 80008d6:	bf00      	nop
    }    
  }  
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40011800 	.word	0x40011800
 80008e0:	20001d66 	.word	0x20001d66
 80008e4:	20001dbf 	.word	0x20001dbf
 80008e8:	20001960 	.word	0x20001960
 80008ec:	40010c00 	.word	0x40010c00
 80008f0:	40011000 	.word	0x40011000

080008f4 <defaultJob>:
  * gu8JobCheckNum = 0;   // 첫번째 작업 번호
  * gu8JobCheckStep = 1;   //반드시 다음 작업의 첫번째 스탭 설정
  * 
*/
void defaultJob(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	6078      	str	r0, [r7, #4]
  osStatus_t osStateValue;
  
  // static uint16_t u16dTskTmpStep;
    // WaitReadyForStart();
  gu8JobStep = 0;
 80008fc:	4bb1      	ldr	r3, [pc, #708]	; (8000bc4 <defaultJob+0x2d0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    switch(gu8JobStep)
 8000902:	4bb0      	ldr	r3, [pc, #704]	; (8000bc4 <defaultJob+0x2d0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b0e      	cmp	r3, #14
 8000908:	f200 8396 	bhi.w	8001038 <defaultJob+0x744>
 800090c:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <defaultJob+0x20>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	08000951 	.word	0x08000951
 8000918:	08000985 	.word	0x08000985
 800091c:	080009ad 	.word	0x080009ad
 8000920:	08000a2d 	.word	0x08000a2d
 8000924:	08000a7f 	.word	0x08000a7f
 8000928:	08000adb 	.word	0x08000adb
 800092c:	08000b19 	.word	0x08000b19
 8000930:	08000b87 	.word	0x08000b87
 8000934:	08000cfb 	.word	0x08000cfb
 8000938:	08000e35 	.word	0x08000e35
 800093c:	08000ee1 	.word	0x08000ee1
 8000940:	08000f9d 	.word	0x08000f9d
 8000944:	08000fc9 	.word	0x08000fc9
 8000948:	08000fef 	.word	0x08000fef
 800094c:	08001007 	.word	0x08001007
    {
        case JOB_STATE_INIT:
        {
          MX_GPIO_Init();
 8000950:	f001 f9ec 	bl	8001d2c <MX_GPIO_Init>
          HAL_UART_MspInit(&huart1);
 8000954:	489c      	ldr	r0, [pc, #624]	; (8000bc8 <defaultJob+0x2d4>)
 8000956:	f001 fbfb 	bl	8002150 <HAL_UART_MspInit>
          // osSemaphoreRelease(LcdTaskSemCntHandle);
          gu8TaskLcd = TASK_LCD_STEP_INITIAL;
 800095a:	4b9c      	ldr	r3, [pc, #624]	; (8000bcc <defaultJob+0x2d8>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_EVENT_FALG
          LcdTaskSemCntHandle = osSemaphoreNew(1, 1, &LcdTaskSemCnt_attributes);
 8000960:	4a9b      	ldr	r2, [pc, #620]	; (8000bd0 <defaultJob+0x2dc>)
 8000962:	2101      	movs	r1, #1
 8000964:	2001      	movs	r0, #1
 8000966:	f004 fd63 	bl	8005430 <osSemaphoreNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a99      	ldr	r2, [pc, #612]	; (8000bd4 <defaultJob+0x2e0>)
 800096e:	6013      	str	r3, [r2, #0]
#endif

          gu16TimerJob = 0;
 8000970:	4b99      	ldr	r3, [pc, #612]	; (8000bd8 <defaultJob+0x2e4>)
 8000972:	2200      	movs	r2, #0
 8000974:	801a      	strh	r2, [r3, #0]
          ++gu8JobStep;
 8000976:	4b93      	ldr	r3, [pc, #588]	; (8000bc4 <defaultJob+0x2d0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b91      	ldr	r3, [pc, #580]	; (8000bc4 <defaultJob+0x2d0>)
 8000980:	701a      	strb	r2, [r3, #0]
          break;
 8000982:	e396      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_INIT1:
        {
          if(gu8TaskLcd != TASK_LCD_STEP_WAIT){
 8000984:	4b91      	ldr	r3, [pc, #580]	; (8000bcc <defaultJob+0x2d8>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	f040 8359 	bne.w	8001040 <defaultJob+0x74c>
            break;
          }

          FLAG_EVT_INPUT = 0;
 800098e:	4a93      	ldr	r2, [pc, #588]	; (8000bdc <defaultJob+0x2e8>)
 8000990:	7813      	ldrb	r3, [r2, #0]
 8000992:	f36f 03c3 	bfc	r3, #3, #1
 8000996:	7013      	strb	r3, [r2, #0]
          gu16TimerJob = 0;
 8000998:	4b8f      	ldr	r3, [pc, #572]	; (8000bd8 <defaultJob+0x2e4>)
 800099a:	2200      	movs	r2, #0
 800099c:	801a      	strh	r2, [r3, #0]
          ++gu8JobStep;
 800099e:	4b89      	ldr	r3, [pc, #548]	; (8000bc4 <defaultJob+0x2d0>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b87      	ldr	r3, [pc, #540]	; (8000bc4 <defaultJob+0x2d0>)
 80009a8:	701a      	strb	r2, [r3, #0]
          break;
 80009aa:	e382      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_WAIT:
        {
          if(!DEF_INPUT_SW1 & !DEF_INPUT_SW2){
 80009ac:	4b8c      	ldr	r3, [pc, #560]	; (8000be0 <defaultJob+0x2ec>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f003 0303 	and.w	r3, r3, #3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d113      	bne.n	80009e2 <defaultJob+0xee>
            if(gu16TimerJob > 70){
 80009ba:	4b87      	ldr	r3, [pc, #540]	; (8000bd8 <defaultJob+0x2e4>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	2b46      	cmp	r3, #70	; 0x46
 80009c0:	f240 8340 	bls.w	8001044 <defaultJob+0x750>
              FLAG_EVT_INPUT = 0;
 80009c4:	4a85      	ldr	r2, [pc, #532]	; (8000bdc <defaultJob+0x2e8>)
 80009c6:	7813      	ldrb	r3, [r2, #0]
 80009c8:	f36f 03c3 	bfc	r3, #3, #1
 80009cc:	7013      	strb	r3, [r2, #0]
              ++gu8JobStep;
 80009ce:	4b7d      	ldr	r3, [pc, #500]	; (8000bc4 <defaultJob+0x2d0>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b7b      	ldr	r3, [pc, #492]	; (8000bc4 <defaultJob+0x2d0>)
 80009d8:	701a      	strb	r2, [r3, #0]
              gu16TimerJob = 0;
 80009da:	4b7f      	ldr	r3, [pc, #508]	; (8000bd8 <defaultJob+0x2e4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	801a      	strh	r2, [r3, #0]
          }
          else{
              gu16TimerJob = 0;
          }
          
          break;
 80009e0:	e330      	b.n	8001044 <defaultJob+0x750>
          else if(!DEF_INPUT_SW2){
 80009e2:	4b7f      	ldr	r3, [pc, #508]	; (8000be0 <defaultJob+0x2ec>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d119      	bne.n	8000a24 <defaultJob+0x130>
            if(gu16TimerJob > 1000){
 80009f0:	4b79      	ldr	r3, [pc, #484]	; (8000bd8 <defaultJob+0x2e4>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f8:	f240 8324 	bls.w	8001044 <defaultJob+0x750>
              FLAG_MANUAL_STEP ^= 1;
 80009fc:	4b77      	ldr	r3, [pc, #476]	; (8000bdc <defaultJob+0x2e8>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f083 0301 	eor.w	r3, r3, #1
 8000a0a:	b2d9      	uxtb	r1, r3
 8000a0c:	4a73      	ldr	r2, [pc, #460]	; (8000bdc <defaultJob+0x2e8>)
 8000a0e:	7813      	ldrb	r3, [r2, #0]
 8000a10:	f361 1304 	bfi	r3, r1, #4, #1
 8000a14:	7013      	strb	r3, [r2, #0]
              gu8JobStep = JOB_STATE_INIT;
 8000a16:	4b6b      	ldr	r3, [pc, #428]	; (8000bc4 <defaultJob+0x2d0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
              gu16TimerJob = 0; 
 8000a1c:	4b6e      	ldr	r3, [pc, #440]	; (8000bd8 <defaultJob+0x2e4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	801a      	strh	r2, [r3, #0]
          break;
 8000a22:	e30f      	b.n	8001044 <defaultJob+0x750>
              gu16TimerJob = 0;
 8000a24:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <defaultJob+0x2e4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	801a      	strh	r2, [r3, #0]
          break;
 8000a2a:	e30b      	b.n	8001044 <defaultJob+0x750>
        }
        case JOB_STATE_READY:
        {
          if(gu8TaskLcd != TASK_LCD_STEP_WAIT){
 8000a2c:	4b67      	ldr	r3, [pc, #412]	; (8000bcc <defaultJob+0x2d8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f040 8309 	bne.w	8001048 <defaultJob+0x754>
            break;
          }
          osStateValue = osSemaphoreAcquire(LcdTaskSemCntHandle, osWaitForever);
 8000a36:	4b67      	ldr	r3, [pc, #412]	; (8000bd4 <defaultJob+0x2e0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fd92 	bl	8005568 <osSemaphoreAcquire>
 8000a44:	60f8      	str	r0, [r7, #12]
          if(osStateValue != osOK){
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f040 82ff 	bne.w	800104c <defaultJob+0x758>
            break;
          }
          memset(gu8LcdDisplayData, 0x00,1024);
 8000a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a52:	2100      	movs	r1, #0
 8000a54:	4863      	ldr	r0, [pc, #396]	; (8000be4 <defaultJob+0x2f0>)
 8000a56:	f008 f8e3 	bl	8008c20 <memset>
          gu8TaskLcd = TASK_LCD_STEP_LOAD;
 8000a5a:	4b5c      	ldr	r3, [pc, #368]	; (8000bcc <defaultJob+0x2d8>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	701a      	strb	r2, [r3, #0]
          
          FLAG_EVT_INPUT = 0;
 8000a60:	4a5e      	ldr	r2, [pc, #376]	; (8000bdc <defaultJob+0x2e8>)
 8000a62:	7813      	ldrb	r3, [r2, #0]
 8000a64:	f36f 03c3 	bfc	r3, #3, #1
 8000a68:	7013      	strb	r3, [r2, #0]
          ++gu8JobStep;
 8000a6a:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <defaultJob+0x2d0>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b54      	ldr	r3, [pc, #336]	; (8000bc4 <defaultJob+0x2d0>)
 8000a74:	701a      	strb	r2, [r3, #0]
          gu16TimerJob = 0;
 8000a76:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <defaultJob+0x2e4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	801a      	strh	r2, [r3, #0]
          break;
 8000a7c:	e319      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_READY1:
        {
          if(!DEF_INPUT_SW1 & !DEF_INPUT_SW2){
 8000a7e:	4b58      	ldr	r3, [pc, #352]	; (8000be0 <defaultJob+0x2ec>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d114      	bne.n	8000ab6 <defaultJob+0x1c2>
            set_fix_pba();
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a92:	4855      	ldr	r0, [pc, #340]	; (8000be8 <defaultJob+0x2f4>)
 8000a94:	f002 feaa 	bl	80037ec <HAL_GPIO_WritePin>
            if(gu16TimerJob > 100){
 8000a98:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <defaultJob+0x2e4>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	2b64      	cmp	r3, #100	; 0x64
 8000a9e:	f240 82d7 	bls.w	8001050 <defaultJob+0x75c>
              ++gu8JobStep;
 8000aa2:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <defaultJob+0x2d0>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <defaultJob+0x2d0>)
 8000aac:	701a      	strb	r2, [r3, #0]
              gu16TimerJob = 0;
 8000aae:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <defaultJob+0x2e4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	801a      	strh	r2, [r3, #0]
#endif
            gu8JobStep = JOB_STATE_EM_STOP;//JOB_STATE_INIT;
            gu16TimerJob = 0;
          }
          
          break;
 8000ab4:	e2cc      	b.n	8001050 <defaultJob+0x75c>
            clr_fix_pba();
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	484a      	ldr	r0, [pc, #296]	; (8000be8 <defaultJob+0x2f4>)
 8000abe:	f002 fe95 	bl	80037ec <HAL_GPIO_WritePin>
            osSemaphoreDelete(LcdTaskSemCntHandle);
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <defaultJob+0x2e0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 fe0c 	bl	80056e4 <osSemaphoreDelete>
            gu8JobStep = JOB_STATE_EM_STOP;//JOB_STATE_INIT;
 8000acc:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <defaultJob+0x2d0>)
 8000ace:	220d      	movs	r2, #13
 8000ad0:	701a      	strb	r2, [r3, #0]
            gu16TimerJob = 0;
 8000ad2:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <defaultJob+0x2e4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	801a      	strh	r2, [r3, #0]
          break;
 8000ad8:	e2ba      	b.n	8001050 <defaultJob+0x75c>
        }
        case JOB_STATE_READY2:
        {
          
          if(!WriteDataOnLcd(POSITION_STATE_X,2,POSITION_STATE_Y,48,(const unsigned char*)&state_data[0][0][0])){
 8000ada:	4b44      	ldr	r3, [pc, #272]	; (8000bec <defaultJob+0x2f8>)
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2330      	movs	r3, #48	; 0x30
 8000ae0:	2205      	movs	r2, #5
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	2006      	movs	r0, #6
 8000ae6:	f000 fb8f 	bl	8001208 <WriteDataOnLcd>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 82b1 	beq.w	8001054 <defaultJob+0x760>
            break;
          } 
          if(!WriteDataOnLcd(1,1,POSITION_STEP_Y,119,(const unsigned char*)&step_data_line[0])){
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <defaultJob+0x2fc>)
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2377      	movs	r3, #119	; 0x77
 8000af8:	2208      	movs	r2, #8
 8000afa:	2101      	movs	r1, #1
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 fb83 	bl	8001208 <WriteDataOnLcd>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 82a7 	beq.w	8001058 <defaultJob+0x764>
            break;
          }
          gu8JobStep = JOB_STATE_RUN;
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <defaultJob+0x2d0>)
 8000b0c:	2206      	movs	r2, #6
 8000b0e:	701a      	strb	r2, [r3, #0]
          gu16TimerJob = 0;
 8000b10:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <defaultJob+0x2e4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	801a      	strh	r2, [r3, #0]
          break;
 8000b16:	e2cc      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_RUN:
        {
          if(!DEF_INPUT_SW1){
 8000b18:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <defaultJob+0x2ec>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 829a 	beq.w	800105c <defaultJob+0x768>
            break;
          }
          if(!DEF_INPUT_SW2){
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <defaultJob+0x2ec>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 8294 	beq.w	8001060 <defaultJob+0x76c>
          // if(osStateValue == osOK){
          //   memset(gu8LcdDisplayData, 0x00,1024);
          //   gu8TaskLcd = TASK_LCD_STEP_LOAD;
          // }
          // osDelay(700);
          if(!WriteDataOnLcd(POSITION_STATE_X,2,POSITION_STATE_Y,48,(const unsigned char*)&state_data[0][0][0])){
 8000b38:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <defaultJob+0x2f8>)
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2330      	movs	r3, #48	; 0x30
 8000b3e:	2205      	movs	r2, #5
 8000b40:	2102      	movs	r1, #2
 8000b42:	2006      	movs	r0, #6
 8000b44:	f000 fb60 	bl	8001208 <WriteDataOnLcd>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 828a 	beq.w	8001064 <defaultJob+0x770>
            break;
          }
          if(!WriteDataOnLcd(1,1,POSITION_STEP_Y,119,(const unsigned char*)&step_data_line[0])){
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <defaultJob+0x2fc>)
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2377      	movs	r3, #119	; 0x77
 8000b56:	2208      	movs	r2, #8
 8000b58:	2101      	movs	r1, #1
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f000 fb54 	bl	8001208 <WriteDataOnLcd>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 8280 	beq.w	8001068 <defaultJob+0x774>
          
          // GetCurentData();
          // osThreadFlagsWait( EVENT_FLAG_UART1_485 , osFlagsWaitAny, DEFAULT_OS_WAIT_TIME);// osWaitForever
          // CheckRxData();
          // set_fix_pba();
          FLAG_EVT_INPUT = 0;   // 모든 키(스위치 값) 초기화
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <defaultJob+0x2e8>)
 8000b6a:	7813      	ldrb	r3, [r2, #0]
 8000b6c:	f36f 03c3 	bfc	r3, #3, #1
 8000b70:	7013      	strb	r3, [r2, #0]
          gu8JobCheckNum = 0;   // 첫번째 작업 번호
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <defaultJob+0x300>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
          //FLAG_MANUAL_STEP = 1; // test

          gu8JobStep = JOB_STATE_RUN1;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <defaultJob+0x2d0>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	701a      	strb	r2, [r3, #0]
          gu16TimerJob = 0;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <defaultJob+0x2e4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	801a      	strh	r2, [r3, #0]
          break;
 8000b84:	e295      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_RUN1:
        {
          if(FLAG_MANUAL_STEP){
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <defaultJob+0x2e8>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d031      	beq.n	8000bf8 <defaultJob+0x304>
            if(FLAG_EVT_INPUT){
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <defaultJob+0x2e8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d02d      	beq.n	8000bfe <defaultJob+0x30a>
              FLAG_EVT_INPUT = 0;
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <defaultJob+0x2e8>)
 8000ba4:	7813      	ldrb	r3, [r2, #0]
 8000ba6:	f36f 03c3 	bfc	r3, #3, #1
 8000baa:	7013      	strb	r3, [r2, #0]
              if(!DEF_INPUT_SW2){
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <defaultJob+0x2ec>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d121      	bne.n	8000bfe <defaultJob+0x30a>
                gu8JobStep = JOB_STATE_CHECK;                
 8000bba:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <defaultJob+0x2d0>)
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	e01d      	b.n	8000bfe <defaultJob+0x30a>
 8000bc2:	bf00      	nop
 8000bc4:	20001dc0 	.word	0x20001dc0
 8000bc8:	20001ec8 	.word	0x20001ec8
 8000bcc:	20001958 	.word	0x20001958
 8000bd0:	08009ba0 	.word	0x08009ba0
 8000bd4:	20001db8 	.word	0x20001db8
 8000bd8:	20001d66 	.word	0x20001d66
 8000bdc:	20002054 	.word	0x20002054
 8000be0:	200020e4 	.word	0x200020e4
 8000be4:	20001964 	.word	0x20001964
 8000be8:	40011800 	.word	0x40011800
 8000bec:	080090c8 	.word	0x080090c8
 8000bf0:	08009250 	.word	0x08009250
 8000bf4:	20001dbc 	.word	0x20001dbc
              }
            }
          }
          else{
            gu8JobStep = JOB_STATE_CHECK;
 8000bf8:	4bad      	ldr	r3, [pc, #692]	; (8000eb0 <defaultJob+0x5bc>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	701a      	strb	r2, [r3, #0]
            
          }
          if(gu8JobCheckNum == 14){
 8000bfe:	4bad      	ldr	r3, [pc, #692]	; (8000eb4 <defaultJob+0x5c0>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b0e      	cmp	r3, #14
 8000c04:	d102      	bne.n	8000c0c <defaultJob+0x318>
            gu8JobStep = JOB_STATE_CHECK;
 8000c06:	4baa      	ldr	r3, [pc, #680]	; (8000eb0 <defaultJob+0x5bc>)
 8000c08:	2208      	movs	r2, #8
 8000c0a:	701a      	strb	r2, [r3, #0]
          }
          if(gu8JobStep == JOB_STATE_CHECK){
 8000c0c:	4ba8      	ldr	r3, [pc, #672]	; (8000eb0 <defaultJob+0x5bc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	f040 822b 	bne.w	800106c <defaultJob+0x778>
            if(!gu8JobCheckNum){
 8000c16:	4ba7      	ldr	r3, [pc, #668]	; (8000eb4 <defaultJob+0x5c0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d117      	bne.n	8000c4e <defaultJob+0x35a>
              if(!WriteDataOnLcd(POSITION_STEP_X2,1,POSITION_STEP_Y,119,(const unsigned char*)&step_data[0][0])){
 8000c1e:	4ba6      	ldr	r3, [pc, #664]	; (8000eb8 <defaultJob+0x5c4>)
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2377      	movs	r3, #119	; 0x77
 8000c24:	2208      	movs	r2, #8
 8000c26:	2101      	movs	r1, #1
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f000 faed 	bl	8001208 <WriteDataOnLcd>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 821d 	beq.w	8001070 <defaultJob+0x77c>
                break;
              }
              if(!WriteDataOnLcd(POSITION_STEP_X3,1,POSITION_STEP_Y,119,(const unsigned char*)&step_data[1][0])){
 8000c36:	4ba1      	ldr	r3, [pc, #644]	; (8000ebc <defaultJob+0x5c8>)
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2377      	movs	r3, #119	; 0x77
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 fae1 	bl	8001208 <WriteDataOnLcd>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14f      	bne.n	8000cec <defaultJob+0x3f8>
                break;
 8000c4c:	e231      	b.n	80010b2 <defaultJob+0x7be>
              }
            }
            else if(gu8JobCheckNum >= MAX_STEP_DATA_CNT){
 8000c4e:	4b99      	ldr	r3, [pc, #612]	; (8000eb4 <defaultJob+0x5c0>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b10      	cmp	r3, #16
 8000c54:	d90b      	bls.n	8000c6e <defaultJob+0x37a>
              //gu8JobStep = JOB_STATE_INIT;
#ifdef ENABLE_EVENT_FALG
              osSemaphoreDelete(LcdTaskSemCntHandle);
 8000c56:	4b9a      	ldr	r3, [pc, #616]	; (8000ec0 <defaultJob+0x5cc>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 fd42 	bl	80056e4 <osSemaphoreDelete>
#endif
              gu8JobStep = JOB_STATE_EM_STOP;   // JOB_STATE_INIT;
 8000c60:	4b93      	ldr	r3, [pc, #588]	; (8000eb0 <defaultJob+0x5bc>)
 8000c62:	220d      	movs	r2, #13
 8000c64:	701a      	strb	r2, [r3, #0]
              gu16TimerJob = 0;
 8000c66:	4b97      	ldr	r3, [pc, #604]	; (8000ec4 <defaultJob+0x5d0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	801a      	strh	r2, [r3, #0]
              break;
 8000c6c:	e221      	b.n	80010b2 <defaultJob+0x7be>
            }
            else{
              if(!WriteDataOnLcd(POSITION_STEP_X1,1,POSITION_STEP_Y,119,(const unsigned char*)&step_data[gu8JobCheckNum-1][0])){
 8000c6e:	4b91      	ldr	r3, [pc, #580]	; (8000eb4 <defaultJob+0x5c0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	4613      	mov	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	011a      	lsls	r2, r3, #4
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a8e      	ldr	r2, [pc, #568]	; (8000eb8 <defaultJob+0x5c4>)
 8000c80:	4413      	add	r3, r2
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2377      	movs	r3, #119	; 0x77
 8000c86:	2208      	movs	r2, #8
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	f000 fabc 	bl	8001208 <WriteDataOnLcd>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 81ee 	beq.w	8001074 <defaultJob+0x780>
                break;
              }
              if(!WriteDataOnLcd(POSITION_STEP_X2,1,POSITION_STEP_Y,119,(const unsigned char*)&step_data[gu8JobCheckNum][0])){
 8000c98:	4b86      	ldr	r3, [pc, #536]	; (8000eb4 <defaultJob+0x5c0>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	1a9b      	subs	r3, r3, r2
 8000ca4:	011a      	lsls	r2, r3, #4
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a83      	ldr	r2, [pc, #524]	; (8000eb8 <defaultJob+0x5c4>)
 8000caa:	4413      	add	r3, r2
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2377      	movs	r3, #119	; 0x77
 8000cb0:	2208      	movs	r2, #8
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f000 faa7 	bl	8001208 <WriteDataOnLcd>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 81db 	beq.w	8001078 <defaultJob+0x784>
                break;
              }     
              if(!WriteDataOnLcd(POSITION_STEP_X3,1,POSITION_STEP_Y,119,(const unsigned char*)&step_data[gu8JobCheckNum+1][0])){
 8000cc2:	4b7c      	ldr	r3, [pc, #496]	; (8000eb4 <defaultJob+0x5c0>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	4613      	mov	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	011a      	lsls	r2, r3, #4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a79      	ldr	r2, [pc, #484]	; (8000eb8 <defaultJob+0x5c4>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2377      	movs	r3, #119	; 0x77
 8000cda:	2208      	movs	r2, #8
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 fa92 	bl	8001208 <WriteDataOnLcd>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 81c8 	beq.w	800107c <defaultJob+0x788>
                break;
              }

            }
            gu8JobCheckStep = 1;   // 반드시 다음 작업의 첫번째 스탭 설정
 8000cec:	4b76      	ldr	r3, [pc, #472]	; (8000ec8 <defaultJob+0x5d4>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
            gu16TimerJob = 0;
 8000cf2:	4b74      	ldr	r3, [pc, #464]	; (8000ec4 <defaultJob+0x5d0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	801a      	strh	r2, [r3, #0]
          }
          break;
 8000cf8:	e1b8      	b.n	800106c <defaultJob+0x778>
        }
        case JOB_STATE_CHECK:
        {
          switch(gu8JobCheckNum)
 8000cfa:	4b6e      	ldr	r3, [pc, #440]	; (8000eb4 <defaultJob+0x5c0>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b08      	cmp	r3, #8
 8000d00:	d852      	bhi.n	8000da8 <defaultJob+0x4b4>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <defaultJob+0x414>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d2d 	.word	0x08000d2d
 8000d0c:	08000d33 	.word	0x08000d33
 8000d10:	08000d43 	.word	0x08000d43
 8000d14:	08000d53 	.word	0x08000d53
 8000d18:	08000d59 	.word	0x08000d59
 8000d1c:	08000d69 	.word	0x08000d69
 8000d20:	08000d79 	.word	0x08000d79
 8000d24:	08000d89 	.word	0x08000d89
 8000d28:	08000d99 	.word	0x08000d99
          {
            case 0:
            {
              CheckFistSetting();         // 초기 근접센서(데드볼트) 상태 검사
 8000d2c:	f7ff fa86 	bl	800023c <CheckFistSetting>
              //if(gu8JobCheckStep){          //TestCnt();
              //   gu8JobCheckStep = 0;
              //}
              break;
 8000d30:	e04b      	b.n	8000dca <defaultJob+0x4d6>
            }

            case 1:
            {
               //CheckFactoryReset();            // 공장 초기화
               if(gu8JobCheckStep){          //TestCnt();
 8000d32:	4b65      	ldr	r3, [pc, #404]	; (8000ec8 <defaultJob+0x5d4>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d03a      	beq.n	8000db0 <defaultJob+0x4bc>
                 gu8JobCheckStep = 0;
 8000d3a:	4b63      	ldr	r3, [pc, #396]	; (8000ec8 <defaultJob+0x5d4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
               }
              break;
 8000d40:	e036      	b.n	8000db0 <defaultJob+0x4bc>
            }

            case 2:        
            {  
               //CheckCard();                     // CARD 인식 검사
          	   if(gu8JobCheckStep){           //TestCnt();
 8000d42:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <defaultJob+0x5d4>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d034      	beq.n	8000db4 <defaultJob+0x4c0>
                  gu8JobCheckStep = 0;
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <defaultJob+0x5d4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
               }
              break;
 8000d50:	e030      	b.n	8000db4 <defaultJob+0x4c0>
            }

            case 3:
            {              
               CheckPasswordOpen();             // Password Open
 8000d52:	f7ff fb4d 	bl	80003f0 <CheckPasswordOpen>
           	   //if(gu8JobCheckStep){           // TestCnt();
               //   gu8JobCheckStep = 0;
               //}
              break;
 8000d56:	e038      	b.n	8000dca <defaultJob+0x4d6>
            }

            case 4:
            {
               //CheckTrigger();                  // 트리거 인식 검사
           	   if(gu8JobCheckStep){           // TestCnt();
 8000d58:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <defaultJob+0x5d4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d02b      	beq.n	8000db8 <defaultJob+0x4c4>
                  gu8JobCheckStep = 0;
 8000d60:	4b59      	ldr	r3, [pc, #356]	; (8000ec8 <defaultJob+0x5d4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
               }
              break;
 8000d66:	e027      	b.n	8000db8 <defaultJob+0x4c4>
            }

            case 5:
            {
               //Checkopenswitch1();             // open test
           	   if(gu8JobCheckStep){          // TestCnt();
 8000d68:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <defaultJob+0x5d4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d025      	beq.n	8000dbc <defaultJob+0x4c8>
                  gu8JobCheckStep = 0;
 8000d70:	4b55      	ldr	r3, [pc, #340]	; (8000ec8 <defaultJob+0x5d4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
               }
              break;
 8000d76:	e021      	b.n	8000dbc <defaultJob+0x4c8>
            }

            case 6:
            {
               //Checkopenswitch2();              // Close test
           	   if(gu8JobCheckStep){           // TestCnt();
 8000d78:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <defaultJob+0x5d4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d01f      	beq.n	8000dc0 <defaultJob+0x4cc>
                  gu8JobCheckStep = 0;
 8000d80:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <defaultJob+0x5d4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
                }
              break;
 8000d86:	e01b      	b.n	8000dc0 <defaultJob+0x4cc>
            }

            case 7:
            {
               //CheckSleep();                    // 대기 전류 측정
           	   if(gu8JobCheckStep){           // TestCnt();
 8000d88:	4b4f      	ldr	r3, [pc, #316]	; (8000ec8 <defaultJob+0x5d4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d019      	beq.n	8000dc4 <defaultJob+0x4d0>
                  gu8JobCheckStep = 0;
 8000d90:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <defaultJob+0x5d4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
                }
              break;
 8000d96:	e015      	b.n	8000dc4 <defaultJob+0x4d0>
            }

            case 8:
            {
               //Check9V();                  // 9V 인식 검사
               if(gu8JobCheckStep){         //TestCnt();
 8000d98:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <defaultJob+0x5d4>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d013      	beq.n	8000dc8 <defaultJob+0x4d4>
                  gu8JobCheckStep = 0;
 8000da0:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <defaultJob+0x5d4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
               }
           	   break;
 8000da6:	e00f      	b.n	8000dc8 <defaultJob+0x4d4>

//----------------------------------------------------------------------*/

            default:
            {
              gu8JobCheckStep = 0;
 8000da8:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <defaultJob+0x5d4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
              break;
 8000dae:	e00c      	b.n	8000dca <defaultJob+0x4d6>
              break;
 8000db0:	bf00      	nop
 8000db2:	e00a      	b.n	8000dca <defaultJob+0x4d6>
              break;
 8000db4:	bf00      	nop
 8000db6:	e008      	b.n	8000dca <defaultJob+0x4d6>
              break;
 8000db8:	bf00      	nop
 8000dba:	e006      	b.n	8000dca <defaultJob+0x4d6>
              break;
 8000dbc:	bf00      	nop
 8000dbe:	e004      	b.n	8000dca <defaultJob+0x4d6>
              break;
 8000dc0:	bf00      	nop
 8000dc2:	e002      	b.n	8000dca <defaultJob+0x4d6>
              break;
 8000dc4:	bf00      	nop
 8000dc6:	e000      	b.n	8000dca <defaultJob+0x4d6>
           	   break;
 8000dc8:	bf00      	nop
            }
          }
          
          if(gu8JobCheckStep == 0xff){                   //에러 처리
 8000dca:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <defaultJob+0x5d4>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2bff      	cmp	r3, #255	; 0xff
 8000dd0:	d10c      	bne.n	8000dec <defaultJob+0x4f8>
             gu16JobTmp1 = gu8JobCheckNum + 1;           //에러난 작업 번호
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <defaultJob+0x5c0>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <defaultJob+0x5d8>)
 8000dde:	801a      	strh	r2, [r3, #0]
             gu8JobStep = JOB_STATE_ERROR;
 8000de0:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <defaultJob+0x5bc>)
 8000de2:	220a      	movs	r2, #10
 8000de4:	701a      	strb	r2, [r3, #0]
             gu16TimerJob = 0;
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <defaultJob+0x5d0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	801a      	strh	r2, [r3, #0]
          }
          if(gu8JobCheckStep == 0xfe){                  //에러시 작업 표시 없이 종료
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <defaultJob+0x5d4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2bfe      	cmp	r3, #254	; 0xfe
 8000df2:	d105      	bne.n	8000e00 <defaultJob+0x50c>
            
             gu8JobStep = JOB_STATE_ERROR;
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <defaultJob+0x5bc>)
 8000df6:	220a      	movs	r2, #10
 8000df8:	701a      	strb	r2, [r3, #0]
             gu16TimerJob = 0;
 8000dfa:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <defaultJob+0x5d0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	801a      	strh	r2, [r3, #0]
          }
          if(gu8JobCheckStep){                          //작업 종료 여부 감시, 값이 0이어도 작업 종료
 8000e00:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <defaultJob+0x5d4>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f040 813b 	bne.w	8001080 <defaultJob+0x78c>
            break;
          }
          // gu8JobCheckStep = 0;
          if(++gu8JobCheckNum  >= MAX_STEP_DATA_CNT){   // 다음 작업 번호로 변경 후 모든 작업이 종료되었는지 확인
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <defaultJob+0x5c0>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <defaultJob+0x5c0>)
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <defaultJob+0x5c0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b10      	cmp	r3, #16
 8000e1c:	d903      	bls.n	8000e26 <defaultJob+0x532>
            gu8JobStep = JOB_STATE_OK;
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <defaultJob+0x5bc>)
 8000e20:	2209      	movs	r2, #9
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e002      	b.n	8000e2c <defaultJob+0x538>
          }
          else{
            gu8JobStep = JOB_STATE_RUN1;                // 다음 작업이 있을 경우 이리로 감
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <defaultJob+0x5bc>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	701a      	strb	r2, [r3, #0]
          }
            gu16TimerJob = 0;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <defaultJob+0x5d0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	801a      	strh	r2, [r3, #0]
          
          break;
 8000e32:	e13e      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_OK:
        {
          ResetJigIoPin();
 8000e34:	f001 fbc8 	bl	80025c8 <ResetJigIoPin>
          FLAG_EVT_INPUT = 0;
 8000e38:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <defaultJob+0x5dc>)
 8000e3a:	7813      	ldrb	r3, [r2, #0]
 8000e3c:	f36f 03c3 	bfc	r3, #3, #1
 8000e40:	7013      	strb	r3, [r2, #0]
          if(!WriteDataOnLcd(POSITION_STATE_X,2,POSITION_STATE_Y,48,(const unsigned char*)&state_data[1][0][0])){
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <defaultJob+0x5e0>)
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2330      	movs	r3, #48	; 0x30
 8000e48:	2205      	movs	r2, #5
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	2006      	movs	r0, #6
 8000e4e:	f000 f9db 	bl	8001208 <WriteDataOnLcd>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 8115 	beq.w	8001084 <defaultJob+0x790>
            break;
          }
          if(!WriteDataOnLcd(POSITION_STEP_X1,1,POSITION_STEP_Y,119,(const unsigned char*)&step_empty[0])){
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <defaultJob+0x5e4>)
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2377      	movs	r3, #119	; 0x77
 8000e60:	2208      	movs	r2, #8
 8000e62:	2101      	movs	r1, #1
 8000e64:	2004      	movs	r0, #4
 8000e66:	f000 f9cf 	bl	8001208 <WriteDataOnLcd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 810b 	beq.w	8001088 <defaultJob+0x794>
            break;
          }
          if(!WriteDataOnLcd(POSITION_STEP_X2,1,POSITION_STEP_Y,119,(const unsigned char*)&step_data[17][0])){
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <defaultJob+0x5e8>)
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2377      	movs	r3, #119	; 0x77
 8000e78:	2208      	movs	r2, #8
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f000 f9c3 	bl	8001208 <WriteDataOnLcd>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 8101 	beq.w	800108c <defaultJob+0x798>
            break;
          }
          if(!WriteDataOnLcd(POSITION_STEP_X3,1,POSITION_STEP_Y,119,(const unsigned char*)&step_empty[0])){
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <defaultJob+0x5e4>)
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2377      	movs	r3, #119	; 0x77
 8000e90:	2208      	movs	r2, #8
 8000e92:	2101      	movs	r1, #1
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 f9b7 	bl	8001208 <WriteDataOnLcd>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80f7 	beq.w	8001090 <defaultJob+0x79c>
            break;
          }

          gu8JobStep = JOB_STATE_FINISH;
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <defaultJob+0x5bc>)
 8000ea4:	220b      	movs	r2, #11
 8000ea6:	701a      	strb	r2, [r3, #0]
          gu16TimerJob = 0;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <defaultJob+0x5d0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	801a      	strh	r2, [r3, #0]
          
          break;
 8000eae:	e100      	b.n	80010b2 <defaultJob+0x7be>
 8000eb0:	20001dc0 	.word	0x20001dc0
 8000eb4:	20001dbc 	.word	0x20001dbc
 8000eb8:	080092c8 	.word	0x080092c8
 8000ebc:	0800933f 	.word	0x0800933f
 8000ec0:	20001db8 	.word	0x20001db8
 8000ec4:	20001d66 	.word	0x20001d66
 8000ec8:	20001dbf 	.word	0x20001dbf
 8000ecc:	2000195e 	.word	0x2000195e
 8000ed0:	20002054 	.word	0x20002054
 8000ed4:	08009128 	.word	0x08009128
 8000ed8:	08009b28 	.word	0x08009b28
 8000edc:	08009aaf 	.word	0x08009aaf
        }
        case JOB_STATE_ERROR:
        {
          ResetJigIoPin();
 8000ee0:	f001 fb72 	bl	80025c8 <ResetJigIoPin>
          clr_sleep_pin();
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eea:	4872      	ldr	r0, [pc, #456]	; (80010b4 <defaultJob+0x7c0>)
 8000eec:	f002 fc7e 	bl	80037ec <HAL_GPIO_WritePin>
          FLAG_EVT_INPUT = 0;
 8000ef0:	4a71      	ldr	r2, [pc, #452]	; (80010b8 <defaultJob+0x7c4>)
 8000ef2:	7813      	ldrb	r3, [r2, #0]
 8000ef4:	f36f 03c3 	bfc	r3, #3, #1
 8000ef8:	7013      	strb	r3, [r2, #0]
          if(!WriteDataOnLcd(POSITION_STATE_X,2,POSITION_STATE_Y,48,(const unsigned char*)&state_data[2][0][0])){
 8000efa:	4b70      	ldr	r3, [pc, #448]	; (80010bc <defaultJob+0x7c8>)
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2330      	movs	r3, #48	; 0x30
 8000f00:	2205      	movs	r2, #5
 8000f02:	2102      	movs	r1, #2
 8000f04:	2006      	movs	r0, #6
 8000f06:	f000 f97f 	bl	8001208 <WriteDataOnLcd>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80c1 	beq.w	8001094 <defaultJob+0x7a0>
            break;
          }
          
          gu16JobTmpStep1 = gu16JobTmp1 / 10;
 8000f12:	4b6b      	ldr	r3, [pc, #428]	; (80010c0 <defaultJob+0x7cc>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4a6b      	ldr	r2, [pc, #428]	; (80010c4 <defaultJob+0x7d0>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <defaultJob+0x7d4>)
 8000f22:	801a      	strh	r2, [r3, #0]
          if(gu16JobTmpStep1 > 9){
 8000f24:	4b68      	ldr	r3, [pc, #416]	; (80010c8 <defaultJob+0x7d4>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	2b09      	cmp	r3, #9
 8000f2a:	d902      	bls.n	8000f32 <defaultJob+0x63e>
            gu16JobTmpStep1 = 9;
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <defaultJob+0x7d4>)
 8000f2e:	2209      	movs	r2, #9
 8000f30:	801a      	strh	r2, [r3, #0]
          }
          if(!WriteDataOnLcd(POSITION_STATE_X,1,(POSITION_STATE_Y+35),8,(const unsigned char*)&constLcdNum[gu16JobTmpStep1][0])){
 8000f32:	4b65      	ldr	r3, [pc, #404]	; (80010c8 <defaultJob+0x7d4>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4a64      	ldr	r2, [pc, #400]	; (80010cc <defaultJob+0x7d8>)
 8000f3a:	4413      	add	r3, r2
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2308      	movs	r3, #8
 8000f40:	2228      	movs	r2, #40	; 0x28
 8000f42:	2101      	movs	r1, #1
 8000f44:	2006      	movs	r0, #6
 8000f46:	f000 f95f 	bl	8001208 <WriteDataOnLcd>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a3 	beq.w	8001098 <defaultJob+0x7a4>
            break;
          }
          gu16JobTmpStep1 = gu16JobTmp1 % 10;
 8000f52:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <defaultJob+0x7cc>)
 8000f54:	881a      	ldrh	r2, [r3, #0]
 8000f56:	4b5b      	ldr	r3, [pc, #364]	; (80010c4 <defaultJob+0x7d0>)
 8000f58:	fba3 1302 	umull	r1, r3, r3, r2
 8000f5c:	08d9      	lsrs	r1, r3, #3
 8000f5e:	460b      	mov	r3, r1
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <defaultJob+0x7d4>)
 8000f6c:	801a      	strh	r2, [r3, #0]
          if(!WriteDataOnLcd(POSITION_STATE_X,1,(POSITION_STATE_Y+35+8),8,(const unsigned char*)&constLcdNum[gu16JobTmpStep1][0])){
 8000f6e:	4b56      	ldr	r3, [pc, #344]	; (80010c8 <defaultJob+0x7d4>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4a55      	ldr	r2, [pc, #340]	; (80010cc <defaultJob+0x7d8>)
 8000f76:	4413      	add	r3, r2
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	2230      	movs	r2, #48	; 0x30
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2006      	movs	r0, #6
 8000f82:	f000 f941 	bl	8001208 <WriteDataOnLcd>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 8087 	beq.w	800109c <defaultJob+0x7a8>
            break;
          }
          gu8JobStep = JOB_STATE_WAIT; // Why? 
 8000f8e:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <defaultJob+0x7dc>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	701a      	strb	r2, [r3, #0]
          gu16TimerJob = 0;
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <defaultJob+0x7e0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	801a      	strh	r2, [r3, #0]
          
          break;
 8000f9a:	e08a      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_FINISH:
        {
          if(gu16TimerJob < 300){
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <defaultJob+0x7e0>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fa4:	d37c      	bcc.n	80010a0 <defaultJob+0x7ac>
            break;
          }
          ResetJigIoPin();
 8000fa6:	f001 fb0f 	bl	80025c8 <ResetJigIoPin>
          FLAG_EVT_INPUT = 0;
 8000faa:	4a43      	ldr	r2, [pc, #268]	; (80010b8 <defaultJob+0x7c4>)
 8000fac:	7813      	ldrb	r3, [r2, #0]
 8000fae:	f36f 03c3 	bfc	r3, #3, #1
 8000fb2:	7013      	strb	r3, [r2, #0]
          ++gu8JobStep;
 8000fb4:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <defaultJob+0x7dc>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b44      	ldr	r3, [pc, #272]	; (80010d0 <defaultJob+0x7dc>)
 8000fbe:	701a      	strb	r2, [r3, #0]
          gu16TimerJob = 0;
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <defaultJob+0x7e0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	801a      	strh	r2, [r3, #0]
          
          break;
 8000fc6:	e074      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_FINISH_WAIT:
        {
          if(FLAG_EVT_INPUT){
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <defaultJob+0x7c4>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d066      	beq.n	80010a4 <defaultJob+0x7b0>
            FLAG_EVT_INPUT = 0;
 8000fd6:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <defaultJob+0x7c4>)
 8000fd8:	7813      	ldrb	r3, [r2, #0]
 8000fda:	f36f 03c3 	bfc	r3, #3, #1
 8000fde:	7013      	strb	r3, [r2, #0]
            gu8JobStep = JOB_STATE_INIT;
 8000fe0:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <defaultJob+0x7dc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
            gu16TimerJob = 0;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <defaultJob+0x7e0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
          }
          break;
 8000fec:	e05a      	b.n	80010a4 <defaultJob+0x7b0>
        }
        case JOB_STATE_EM_STOP:
        {
          ResetJigIoPin();
 8000fee:	f001 faeb 	bl	80025c8 <ResetJigIoPin>

          ++gu8JobStep;
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <defaultJob+0x7dc>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <defaultJob+0x7dc>)
 8000ffc:	701a      	strb	r2, [r3, #0]
          gu16TimerJob = 0;
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <defaultJob+0x7e0>)
 8001000:	2200      	movs	r2, #0
 8001002:	801a      	strh	r2, [r3, #0]
          break;
 8001004:	e055      	b.n	80010b2 <defaultJob+0x7be>
        }
        case JOB_STATE_EM_STOP1:
        {
          if(!DEF_INPUT_SW1){
 8001006:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <defaultJob+0x7e4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d049      	beq.n	80010a8 <defaultJob+0x7b4>
            break;
          }
          if(!DEF_INPUT_SW2){
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <defaultJob+0x7e4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d044      	beq.n	80010ac <defaultJob+0x7b8>
            break;
          }
          if(gu8TaskLcd != TASK_LCD_STEP_WAIT){
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <defaultJob+0x7e8>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d142      	bne.n	80010b0 <defaultJob+0x7bc>
            break;
          }
          gu8JobStep = JOB_STATE_INIT;
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <defaultJob+0x7dc>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
          gu16TimerJob = 0;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <defaultJob+0x7e0>)
 8001032:	2200      	movs	r2, #0
 8001034:	801a      	strh	r2, [r3, #0]
          break;
 8001036:	e03c      	b.n	80010b2 <defaultJob+0x7be>
        }
        default:
        {
            gu8JobStep = 0;
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <defaultJob+0x7dc>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
            break;
 800103e:	e038      	b.n	80010b2 <defaultJob+0x7be>
            break;
 8001040:	bf00      	nop
 8001042:	e45e      	b.n	8000902 <defaultJob+0xe>
          break;
 8001044:	bf00      	nop
 8001046:	e45c      	b.n	8000902 <defaultJob+0xe>
            break;
 8001048:	bf00      	nop
 800104a:	e45a      	b.n	8000902 <defaultJob+0xe>
            break;
 800104c:	bf00      	nop
 800104e:	e458      	b.n	8000902 <defaultJob+0xe>
          break;
 8001050:	bf00      	nop
 8001052:	e456      	b.n	8000902 <defaultJob+0xe>
            break;
 8001054:	bf00      	nop
 8001056:	e454      	b.n	8000902 <defaultJob+0xe>
            break;
 8001058:	bf00      	nop
 800105a:	e452      	b.n	8000902 <defaultJob+0xe>
            break;
 800105c:	bf00      	nop
 800105e:	e450      	b.n	8000902 <defaultJob+0xe>
            break;
 8001060:	bf00      	nop
 8001062:	e44e      	b.n	8000902 <defaultJob+0xe>
            break;
 8001064:	bf00      	nop
 8001066:	e44c      	b.n	8000902 <defaultJob+0xe>
            break;
 8001068:	bf00      	nop
 800106a:	e44a      	b.n	8000902 <defaultJob+0xe>
          break;
 800106c:	bf00      	nop
 800106e:	e448      	b.n	8000902 <defaultJob+0xe>
                break;
 8001070:	bf00      	nop
 8001072:	e446      	b.n	8000902 <defaultJob+0xe>
                break;
 8001074:	bf00      	nop
 8001076:	e444      	b.n	8000902 <defaultJob+0xe>
                break;
 8001078:	bf00      	nop
 800107a:	e442      	b.n	8000902 <defaultJob+0xe>
                break;
 800107c:	bf00      	nop
 800107e:	e440      	b.n	8000902 <defaultJob+0xe>
            break;
 8001080:	bf00      	nop
 8001082:	e43e      	b.n	8000902 <defaultJob+0xe>
            break;
 8001084:	bf00      	nop
 8001086:	e43c      	b.n	8000902 <defaultJob+0xe>
            break;
 8001088:	bf00      	nop
 800108a:	e43a      	b.n	8000902 <defaultJob+0xe>
            break;
 800108c:	bf00      	nop
 800108e:	e438      	b.n	8000902 <defaultJob+0xe>
            break;
 8001090:	bf00      	nop
 8001092:	e436      	b.n	8000902 <defaultJob+0xe>
            break;
 8001094:	bf00      	nop
 8001096:	e434      	b.n	8000902 <defaultJob+0xe>
            break;
 8001098:	bf00      	nop
 800109a:	e432      	b.n	8000902 <defaultJob+0xe>
            break;
 800109c:	bf00      	nop
 800109e:	e430      	b.n	8000902 <defaultJob+0xe>
            break;
 80010a0:	bf00      	nop
 80010a2:	e42e      	b.n	8000902 <defaultJob+0xe>
          break;
 80010a4:	bf00      	nop
 80010a6:	e42c      	b.n	8000902 <defaultJob+0xe>
            break;
 80010a8:	bf00      	nop
 80010aa:	e42a      	b.n	8000902 <defaultJob+0xe>
            break;
 80010ac:	bf00      	nop
 80010ae:	e428      	b.n	8000902 <defaultJob+0xe>
            break;
 80010b0:	bf00      	nop
    switch(gu8JobStep)
 80010b2:	e426      	b.n	8000902 <defaultJob+0xe>
 80010b4:	40011400 	.word	0x40011400
 80010b8:	20002054 	.word	0x20002054
 80010bc:	08009188 	.word	0x08009188
 80010c0:	2000195e 	.word	0x2000195e
 80010c4:	cccccccd 	.word	0xcccccccd
 80010c8:	20001960 	.word	0x20001960
 80010cc:	080091e8 	.word	0x080091e8
 80010d0:	20001dc0 	.word	0x20001dc0
 80010d4:	20001d66 	.word	0x20001d66
 80010d8:	200020e4 	.word	0x200020e4
 80010dc:	20001958 	.word	0x20001958

080010e0 <delay_cycle>:
}

//----------------------------------------------------------
// * delay no operation
void delay_cycle(uint8_t u8DalayCnt)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i=0;i < u8DalayCnt ; i++){
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e003      	b.n	80010f8 <delay_cycle+0x18>
    asm volatile("NOP");
 80010f0:	bf00      	nop
  for(uint8_t i=0;i < u8DalayCnt ; i++){
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3f7      	bcc.n	80010f0 <delay_cycle+0x10>
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <WriteLcdData>:
//---------------------------------------------------------
// Brief : Lcd Data
void WriteLcdData(uint8_t u8LcdData)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  uint16_t u16ReadyPort;
  u16ReadyPort = (uint16_t)(u8LcdData) & 0x00ff;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOD, u16ReadyPort, GPIO_PIN_SET);
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	2201      	movs	r2, #1
 800111e:	4619      	mov	r1, r3
 8001120:	4808      	ldr	r0, [pc, #32]	; (8001144 <WriteLcdData+0x38>)
 8001122:	f002 fb63 	bl	80037ec <HAL_GPIO_WritePin>
  u16ReadyPort ^= 0x00ff;
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800112c:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOD, u16ReadyPort, GPIO_PIN_RESET);
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	2200      	movs	r2, #0
 8001132:	4619      	mov	r1, r3
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <WriteLcdData+0x38>)
 8001136:	f002 fb59 	bl	80037ec <HAL_GPIO_WritePin>

}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40011400 	.word	0x40011400

08001148 <GraphicLcdWriteData>:

//----------------------------------------------------------
// # Write Data to Graphic LCD
// #								
void GraphicLcdWriteData(uint8_t u8Cs, uint8_t u8LcdData)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	clr_lcd_en();
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115e:	4828      	ldr	r0, [pc, #160]	; (8001200 <GraphicLcdWriteData+0xb8>)
 8001160:	f002 fb44 	bl	80037ec <HAL_GPIO_WritePin>
	delay_cycle(2);
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff ffbb 	bl	80010e0 <delay_cycle>
	clr_lcd_cs1();
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001170:	4823      	ldr	r0, [pc, #140]	; (8001200 <GraphicLcdWriteData+0xb8>)
 8001172:	f002 fb3b 	bl	80037ec <HAL_GPIO_WritePin>
	clr_lcd_cs2();
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117c:	4821      	ldr	r0, [pc, #132]	; (8001204 <GraphicLcdWriteData+0xbc>)
 800117e:	f002 fb35 	bl	80037ec <HAL_GPIO_WritePin>
	delay_cycle(2);
 8001182:	2002      	movs	r0, #2
 8001184:	f7ff ffac 	bl	80010e0 <delay_cycle>
	if(!u8Cs){       // CS1
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d106      	bne.n	800119c <GraphicLcdWriteData+0x54>
		set_lcd_cs1();
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001194:	481a      	ldr	r0, [pc, #104]	; (8001200 <GraphicLcdWriteData+0xb8>)
 8001196:	f002 fb29 	bl	80037ec <HAL_GPIO_WritePin>
 800119a:	e005      	b.n	80011a8 <GraphicLcdWriteData+0x60>
	}
	else{						//CS2
		set_lcd_cs2();
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <GraphicLcdWriteData+0xbc>)
 80011a4:	f002 fb22 	bl	80037ec <HAL_GPIO_WritePin>
	}
	clr_lcd_rw();		// Set for writing
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ae:	4814      	ldr	r0, [pc, #80]	; (8001200 <GraphicLcdWriteData+0xb8>)
 80011b0:	f002 fb1c 	bl	80037ec <HAL_GPIO_WritePin>
									// Put the data on the port
	WriteLcdData(u8LcdData);
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ffa8 	bl	800110c <WriteLcdData>
	
	set_lcd_en();		// Pulse the enable pin
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	480f      	ldr	r0, [pc, #60]	; (8001200 <GraphicLcdWriteData+0xb8>)
 80011c4:	f002 fb12 	bl	80037ec <HAL_GPIO_WritePin>
	delay_cycle(4);
 80011c8:	2004      	movs	r0, #4
 80011ca:	f7ff ff89 	bl	80010e0 <delay_cycle>
	clr_lcd_en();
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <GraphicLcdWriteData+0xb8>)
 80011d6:	f002 fb09 	bl	80037ec <HAL_GPIO_WritePin>
	delay_cycle(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f7ff ff80 	bl	80010e0 <delay_cycle>
  
  clr_lcd_cs1();
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <GraphicLcdWriteData+0xb8>)
 80011e8:	f002 fb00 	bl	80037ec <HAL_GPIO_WritePin>
	clr_lcd_cs2();	// Reset Chip Select
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <GraphicLcdWriteData+0xbc>)
 80011f4:	f002 fafa 	bl	80037ec <HAL_GPIO_WritePin>
	
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40011000 	.word	0x40011000
 8001204:	40010800 	.word	0x40010800

08001208 <WriteDataOnLcd>:
// #

//--------------------------------------------
/* Write data on LCD */
uint16_t WriteDataOnLcd(uint8_t u8GLcdXStart,uint8_t u8GLcdXSize,uint8_t u8GLcdYStart,uint8_t u8GLcdYSize,const unsigned char* upConstAdd)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	4603      	mov	r3, r0
 800121c:	71bb      	strb	r3, [r7, #6]
 800121e:	460b      	mov	r3, r1
 8001220:	717b      	strb	r3, [r7, #5]
 8001222:	4613      	mov	r3, r2
 8001224:	713b      	strb	r3, [r7, #4]

  osStatus_t osStateValue1;
  uint8_t i,j;
	uint8_t u8PointY;
#ifdef ENABLE_EVENT_FALG
  if(gu8JobStep >= JOB_STATE_EM_STOP){
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <WriteDataOnLcd+0x138>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d901      	bls.n	8001232 <WriteDataOnLcd+0x2a>
    return 0;
 800122e:	2300      	movs	r3, #0
 8001230:	e082      	b.n	8001338 <WriteDataOnLcd+0x130>
  }

#endif
  osStateValue1 = osSemaphoreAcquire(LcdTaskSemCntHandle, DEFAULT_OS_WAIT_TIME);
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <WriteDataOnLcd+0x13c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800123a:	4618      	mov	r0, r3
 800123c:	f004 f994 	bl	8005568 <osSemaphoreAcquire>
 8001240:	6138      	str	r0, [r7, #16]
  if(osStateValue1 != osOK){
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <WriteDataOnLcd+0x58>
    //return;
    gu16TimerLcd = 0;
 8001248:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <WriteDataOnLcd+0x140>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]
    while((gu8TaskLcd != TASK_LCD_STEP_WAIT) && (gu16TimerLcd < 50)){
 800124e:	bf00      	nop
 8001250:	4b3e      	ldr	r3, [pc, #248]	; (800134c <WriteDataOnLcd+0x144>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <WriteDataOnLcd+0x58>
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <WriteDataOnLcd+0x140>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	2b31      	cmp	r3, #49	; 0x31
 800125e:	d9f7      	bls.n	8001250 <WriteDataOnLcd+0x48>
      
    };
  }
#ifdef ENABLE_EVENT_FALG
  if(gu8JobStep >= JOB_STATE_EM_STOP){
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <WriteDataOnLcd+0x138>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	d901      	bls.n	800126c <WriteDataOnLcd+0x64>
    return 0;
 8001268:	2300      	movs	r3, #0
 800126a:	e065      	b.n	8001338 <WriteDataOnLcd+0x130>
  }

#endif

  for(i=0;i<u8GLcdYSize;i++){
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
 8001270:	e040      	b.n	80012f4 <WriteDataOnLcd+0xec>
		for(j=0;j<u8GLcdXSize;j++){
 8001272:	2300      	movs	r3, #0
 8001274:	75bb      	strb	r3, [r7, #22]
 8001276:	e036      	b.n	80012e6 <WriteDataOnLcd+0xde>
			u8PointY = u8GLcdYStart+i;
 8001278:	797a      	ldrb	r2, [r7, #5]
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	4413      	add	r3, r2
 800127e:	73fb      	strb	r3, [r7, #15]
			if(u8PointY < 64){
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b3f      	cmp	r3, #63	; 0x3f
 8001284:	d814      	bhi.n	80012b0 <WriteDataOnLcd+0xa8>
				gu8LcdDisplayData[0][u8PointY][u8GLcdXStart+j] = upConstAdd[i*u8GLcdXSize+j];
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	79ba      	ldrb	r2, [r7, #6]
 800128a:	fb02 f203 	mul.w	r2, r2, r3
 800128e:	7dbb      	ldrb	r3, [r7, #22]
 8001290:	4413      	add	r3, r2
 8001292:	461a      	mov	r2, r3
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	1899      	adds	r1, r3, r2
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	79f8      	ldrb	r0, [r7, #7]
 800129c:	7dbb      	ldrb	r3, [r7, #22]
 800129e:	4403      	add	r3, r0
 80012a0:	7808      	ldrb	r0, [r1, #0]
 80012a2:	492b      	ldr	r1, [pc, #172]	; (8001350 <WriteDataOnLcd+0x148>)
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	440a      	add	r2, r1
 80012a8:	4413      	add	r3, r2
 80012aa:	4602      	mov	r2, r0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e017      	b.n	80012e0 <WriteDataOnLcd+0xd8>
			}
			else{
				gu8LcdDisplayData[1][u8PointY-64][u8GLcdXStart+j] = upConstAdd[i*u8GLcdXSize+j];
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	79ba      	ldrb	r2, [r7, #6]
 80012b4:	fb02 f203 	mul.w	r2, r2, r3
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	4413      	add	r3, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	1899      	adds	r1, r3, r2
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80012c8:	79f8      	ldrb	r0, [r7, #7]
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	4403      	add	r3, r0
 80012ce:	7808      	ldrb	r0, [r1, #0]
 80012d0:	491f      	ldr	r1, [pc, #124]	; (8001350 <WriteDataOnLcd+0x148>)
 80012d2:	00d2      	lsls	r2, r2, #3
 80012d4:	440a      	add	r2, r1
 80012d6:	4413      	add	r3, r2
 80012d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012dc:	4602      	mov	r2, r0
 80012de:	701a      	strb	r2, [r3, #0]
		for(j=0;j<u8GLcdXSize;j++){
 80012e0:	7dbb      	ldrb	r3, [r7, #22]
 80012e2:	3301      	adds	r3, #1
 80012e4:	75bb      	strb	r3, [r7, #22]
 80012e6:	7dba      	ldrb	r2, [r7, #22]
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3c4      	bcc.n	8001278 <WriteDataOnLcd+0x70>
  for(i=0;i<u8GLcdYSize;i++){
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	3301      	adds	r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
 80012f4:	7dfa      	ldrb	r2, [r7, #23]
 80012f6:	793b      	ldrb	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3ba      	bcc.n	8001272 <WriteDataOnLcd+0x6a>
			}
		}
	}
	gu8GLcdXStart = u8GLcdXStart;
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <WriteDataOnLcd+0x14c>)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	7013      	strb	r3, [r2, #0]
	gu8GLcdXEnd = u8GLcdXStart+u8GLcdXSize-1;
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	4413      	add	r3, r2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <WriteDataOnLcd+0x150>)
 8001310:	701a      	strb	r2, [r3, #0]
	gu8TaskGraphicLcdY = gu8GLcdYStart = u8GLcdYStart;
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <WriteDataOnLcd+0x154>)
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	7013      	strb	r3, [r2, #0]
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <WriteDataOnLcd+0x154>)
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <WriteDataOnLcd+0x158>)
 800131e:	701a      	strb	r2, [r3, #0]
	
	gu8GLcdYEnd = u8GLcdYStart+u8GLcdYSize-1;
 8001320:	797a      	ldrb	r2, [r7, #5]
 8001322:	793b      	ldrb	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	b2db      	uxtb	r3, r3
 8001328:	3b01      	subs	r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <WriteDataOnLcd+0x15c>)
 800132e:	701a      	strb	r2, [r3, #0]
  
	gu8TaskLcd = TASK_LCD_STEP_WRITE_XY;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <WriteDataOnLcd+0x144>)
 8001332:	2203      	movs	r2, #3
 8001334:	701a      	strb	r2, [r3, #0]
  return 1;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	20001dc0 	.word	0x20001dc0
 8001344:	20001db8 	.word	0x20001db8
 8001348:	2000195a 	.word	0x2000195a
 800134c:	20001958 	.word	0x20001958
 8001350:	20001964 	.word	0x20001964
 8001354:	20001dbd 	.word	0x20001dbd
 8001358:	2000195c 	.word	0x2000195c
 800135c:	20001dbe 	.word	0x20001dbe
 8001360:	20001de0 	.word	0x20001de0
 8001364:	20001954 	.word	0x20001954

08001368 <DisplayTask>:
//----------------------------
/* USER CODE END Header_StartTask02 */
void DisplayTask(void *argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  // LcdTaskSemCntHandle = osSemaphoreNew(1, 1, &LcdTaskSemCnt_attributes);

  /* Infinite loop */
  for(;;)
  {
     switch(gu8TaskLcd){
 8001370:	4ba9      	ldr	r3, [pc, #676]	; (8001618 <DisplayTask+0x2b0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b03      	cmp	r3, #3
 8001376:	f200 8195 	bhi.w	80016a4 <DisplayTask+0x33c>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <DisplayTask+0x18>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	080016ad 	.word	0x080016ad
 8001384:	08001391 	.word	0x08001391
 8001388:	0800144d 	.word	0x0800144d
 800138c:	08001685 	.word	0x08001685
      {
        break;
      }
      case TASK_LCD_STEP_INITIAL:
      {
        clr_lcd_noe();
 8001390:	2200      	movs	r2, #0
 8001392:	2140      	movs	r1, #64	; 0x40
 8001394:	48a1      	ldr	r0, [pc, #644]	; (800161c <DisplayTask+0x2b4>)
 8001396:	f002 fa29 	bl	80037ec <HAL_GPIO_WritePin>
		set_lcd_dir();
 800139a:	2201      	movs	r2, #1
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	48a0      	ldr	r0, [pc, #640]	; (8001620 <DisplayTask+0x2b8>)
 80013a0:	f002 fa24 	bl	80037ec <HAL_GPIO_WritePin>
		clr_lcd_res();
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013aa:	489e      	ldr	r0, [pc, #632]	; (8001624 <DisplayTask+0x2bc>)
 80013ac:	f002 fa1e 	bl	80037ec <HAL_GPIO_WritePin>

        osDelay(10);
 80013b0:	200a      	movs	r0, #10
 80013b2:	f003 fee3 	bl	800517c <osDelay>

        set_lcd_res();
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013bc:	4899      	ldr	r0, [pc, #612]	; (8001624 <DisplayTask+0x2bc>)
 80013be:	f002 fa15 	bl	80037ec <HAL_GPIO_WritePin>
        clr_lcd_en();
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c8:	4895      	ldr	r0, [pc, #596]	; (8001620 <DisplayTask+0x2b8>)
 80013ca:	f002 fa0f 	bl	80037ec <HAL_GPIO_WritePin>
        clr_lcd_cs1();
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d4:	4892      	ldr	r0, [pc, #584]	; (8001620 <DisplayTask+0x2b8>)
 80013d6:	f002 fa09 	bl	80037ec <HAL_GPIO_WritePin>
        clr_lcd_cs2();
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	4890      	ldr	r0, [pc, #576]	; (8001624 <DisplayTask+0x2bc>)
 80013e2:	f002 fa03 	bl	80037ec <HAL_GPIO_WritePin>
        lcd_rs_cmd();
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ec:	488c      	ldr	r0, [pc, #560]	; (8001620 <DisplayTask+0x2b8>)
 80013ee:	f002 f9fd 	bl	80037ec <HAL_GPIO_WritePin>

        GraphicLcdWriteData(G_LCD_CS1,(CTRL_DISPLAY_START_LINE | 0x00)); //0xc0
 80013f2:	21c0      	movs	r1, #192	; 0xc0
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff fea7 	bl	8001148 <GraphicLcdWriteData>
		GraphicLcdWriteData(G_LCD_CS2,(CTRL_DISPLAY_START_LINE | 0x00));
 80013fa:	21c0      	movs	r1, #192	; 0xc0
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fea3 	bl	8001148 <GraphicLcdWriteData>
		GraphicLcdWriteData(G_LCD_CS1,(CTRL_SET_Y_ADDRESS | 0x00));
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fe9f 	bl	8001148 <GraphicLcdWriteData>
		GraphicLcdWriteData(G_LCD_CS2,(CTRL_SET_Y_ADDRESS | 0x00));
 800140a:	2140      	movs	r1, #64	; 0x40
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff fe9b 	bl	8001148 <GraphicLcdWriteData>
		GraphicLcdWriteData(G_LCD_CS1,(CTRL_SET_X_ADDRESS | 0x00));
 8001412:	21b8      	movs	r1, #184	; 0xb8
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fe97 	bl	8001148 <GraphicLcdWriteData>
		GraphicLcdWriteData(G_LCD_CS2,(CTRL_SET_X_ADDRESS | 0x00));
 800141a:	21b8      	movs	r1, #184	; 0xb8
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff fe93 	bl	8001148 <GraphicLcdWriteData>
				
		GraphicLcdWriteData(G_LCD_CS1,(CTRL_DISPLAY_ONOFF | CTRL_DISPLAY_ONOFF_ON));
 8001422:	213f      	movs	r1, #63	; 0x3f
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff fe8f 	bl	8001148 <GraphicLcdWriteData>
		GraphicLcdWriteData(G_LCD_CS2,(CTRL_DISPLAY_ONOFF | CTRL_DISPLAY_ONOFF_ON));
 800142a:	213f      	movs	r1, #63	; 0x3f
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff fe8b 	bl	8001148 <GraphicLcdWriteData>

        // set_lcd_led();
		memcpy(gu8LcdDisplayData, screen1,1024);  // gu8LcdDisplayData LCD에 데이터를 뿌리는 곳
 8001432:	4a7d      	ldr	r2, [pc, #500]	; (8001628 <DisplayTask+0x2c0>)
 8001434:	4b7d      	ldr	r3, [pc, #500]	; (800162c <DisplayTask+0x2c4>)
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143e:	461a      	mov	r2, r3
 8001440:	f007 fbe0 	bl	8008c04 <memcpy>

        gu8TaskLcd = TASK_LCD_STEP_LOAD;
 8001444:	4b74      	ldr	r3, [pc, #464]	; (8001618 <DisplayTask+0x2b0>)
 8001446:	2202      	movs	r2, #2
 8001448:	701a      	strb	r2, [r3, #0]

        break;
 800144a:	e130      	b.n	80016ae <DisplayTask+0x346>
      }
      case TASK_LCD_STEP_LOAD:
      {
        gu8TaskGraphicLcdY = 63;
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <DisplayTask+0x2c8>)
 800144e:	223f      	movs	r2, #63	; 0x3f
 8001450:	701a      	strb	r2, [r3, #0]
        while(gu8TaskGraphicLcdY < 64){
 8001452:	e071      	b.n	8001538 <DisplayTask+0x1d0>
          for(gu8TaskGraphicLcdX = 0;gu8TaskGraphicLcdX < 8 ; gu8TaskGraphicLcdX++){
 8001454:	4b77      	ldr	r3, [pc, #476]	; (8001634 <DisplayTask+0x2cc>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e060      	b.n	800151e <DisplayTask+0x1b6>
            lcd_rs_cmd();
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001462:	486f      	ldr	r0, [pc, #444]	; (8001620 <DisplayTask+0x2b8>)
 8001464:	f002 f9c2 	bl	80037ec <HAL_GPIO_WritePin>
            // CS1
            GraphicLcdWriteData(G_LCD_CS1,(CTRL_SET_Y_ADDRESS | gu8TaskGraphicLcdY));
 8001468:	4b71      	ldr	r3, [pc, #452]	; (8001630 <DisplayTask+0x2c8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fe67 	bl	8001148 <GraphicLcdWriteData>
            // CS2
            GraphicLcdWriteData(G_LCD_CS2,(CTRL_SET_Y_ADDRESS | (63-gu8TaskGraphicLcdY)));
 800147a:	4b6d      	ldr	r3, [pc, #436]	; (8001630 <DisplayTask+0x2c8>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001482:	b2db      	uxtb	r3, r3
 8001484:	b25b      	sxtb	r3, r3
 8001486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800148a:	b25b      	sxtb	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff fe59 	bl	8001148 <GraphicLcdWriteData>
            // CS1
            GraphicLcdWriteData(G_LCD_CS1,(CTRL_SET_X_ADDRESS | gu8TaskGraphicLcdX));
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <DisplayTask+0x2cc>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f063 0347 	orn	r3, r3, #71	; 0x47
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4619      	mov	r1, r3
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fe50 	bl	8001148 <GraphicLcdWriteData>
            // CS2
            GraphicLcdWriteData(G_LCD_CS2,(CTRL_SET_X_ADDRESS | gu8TaskGraphicLcdX));
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <DisplayTask+0x2cc>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	f063 0347 	orn	r3, r3, #71	; 0x47
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fe47 	bl	8001148 <GraphicLcdWriteData>
            osDelay(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f003 fe5e 	bl	800517c <osDelay>
            lcd_rs_data();
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c6:	4856      	ldr	r0, [pc, #344]	; (8001620 <DisplayTask+0x2b8>)
 80014c8:	f002 f990 	bl	80037ec <HAL_GPIO_WritePin>
            // CS1
             GraphicLcdWriteData(G_LCD_CS1,gu8LcdDisplayData[0][gu8TaskGraphicLcdY][7-gu8TaskGraphicLcdX]);
 80014cc:	4b58      	ldr	r3, [pc, #352]	; (8001630 <DisplayTask+0x2c8>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <DisplayTask+0x2cc>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	4953      	ldr	r1, [pc, #332]	; (8001628 <DisplayTask+0x2c0>)
 80014dc:	00d2      	lsls	r2, r2, #3
 80014de:	440a      	add	r2, r1
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fe2e 	bl	8001148 <GraphicLcdWriteData>
            // CS2
            GraphicLcdWriteData(G_LCD_CS2,gu8LcdDisplayData[1][63-gu8TaskGraphicLcdY][7-gu8TaskGraphicLcdX]);
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <DisplayTask+0x2c8>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	f1c3 023f 	rsb	r2, r3, #63	; 0x3f
 80014f4:	4b4f      	ldr	r3, [pc, #316]	; (8001634 <DisplayTask+0x2cc>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f1c3 0307 	rsb	r3, r3, #7
 80014fc:	494a      	ldr	r1, [pc, #296]	; (8001628 <DisplayTask+0x2c0>)
 80014fe:	00d2      	lsls	r2, r2, #3
 8001500:	440a      	add	r2, r1
 8001502:	4413      	add	r3, r2
 8001504:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4619      	mov	r1, r3
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fe1b 	bl	8001148 <GraphicLcdWriteData>
          for(gu8TaskGraphicLcdX = 0;gu8TaskGraphicLcdX < 8 ; gu8TaskGraphicLcdX++){
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <DisplayTask+0x2cc>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <DisplayTask+0x2cc>)
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	4b45      	ldr	r3, [pc, #276]	; (8001634 <DisplayTask+0x2cc>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d99a      	bls.n	800145c <DisplayTask+0xf4>
            

          }
          osDelay(5);
 8001526:	2005      	movs	r0, #5
 8001528:	f003 fe28 	bl	800517c <osDelay>
          --gu8TaskGraphicLcdY;
 800152c:	4b40      	ldr	r3, [pc, #256]	; (8001630 <DisplayTask+0x2c8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <DisplayTask+0x2c8>)
 8001536:	701a      	strb	r2, [r3, #0]
        while(gu8TaskGraphicLcdY < 64){
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <DisplayTask+0x2c8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b3f      	cmp	r3, #63	; 0x3f
 800153e:	d989      	bls.n	8001454 <DisplayTask+0xec>
        };
        set_lcd_led();
 8001540:	2201      	movs	r2, #1
 8001542:	2120      	movs	r1, #32
 8001544:	4835      	ldr	r0, [pc, #212]	; (800161c <DisplayTask+0x2b4>)
 8001546:	f002 f951 	bl	80037ec <HAL_GPIO_WritePin>
        gu8TaskLcd = TASK_LCD_STEP_WAIT;
 800154a:	4b33      	ldr	r3, [pc, #204]	; (8001618 <DisplayTask+0x2b0>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
        osSemaphoreRelease(LcdTaskSemCntHandle);
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <DisplayTask+0x2d0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f004 f86d 	bl	8005634 <osSemaphoreRelease>
        break;
 800155a:	e0a8      	b.n	80016ae <DisplayTask+0x346>
      }
      case TASK_LCD_STEP_WRITE_XY:
      {
        while(gu8TaskGraphicLcdY <= gu8GLcdYEnd){
          for(gu8TaskGraphicLcdX = gu8GLcdXStart;gu8TaskGraphicLcdX <= gu8GLcdXEnd;gu8TaskGraphicLcdX++){
 800155c:	4b37      	ldr	r3, [pc, #220]	; (800163c <DisplayTask+0x2d4>)
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <DisplayTask+0x2cc>)
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e081      	b.n	800166a <DisplayTask+0x302>
            lcd_rs_cmd();
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156c:	482c      	ldr	r0, [pc, #176]	; (8001620 <DisplayTask+0x2b8>)
 800156e:	f002 f93d 	bl	80037ec <HAL_GPIO_WritePin>
            if(gu8TaskGraphicLcdY > 63){
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <DisplayTask+0x2c8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b3f      	cmp	r3, #63	; 0x3f
 8001578:	d91b      	bls.n	80015b2 <DisplayTask+0x24a>
              // CS2
              GraphicLcdWriteData(G_LCD_CS2,(CTRL_SET_Y_ADDRESS | (gu8TaskGraphicLcdY-64)));
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <DisplayTask+0x2c8>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	3b40      	subs	r3, #64	; 0x40
 8001580:	b2db      	uxtb	r3, r3
 8001582:	b25b      	sxtb	r3, r3
 8001584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001588:	b25b      	sxtb	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4619      	mov	r1, r3
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff fdda 	bl	8001148 <GraphicLcdWriteData>
              GraphicLcdWriteData(G_LCD_CS2,(CTRL_SET_X_ADDRESS | (7-gu8TaskGraphicLcdX)));
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <DisplayTask+0x2cc>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	f1c3 0307 	rsb	r3, r3, #7
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	f063 0347 	orn	r3, r3, #71	; 0x47
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4619      	mov	r1, r3
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff fdcc 	bl	8001148 <GraphicLcdWriteData>
 80015b0:	e016      	b.n	80015e0 <DisplayTask+0x278>
            }
            else{
              // CS1
              GraphicLcdWriteData(G_LCD_CS1,(CTRL_SET_Y_ADDRESS | gu8TaskGraphicLcdY));
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <DisplayTask+0x2c8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4619      	mov	r1, r3
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff fdc2 	bl	8001148 <GraphicLcdWriteData>
              GraphicLcdWriteData(G_LCD_CS1,(CTRL_SET_X_ADDRESS | (7-gu8TaskGraphicLcdX)));
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <DisplayTask+0x2cc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f1c3 0307 	rsb	r3, r3, #7
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	f063 0347 	orn	r3, r3, #71	; 0x47
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff fdb4 	bl	8001148 <GraphicLcdWriteData>
            }
            lcd_rs_data();
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <DisplayTask+0x2b8>)
 80015e8:	f002 f900 	bl	80037ec <HAL_GPIO_WritePin>
            if(gu8TaskGraphicLcdY > 63){
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <DisplayTask+0x2c8>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b3f      	cmp	r3, #63	; 0x3f
 80015f2:	d925      	bls.n	8001640 <DisplayTask+0x2d8>
              // CS2
              GraphicLcdWriteData(G_LCD_CS2,gu8LcdDisplayData[1][gu8TaskGraphicLcdY-64][gu8TaskGraphicLcdX]);
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <DisplayTask+0x2c8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3b40      	subs	r3, #64	; 0x40
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <DisplayTask+0x2cc>)
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	4611      	mov	r1, r2
 8001600:	4a09      	ldr	r2, [pc, #36]	; (8001628 <DisplayTask+0x2c0>)
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	440b      	add	r3, r1
 8001608:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff fd99 	bl	8001148 <GraphicLcdWriteData>
 8001616:	e022      	b.n	800165e <DisplayTask+0x2f6>
 8001618:	20001958 	.word	0x20001958
 800161c:	40010c00 	.word	0x40010c00
 8001620:	40011000 	.word	0x40011000
 8001624:	40010800 	.word	0x40010800
 8001628:	20001964 	.word	0x20001964
 800162c:	08008cc8 	.word	0x08008cc8
 8001630:	20001de0 	.word	0x20001de0
 8001634:	20001d64 	.word	0x20001d64
 8001638:	20001db8 	.word	0x20001db8
 800163c:	20001dbd 	.word	0x20001dbd
            }
            else{
              // CS1
              GraphicLcdWriteData(G_LCD_CS1,gu8LcdDisplayData[0][gu8TaskGraphicLcdY][gu8TaskGraphicLcdX]);
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <DisplayTask+0x348>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <DisplayTask+0x34c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4619      	mov	r1, r3
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <DisplayTask+0x350>)
 800164e:	00c3      	lsls	r3, r0, #3
 8001650:	4413      	add	r3, r2
 8001652:	440b      	add	r3, r1
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fd75 	bl	8001148 <GraphicLcdWriteData>
          for(gu8TaskGraphicLcdX = gu8GLcdXStart;gu8TaskGraphicLcdX <= gu8GLcdXEnd;gu8TaskGraphicLcdX++){
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <DisplayTask+0x34c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <DisplayTask+0x34c>)
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <DisplayTask+0x34c>)
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <DisplayTask+0x354>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	f67f af77 	bls.w	8001566 <DisplayTask+0x1fe>
            }
          }
          ++gu8TaskGraphicLcdY;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <DisplayTask+0x348>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <DisplayTask+0x348>)
 8001682:	701a      	strb	r2, [r3, #0]
        while(gu8TaskGraphicLcdY <= gu8GLcdYEnd){
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <DisplayTask+0x348>)
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <DisplayTask+0x358>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	f67f af65 	bls.w	800155c <DisplayTask+0x1f4>
        }
        gu8TaskLcd = TASK_LCD_STEP_WAIT;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <DisplayTask+0x35c>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
        osSemaphoreRelease(LcdTaskSemCntHandle);
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <DisplayTask+0x360>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 ffc9 	bl	8005634 <osSemaphoreRelease>

        break;
 80016a2:	e004      	b.n	80016ae <DisplayTask+0x346>
      }
      default:
      {
        gu8TaskLcd = TASK_LCD_STEP_WAIT;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <DisplayTask+0x35c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
        break;
 80016aa:	e000      	b.n	80016ae <DisplayTask+0x346>
        break;
 80016ac:	bf00      	nop
     switch(gu8TaskLcd){
 80016ae:	e65f      	b.n	8001370 <DisplayTask+0x8>
 80016b0:	20001de0 	.word	0x20001de0
 80016b4:	20001d64 	.word	0x20001d64
 80016b8:	20001964 	.word	0x20001964
 80016bc:	2000195c 	.word	0x2000195c
 80016c0:	20001954 	.word	0x20001954
 80016c4:	20001958 	.word	0x20001958
 80016c8:	20001db8 	.word	0x20001db8

080016cc <DeviceTask>:
 * 스위치 입력 여부 감시
 * ADC 입력 값 감시
*/
//--------------------------------
void DeviceTask(void *argument)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    TaskInputThread();
 80016d4:	f000 fed0 	bl	8002478 <TaskInputThread>
    TaskAdc1Thread();
 80016d8:	f001 f806 	bl	80026e8 <TaskAdc1Thread>
    if(FLAG_EVT_INPUT){
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <DeviceTask+0x84>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d01b      	beq.n	8001722 <DeviceTask+0x56>
      if(!DEF_INPUT_SW1){
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <DeviceTask+0x88>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d114      	bne.n	8001722 <DeviceTask+0x56>
        if((gu8JobStep > JOB_STATE_RUN) && (gu8JobStep < JOB_STATE_FINISH)){
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <DeviceTask+0x8c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b06      	cmp	r3, #6
 80016fe:	d910      	bls.n	8001722 <DeviceTask+0x56>
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <DeviceTask+0x8c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b0a      	cmp	r3, #10
 8001706:	d80c      	bhi.n	8001722 <DeviceTask+0x56>
          FLAG_EVT_INPUT = 0;
 8001708:	4a11      	ldr	r2, [pc, #68]	; (8001750 <DeviceTask+0x84>)
 800170a:	7813      	ldrb	r3, [r2, #0]
 800170c:	f36f 03c3 	bfc	r3, #3, #1
 8001710:	7013      	strb	r3, [r2, #0]
#ifdef ENABLE_EVENT_FALG
          osSemaphoreDelete(LcdTaskSemCntHandle);
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <DeviceTask+0x90>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 ffe4 	bl	80056e4 <osSemaphoreDelete>
#endif
          gu8JobStep = JOB_STATE_EM_STOP;//JOB_STATE_INIT;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <DeviceTask+0x8c>)
 800171e:	220d      	movs	r2, #13
 8001720:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    if(gu16TimerJob > 2000){
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <DeviceTask+0x94>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800172a:	d9d3      	bls.n	80016d4 <DeviceTask+0x8>
      //if(gu8JobStep >= JOB_STATE_RUN){
        FLAG_EVT_INPUT = 0;
 800172c:	4a08      	ldr	r2, [pc, #32]	; (8001750 <DeviceTask+0x84>)
 800172e:	7813      	ldrb	r3, [r2, #0]
 8001730:	f36f 03c3 	bfc	r3, #3, #1
 8001734:	7013      	strb	r3, [r2, #0]
#ifdef ENABLE_EVENT_FALG
        osSemaphoreDelete(LcdTaskSemCntHandle);
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <DeviceTask+0x90>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 ffd2 	bl	80056e4 <osSemaphoreDelete>
#endif
        gu8JobStep = JOB_STATE_EM_STOP;//JOB_STATE_INIT;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <DeviceTask+0x8c>)
 8001742:	220d      	movs	r2, #13
 8001744:	701a      	strb	r2, [r3, #0]
        gu16TimerJob = 0;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <DeviceTask+0x94>)
 8001748:	2200      	movs	r2, #0
 800174a:	801a      	strh	r2, [r3, #0]
    TaskInputThread();
 800174c:	e7c2      	b.n	80016d4 <DeviceTask+0x8>
 800174e:	bf00      	nop
 8001750:	20002054 	.word	0x20002054
 8001754:	200020e4 	.word	0x200020e4
 8001758:	20001dc0 	.word	0x20001dc0
 800175c:	20001db8 	.word	0x20001db8
 8001760:	20001d66 	.word	0x20001d66

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	 HAL_Init();
 8001768:	f001 f8e0 	bl	800292c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 f86c 	bl	8001848 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8001770:	f000 fadc 	bl	8001d2c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001774:	f000 f8ba 	bl	80018ec <MX_ADC1_Init>
  // MX_IWDG_Init(); //HAL_IWDG_Refresh(&hiwdg);
  MX_TIM1_Init();
 8001778:	f000 f8f6 	bl	8001968 <MX_TIM1_Init>
  MX_TIM2_Init();
 800177c:	f000 f95c 	bl	8001a38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001780:	f000 f9be 	bl	8001b00 <MX_TIM3_Init>
  // MX_WWDG_Init(); //HAL_WWDG_Refresh(hwwdg);
  MX_TIM6_Init();
 8001784:	f000 fa0a 	bl	8001b9c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001788:	f000 fa3e 	bl	8001c08 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800178c:	f000 fa72 	bl	8001c74 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001790:	f000 faa2 	bl	8001cd8 <MX_USART3_UART_Init>
  ResetADCData();
 8001794:	f000 ff3a 	bl	800260c <ResetADCData>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001798:	f003 fb80 	bl	8004e9c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* Create the timer(s) */
  /* creation of PortTimer */
  PortTimerHandle = osTimerNew(CheckPortTimer, osTimerPeriodic, NULL, &PortTimer_attributes);
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <main+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	2101      	movs	r1, #1
 80017a2:	481a      	ldr	r0, [pc, #104]	; (800180c <main+0xa8>)
 80017a4:	f003 fd2e 	bl	8005204 <osTimerNew>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a19      	ldr	r2, [pc, #100]	; (8001810 <main+0xac>)
 80017ac:	6013      	str	r3, [r2, #0]
  osTimerStart(PortTimerHandle,10);
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <main+0xac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	210a      	movs	r1, #10
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fda9 	bl	800530c <osTimerStart>

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  
  /* USER CODE END RTOS_THREADS */
  FunctionJobHandle = osThreadNew(defaultJob, NULL, &FunctionJob_attributes);// FunctionJob
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <main+0xb0>)
 80017bc:	2100      	movs	r1, #0
 80017be:	4816      	ldr	r0, [pc, #88]	; (8001818 <main+0xb4>)
 80017c0:	f003 fbd2 	bl	8004f68 <osThreadNew>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <main+0xb8>)
 80017c8:	6013      	str	r3, [r2, #0]
  LcdTaskHandle = osThreadNew(DisplayTask, NULL, &myTask02_attributes);
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <main+0xbc>)
 80017cc:	2100      	movs	r1, #0
 80017ce:	4815      	ldr	r0, [pc, #84]	; (8001824 <main+0xc0>)
 80017d0:	f003 fbca 	bl	8004f68 <osThreadNew>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <main+0xc4>)
 80017d8:	6013      	str	r3, [r2, #0]
  DeviceTaskHandle = osThreadNew(DeviceTask, NULL, &DeviceTask_attributes);
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <main+0xc8>)
 80017dc:	2100      	movs	r1, #0
 80017de:	4814      	ldr	r0, [pc, #80]	; (8001830 <main+0xcc>)
 80017e0:	f003 fbc2 	bl	8004f68 <osThreadNew>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <main+0xd0>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  myEvent02Handle = osEventFlagsNew(&myEvent02_attributes);
 80017ea:	4813      	ldr	r0, [pc, #76]	; (8001838 <main+0xd4>)
 80017ec:	f003 fdce 	bl	800538c <osEventFlagsNew>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <main+0xd8>)
 80017f4:	6013      	str	r3, [r2, #0]
  FlagEvent01Handle = osEventFlagsNew(&FlagEvent01_attributes);
 80017f6:	4812      	ldr	r0, [pc, #72]	; (8001840 <main+0xdc>)
 80017f8:	f003 fdc8 	bl	800538c <osEventFlagsNew>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <main+0xe0>)
 8001800:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001802:	f003 fb7d 	bl	8004f00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001806:	e7fe      	b.n	8001806 <main+0xa2>
 8001808:	08009bb0 	.word	0x08009bb0
 800180c:	08001f31 	.word	0x08001f31
 8001810:	20001ec4 	.word	0x20001ec4
 8001814:	08009bc0 	.word	0x08009bc0
 8001818:	080008f5 	.word	0x080008f5
 800181c:	20001de4 	.word	0x20001de4
 8001820:	08009be4 	.word	0x08009be4
 8001824:	08001369 	.word	0x08001369
 8001828:	20001f54 	.word	0x20001f54
 800182c:	08009c08 	.word	0x08009c08
 8001830:	080016cd 	.word	0x080016cd
 8001834:	20002050 	.word	0x20002050
 8001838:	08009c3c 	.word	0x08009c3c
 800183c:	20001f08 	.word	0x20001f08
 8001840:	08009c2c 	.word	0x08009c2c
 8001844:	20001de8 	.word	0x20001de8

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b096      	sub	sp, #88	; 0x58
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001852:	2228      	movs	r2, #40	; 0x28
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f007 f9e2 	bl	8008c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
 800187a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800187c:	2302      	movs	r3, #2
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001880:	2301      	movs	r3, #1
 8001882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001884:	2310      	movs	r3, #16
 8001886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001890:	4618      	mov	r0, r3
 8001892:	f001 ffc3 	bl	800381c <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800189c:	f000 fb76 	bl	8001f8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a0:	230f      	movs	r3, #15
 80018a2:	61fb      	str	r3, [r7, #28]
                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fa2e 	bl	8003d1c <HAL_RCC_ClockConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018c6:	f000 fb61 	bl	8001f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ca:	2302      	movs	r3, #2
 80018cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fbbb 	bl	8004050 <HAL_RCCEx_PeriphCLKConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80018e0:	f000 fb54 	bl	8001f8c <Error_Handler>
  }
}
 80018e4:	bf00      	nop
 80018e6:	3758      	adds	r7, #88	; 0x58
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_ADC1_Init+0x74>)
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <MX_ADC1_Init+0x78>)
 8001900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_ADC1_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_ADC1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;//ENABLE;//DISABLE;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_ADC1_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_ADC1_Init+0x74>)
 8001916:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800191a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_ADC1_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_ADC1_Init+0x74>)
 8001924:	2201      	movs	r2, #1
 8001926:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <MX_ADC1_Init+0x74>)
 800192a:	f001 f861 	bl	80029f0 <HAL_ADC_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001934:	f000 fb2a 	bl	8001f8c <Error_Handler>
  }
  /** Configure Regular Channel **/
  sConfig.Channel = ADC_CHANNEL_0;
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800193c:	2301      	movs	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_ADC1_Init+0x74>)
 800194a:	f001 fa21 	bl	8002d90 <HAL_ADC_ConfigChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001954:	f000 fb1a 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20001e74 	.word	0x20001e74
 8001964:	40012400 	.word	0x40012400

08001968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MX_TIM1_Init+0xc8>)
 8001996:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <MX_TIM1_Init+0xcc>)
 8001998:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <MX_TIM1_Init+0xc8>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <MX_TIM1_Init+0xc8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <MX_TIM1_Init+0xc8>)
 80019a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <MX_TIM1_Init+0xc8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <MX_TIM1_Init+0xc8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <MX_TIM1_Init+0xc8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019c0:	481b      	ldr	r0, [pc, #108]	; (8001a30 <MX_TIM1_Init+0xc8>)
 80019c2:	f002 fbfb 	bl	80041bc <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80019cc:	f000 fade 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	4619      	mov	r1, r3
 80019dc:	4814      	ldr	r0, [pc, #80]	; (8001a30 <MX_TIM1_Init+0xc8>)
 80019de:	f002 fc3c 	bl	800425a <HAL_TIM_ConfigClockSource>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80019e8:	f000 fad0 	bl	8001f8c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	480d      	ldr	r0, [pc, #52]	; (8001a30 <MX_TIM1_Init+0xc8>)
 80019fc:	f002 fcf1 	bl	80043e2 <HAL_TIM_SlaveConfigSynchro>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001a06:	f000 fac1 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <MX_TIM1_Init+0xc8>)
 8001a18:	f002 fec4 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001a22:	f000 fab3 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	3730      	adds	r7, #48	; 0x30
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20001f58 	.word	0x20001f58
 8001a34:	40012c00 	.word	0x40012c00

08001a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a8c:	481b      	ldr	r0, [pc, #108]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001a8e:	f002 fb95 	bl	80041bc <HAL_TIM_Base_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001a98:	f000 fa78 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aa2:	f107 0320 	add.w	r3, r7, #32
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4814      	ldr	r0, [pc, #80]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001aaa:	f002 fbd6 	bl	800425a <HAL_TIM_ConfigClockSource>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001ab4:	f000 fa6a 	bl	8001f8c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001abc:	2310      	movs	r3, #16
 8001abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001ac8:	f002 fc8b 	bl	80043e2 <HAL_TIM_SlaveConfigSynchro>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ad2:	f000 fa5b 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <MX_TIM2_Init+0xc4>)
 8001ae4:	f002 fe5e 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001aee:	f000 fa4d 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	3730      	adds	r7, #48	; 0x30
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20001fc0 	.word	0x20001fc0

08001b00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <MX_TIM3_Init+0x98>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b44:	f002 fb3a 	bl	80041bc <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b4e:	f000 fa1d 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b60:	f002 fb7b 	bl	800425a <HAL_TIM_ConfigClockSource>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b6a:	f000 fa0f 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b76:	463b      	mov	r3, r7
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <MX_TIM3_Init+0x94>)
 8001b7c:	f002 fe12 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b86:	f000 fa01 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20001e2c 	.word	0x20001e2c
 8001b98:	40000400 	.word	0x40000400

08001b9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_TIM6_Init+0x64>)
 8001bac:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <MX_TIM6_Init+0x68>)
 8001bae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_TIM6_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_TIM6_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_TIM6_Init+0x64>)
 8001bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_TIM6_Init+0x64>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_TIM6_Init+0x64>)
 8001bcc:	f002 faf6 	bl	80041bc <HAL_TIM_Base_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001bd6:	f000 f9d9 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001be2:	463b      	mov	r3, r7
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <MX_TIM6_Init+0x64>)
 8001be8:	f002 fddc 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001bf2:	f000 f9cb 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20001f0c 	.word	0x20001f0c
 8001c04:	40001000 	.word	0x40001000

08001c08 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_TIM7_Init+0x64>)
 8001c18:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <MX_TIM7_Init+0x68>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_TIM7_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_TIM7_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_TIM7_Init+0x64>)
 8001c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_TIM7_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c36:	480d      	ldr	r0, [pc, #52]	; (8001c6c <MX_TIM7_Init+0x64>)
 8001c38:	f002 fac0 	bl	80041bc <HAL_TIM_Base_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c42:	f000 f9a3 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <MX_TIM7_Init+0x64>)
 8001c54:	f002 fda6 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c5e:	f000 f995 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20002008 	.word	0x20002008
 8001c70:	40001400 	.word	0x40001400

08001c74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <MX_USART1_UART_Init+0x60>)
 8001c7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001c80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001cac:	f002 fde6 	bl	800487c <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cb6:	f000 f969 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <MX_USART1_UART_Init+0x5c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20001ec8 	.word	0x20001ec8
 8001cd4:	40013800 	.word	0x40013800

08001cd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <MX_USART3_UART_Init+0x50>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_USART3_UART_Init+0x4c>)
 8001d10:	f002 fdb4 	bl	800487c <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d1a:	f000 f937 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20001dec 	.word	0x20001dec
 8001d28:	40004800 	.word	0x40004800

08001d2c <MX_GPIO_Init>:
  * @param None
  * @retval None
  */
// static void MX_GPIO_Init(void)
void MX_GPIO_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	f107 0318 	add.w	r3, r7, #24
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a74      	ldr	r2, [pc, #464]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d58:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b69      	ldr	r3, [pc, #420]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a68      	ldr	r2, [pc, #416]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a62      	ldr	r2, [pc, #392]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da0:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a5c      	ldr	r2, [pc, #368]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <MX_GPIO_Init+0x1ec>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Relay_Wifi_Pin|Relay_Temp_Pin|Sol_SetSw_Pin|Sol_OpClSw_Pin
 8001db8:	2200      	movs	r2, #0
 8001dba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001dbe:	4857      	ldr	r0, [pc, #348]	; (8001f1c <MX_GPIO_Init+0x1f0>)
 8001dc0:	f001 fd14 	bl	80037ec <HAL_GPIO_WritePin>
                          |Sol_HandleSw_Pin|Reset485_Pin|Sol_FixPbaOn_Pin|Sol_OpClSw_Pin2
                          |Sol_TriggerOn_Pin|Sol_TriggerOff_Pin|SpareOut1_Pin|SpareOut2_Pin
                          |SpareOut3_Pin|SpareOut4_Pin|Relay_HA_Pin|Relay_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f249 114f 	movw	r1, #37199	; 0x914f
 8001dca:	4855      	ldr	r0, [pc, #340]	; (8001f20 <MX_GPIO_Init+0x1f4>)
 8001dcc:	f001 fd0e 	bl	80037ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|RS485_de_Pin|LCD_CS1_Pin
                          |LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, En_UL1_Pin|En_UL2_Pin|LCD_RS_Pin|LCD_DIR_Pin|LCD_RW_Pin, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 8001dd6:	4852      	ldr	r0, [pc, #328]	; (8001f20 <MX_GPIO_Init+0x1f4>)
 8001dd8:	f001 fd08 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Change_LowVol_Pin|En_VBAT_Pin|En_VEMG_Pin|SpareOut5_Pin
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f64f 51a7 	movw	r1, #64935	; 0xfda7
 8001de2:	4850      	ldr	r0, [pc, #320]	; (8001f24 <MX_GPIO_Init+0x1f8>)
 8001de4:	f001 fd02 	bl	80037ec <HAL_GPIO_WritePin>
                          |SpareOut6_Pin|SpareOut7_Pin|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|LCD_LED_Pin|Test_Pin
                          |GPIO_PIN_8, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, LCD_nOE_Pin, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	484d      	ldr	r0, [pc, #308]	; (8001f24 <MX_GPIO_Init+0x1f8>)
 8001dee:	f001 fcfd 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001df2:	2200      	movs	r2, #0
 8001df4:	f64f 41ff 	movw	r1, #64767	; 0xfcff
 8001df8:	484b      	ldr	r0, [pc, #300]	; (8001f28 <MX_GPIO_Init+0x1fc>)
 8001dfa:	f001 fcf7 	bl	80037ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|LCD_DB0_Pin|LCD_DB1_Pin
                          |LCD_DB2_Pin|LCD_DB3_Pin|LCD_DB4_Pin|LCD_DB5_Pin
                          |LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e04:	4849      	ldr	r0, [pc, #292]	; (8001f2c <MX_GPIO_Init+0x200>)
 8001e06:	f001 fcf1 	bl	80037ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, (LCD_RES_Pin | Uart1Tx_Pin |Uart1Rx_Pin), GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001e10:	4846      	ldr	r0, [pc, #280]	; (8001f2c <MX_GPIO_Init+0x200>)
 8001e12:	f001 fceb 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay_Wifi_Pin Relay_Temp_Pin Sol_SetSw_Pin Sol_OpClSw_Pin
                           Sol_HandleSw_Pin Reset485_Pin Sol_FixPbaOn_Pin Sol_FixPbaOff_Pin
                           Sol_TriggerOn_Pin Sol_TriggerOff_Pin SpareOut1_Pin SpareOut2_Pin
                           SpareOut3_Pin SpareOut4_Pin Relay_HA_Pin Relay_RF_Pin */
  GPIO_InitStruct.Pin = Relay_Wifi_Pin|Relay_Temp_Pin|Sol_SetSw_Pin|Sol_OpClSw_Pin
 8001e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e1a:	61bb      	str	r3, [r7, #24]
                          |Sol_HandleSw_Pin|Reset485_Pin|Sol_FixPbaOn_Pin|Sol_OpClSw_Pin2
                          |Sol_TriggerOn_Pin|Sol_TriggerOff_Pin|SpareOut1_Pin|SpareOut2_Pin
                          |SpareOut3_Pin|SpareOut4_Pin|Relay_HA_Pin|Relay_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2302      	movs	r3, #2
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e28:	f107 0318 	add.w	r3, r7, #24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	483b      	ldr	r0, [pc, #236]	; (8001f1c <MX_GPIO_Init+0x1f0>)
 8001e30:	f001 fb48 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : State_Deadbolt_Pin Spare_In1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = State_Deadbolt_Pin|Spare_In1_Pin|SW2_Pin;
 8001e34:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8001e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	4619      	mov	r1, r3
 8001e48:	4835      	ldr	r0, [pc, #212]	; (8001f20 <MX_GPIO_Init+0x1f4>)
 8001e4a:	f001 fb3b 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 PC2
                           PC3 En_UL1_Pin En_UL2_Pin RS485_de_Pin
                           LCD_DIR_Pin LCD_CS1_Pin LCD_RS_Pin LCD_RW_Pin
                           LCD_E_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001e4e:	f649 53ff 	movw	r3, #40447	; 0x9dff
 8001e52:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_3|En_UL1_Pin|En_UL2_Pin|RS485_de_Pin
                          |LCD_DIR_Pin|LCD_CS1_Pin|LCD_RS_Pin|LCD_RW_Pin
                          |LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	4619      	mov	r1, r3
 8001e66:	482e      	ldr	r0, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x1f4>)
 8001e68:	f001 fb2c 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Change_LowVol_Pin En_VBAT_Pin En_VEMG_Pin SpareOut5_Pin
                           SpareOut6_Pin SpareOut7_Pin PB13 PB14
                           PB15 LCD_LED_Pin LCD_nOE_Pin Test_Pin
                           PB8 */
  GPIO_InitStruct.Pin = Change_LowVol_Pin|En_VBAT_Pin|En_VEMG_Pin|SpareOut5_Pin
 8001e6c:	f64f 53e7 	movw	r3, #64999	; 0xfde7
 8001e70:	61bb      	str	r3, [r7, #24]
                          |SpareOut6_Pin|SpareOut7_Pin|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|LCD_LED_Pin|LCD_nOE_Pin|Test_Pin
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0318 	add.w	r3, r7, #24
 8001e82:	4619      	mov	r1, r3
 8001e84:	4827      	ldr	r0, [pc, #156]	; (8001f24 <MX_GPIO_Init+0x1f8>)
 8001e86:	f001 fb1d 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 LCD_DB0_Pin LCD_DB1_Pin
                           LCD_DB2_Pin LCD_DB3_Pin LCD_DB4_Pin LCD_DB5_Pin
                           LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001e8a:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001e8e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|LCD_DB0_Pin|LCD_DB1_Pin
                          |LCD_DB2_Pin|LCD_DB3_Pin|LCD_DB4_Pin|LCD_DB5_Pin
                          |LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9c:	f107 0318 	add.w	r3, r7, #24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4821      	ldr	r0, [pc, #132]	; (8001f28 <MX_GPIO_Init+0x1fc>)
 8001ea4:	f001 fb0e 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0318 	add.w	r3, r7, #24
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481b      	ldr	r0, [pc, #108]	; (8001f2c <MX_GPIO_Init+0x200>)
 8001ebe:	f001 fb01 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS2_Pin LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_CS2_Pin|LCD_RES_Pin | Uart1Tx_Pin;
 8001ec2:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8001ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <MX_GPIO_Init+0x200>)
 8001edc:	f001 faf2 	bl	80034c4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = Uart1Rx_Pin;
 8001ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Uart1_Port, &GPIO_InitStruct);
 8001eee:	f107 0318 	add.w	r3, r7, #24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_GPIO_Init+0x200>)
 8001ef6:	f001 fae5 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f00:	2303      	movs	r3, #3
 8001f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4806      	ldr	r0, [pc, #24]	; (8001f24 <MX_GPIO_Init+0x1f8>)
 8001f0c:	f001 fada 	bl	80034c4 <HAL_GPIO_Init>

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40011800 	.word	0x40011800
 8001f20:	40011000 	.word	0x40011000
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	40011400 	.word	0x40011400
 8001f2c:	40010800 	.word	0x40010800

08001f30 <CheckPortTimer>:
/* USER CODE BEGIN */
/* CheckPortTimer function */
// 10mmS Timer
void CheckPortTimer(void *argument)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CheckPortTimer */
  uint16_t u16TmpCnt;
  for(u16TmpCnt = 0; u16TmpCnt < SW_vMAX; u16TmpCnt++){
 8001f38:	2300      	movs	r3, #0
 8001f3a:	81fb      	strh	r3, [r7, #14]
 8001f3c:	e00b      	b.n	8001f56 <CheckPortTimer+0x26>
    ++gu16TimerInput[u16TmpCnt];
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <CheckPortTimer+0x50>)
 8001f42:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f46:	3201      	adds	r2, #1
 8001f48:	b291      	uxth	r1, r2
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <CheckPortTimer+0x50>)
 8001f4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(u16TmpCnt = 0; u16TmpCnt < SW_vMAX; u16TmpCnt++){
 8001f50:	89fb      	ldrh	r3, [r7, #14]
 8001f52:	3301      	adds	r3, #1
 8001f54:	81fb      	strh	r3, [r7, #14]
 8001f56:	89fb      	ldrh	r3, [r7, #14]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d9f0      	bls.n	8001f3e <CheckPortTimer+0xe>
  }
  ++gu16TimerJob;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <CheckPortTimer+0x54>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <CheckPortTimer+0x54>)
 8001f66:	801a      	strh	r2, [r3, #0]
  ++gu16TimerLcd;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <CheckPortTimer+0x58>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <CheckPortTimer+0x58>)
 8001f72:	801a      	strh	r2, [r3, #0]
  /* USER CODE END CheckPortTimer */
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20002098 	.word	0x20002098
 8001f84:	20001d66 	.word	0x20001d66
 8001f88:	2000195a 	.word	0x2000195a

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_MspInit+0x60>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <HAL_MspInit+0x60>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6193      	str	r3, [r2, #24]
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_MspInit+0x60>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_MspInit+0x60>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HAL_MspInit+0x60>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_MspInit+0x60>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	f06f 0001 	mvn.w	r0, #1
 8001fd6:	f001 f936 	bl	8003246 <HAL_NVIC_SetPriority>

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_MspInit+0x64>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_MspInit+0x64>)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010000 	.word	0x40010000

08002000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_ADC_MspInit+0x6c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d121      	bne.n	8002064 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_ADC_MspInit+0x70>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_ADC_MspInit+0x70>)
 8002026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_ADC_MspInit+0x70>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_ADC_MspInit+0x70>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_ADC_MspInit+0x70>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_ADC_MspInit+0x70>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002050:	23ff      	movs	r3, #255	; 0xff
 8002052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002054:	2303      	movs	r3, #3
 8002056:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4619      	mov	r1, r3
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <HAL_ADC_MspInit+0x74>)
 8002060:	f001 fa30 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40012400 	.word	0x40012400
 8002070:	40021000 	.word	0x40021000
 8002074:	40010800 	.word	0x40010800

08002078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2d      	ldr	r2, [pc, #180]	; (800213c <HAL_TIM_Base_MspInit+0xc4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10c      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 8002090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002094:	6193      	str	r3, [r2, #24]
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80020a2:	e046      	b.n	8002132 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d10c      	bne.n	80020c8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	69bb      	ldr	r3, [r7, #24]
}
 80020c6:	e034      	b.n	8002132 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_TIM_Base_MspInit+0xcc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10c      	bne.n	80020ec <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	61d3      	str	r3, [r2, #28]
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]
}
 80020ea:	e022      	b.n	8002132 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM6)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <HAL_TIM_Base_MspInit+0xd0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10c      	bne.n	8002110 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
}
 800210e:	e010      	b.n	8002132 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM7)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <HAL_TIM_Base_MspInit+0xd4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10b      	bne.n	8002132 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 8002120:	f043 0320 	orr.w	r3, r3, #32
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_TIM_Base_MspInit+0xc8>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
}
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40000400 	.word	0x40000400
 8002148:	40001000 	.word	0x40001000
 800214c:	40001400 	.word	0x40001400

08002150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a45      	ldr	r2, [pc, #276]	; (8002280 <HAL_UART_MspInit+0x130>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d13a      	bne.n	80021e6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002170:	4b44      	ldr	r3, [pc, #272]	; (8002284 <HAL_UART_MspInit+0x134>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a43      	ldr	r2, [pc, #268]	; (8002284 <HAL_UART_MspInit+0x134>)
 8002176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HAL_UART_MspInit+0x134>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <HAL_UART_MspInit+0x134>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a3d      	ldr	r2, [pc, #244]	; (8002284 <HAL_UART_MspInit+0x134>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_UART_MspInit+0x134>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4834      	ldr	r0, [pc, #208]	; (8002288 <HAL_UART_MspInit+0x138>)
 80021b6:	f001 f985 	bl	80034c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4619      	mov	r1, r3
 80021ce:	482e      	ldr	r0, [pc, #184]	; (8002288 <HAL_UART_MspInit+0x138>)
 80021d0:	f001 f978 	bl	80034c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2105      	movs	r1, #5
 80021d8:	2025      	movs	r0, #37	; 0x25
 80021da:	f001 f834 	bl	8003246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021de:	2025      	movs	r0, #37	; 0x25
 80021e0:	f001 f84d 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021e4:	e048      	b.n	8002278 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_UART_MspInit+0x13c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d143      	bne.n	8002278 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_UART_MspInit+0x134>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <HAL_UART_MspInit+0x134>)
 80021f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fa:	61d3      	str	r3, [r2, #28]
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_UART_MspInit+0x134>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_UART_MspInit+0x134>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_UART_MspInit+0x134>)
 800220e:	f043 0320 	orr.w	r3, r3, #32
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_UART_MspInit+0x134>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	4816      	ldr	r0, [pc, #88]	; (8002290 <HAL_UART_MspInit+0x140>)
 8002236:	f001 f945 	bl	80034c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800223a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4810      	ldr	r0, [pc, #64]	; (8002290 <HAL_UART_MspInit+0x140>)
 8002250:	f001 f938 	bl	80034c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_UART_MspInit+0x144>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_UART_MspInit+0x144>)
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	6053      	str	r3, [r2, #4]
}
 8002278:	bf00      	nop
 800227a:	3730      	adds	r7, #48	; 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40013800 	.word	0x40013800
 8002284:	40021000 	.word	0x40021000
 8002288:	40010800 	.word	0x40010800
 800228c:	40004800 	.word	0x40004800
 8002290:	40011400 	.word	0x40011400
 8002294:	40010000 	.word	0x40010000

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <HardFault_Handler+0x4>

080022aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <MemManage_Handler+0x4>

080022b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <BusFault_Handler+0x4>

080022b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <UsageFault_Handler+0x4>

080022bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022cc:	f000 fb74 	bl	80029b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022d0:	f005 f994 	bl	80075fc <xTaskGetSchedulerState>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022da:	f006 fa15 	bl	8008708 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ++gu16TimerUart1;
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Handler+0x28>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <SysTick_Handler+0x28>)
 80022e8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000205c 	.word	0x2000205c

080022f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt. 
  */
void USART1_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(USART1->SR & USART_SR_RXNE){
 80022f8:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <USART1_IRQHandler+0x140>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d05b      	beq.n	80023bc <USART1_IRQHandler+0xc8>
		//USART1->SR &= ~USART_SR_RXNE;
		gu8UartTmpStep = (uint8_t)(USART1->DR & (uint32_t)0x00FF);
 8002304:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <USART1_IRQHandler+0x140>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <USART1_IRQHandler+0x144>)
 800230c:	701a      	strb	r2, [r3, #0]
		if(FLAG_UART_RX1){
 800230e:	4b4b      	ldr	r3, [pc, #300]	; (800243c <USART1_IRQHandler+0x148>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d030      	beq.n	800237e <USART1_IRQHandler+0x8a>
			gu8RxData[gu8Uart1RxCnt++]=gu8UartTmpStep;
 800231c:	4b48      	ldr	r3, [pc, #288]	; (8002440 <USART1_IRQHandler+0x14c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	b2d1      	uxtb	r1, r2
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <USART1_IRQHandler+0x14c>)
 8002326:	7011      	strb	r1, [r2, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <USART1_IRQHandler+0x144>)
 800232c:	7819      	ldrb	r1, [r3, #0]
 800232e:	4b45      	ldr	r3, [pc, #276]	; (8002444 <USART1_IRQHandler+0x150>)
 8002330:	5499      	strb	r1, [r3, r2]
			if(gu8Uart1RxCnt > gu8UartRxMax){
 8002332:	4b43      	ldr	r3, [pc, #268]	; (8002440 <USART1_IRQHandler+0x14c>)
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <USART1_IRQHandler+0x154>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d90b      	bls.n	8002356 <USART1_IRQHandler+0x62>
				FLAG_UART_RX1 = 0;
 800233e:	4a3f      	ldr	r2, [pc, #252]	; (800243c <USART1_IRQHandler+0x148>)
 8002340:	7813      	ldrb	r3, [r2, #0]
 8002342:	f36f 0341 	bfc	r3, #1, #1
 8002346:	7013      	strb	r3, [r2, #0]
        osThreadFlagsSet( FunctionJobHandle, EVENT_FLAG_UART1_485); 
 8002348:	4b40      	ldr	r3, [pc, #256]	; (800244c <USART1_IRQHandler+0x158>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	4618      	mov	r0, r3
 8002350:	f002 feb4 	bl	80050bc <osThreadFlagsSet>
 8002354:	e032      	b.n	80023bc <USART1_IRQHandler+0xc8>
			}
      else if(gu8Uart1RxCnt == 3){
 8002356:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <USART1_IRQHandler+0x14c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d12e      	bne.n	80023bc <USART1_IRQHandler+0xc8>
        gu8UartRxMax = gu8RxData[2] + 4;
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <USART1_IRQHandler+0x150>)
 8002360:	789b      	ldrb	r3, [r3, #2]
 8002362:	3304      	adds	r3, #4
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b38      	ldr	r3, [pc, #224]	; (8002448 <USART1_IRQHandler+0x154>)
 8002368:	701a      	strb	r2, [r3, #0]
        if(gu8UartRxMax > (MAX_RX_DATA-1)){
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <USART1_IRQHandler+0x154>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	d924      	bls.n	80023bc <USART1_IRQHandler+0xc8>
          FLAG_UART_RX1 = 0;
 8002372:	4a32      	ldr	r2, [pc, #200]	; (800243c <USART1_IRQHandler+0x148>)
 8002374:	7813      	ldrb	r3, [r2, #0]
 8002376:	f36f 0341 	bfc	r3, #1, #1
 800237a:	7013      	strb	r3, [r2, #0]
 800237c:	e01e      	b.n	80023bc <USART1_IRQHandler+0xc8>
        }
      }
		}
		else{
			gu8RxData[0] = gu8RxData[1];
 800237e:	4b31      	ldr	r3, [pc, #196]	; (8002444 <USART1_IRQHandler+0x150>)
 8002380:	785a      	ldrb	r2, [r3, #1]
 8002382:	4b30      	ldr	r3, [pc, #192]	; (8002444 <USART1_IRQHandler+0x150>)
 8002384:	701a      	strb	r2, [r3, #0]
			gu8RxData[1] =  gu8UartTmpStep;
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <USART1_IRQHandler+0x144>)
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <USART1_IRQHandler+0x150>)
 800238c:	705a      	strb	r2, [r3, #1]
			if((gu8RxData[0] == gu8Uart1RxAddr) && (gu8RxData[1] == gu8Uart1RxFunc)){
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <USART1_IRQHandler+0x150>)
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <USART1_IRQHandler+0x15c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d110      	bne.n	80023bc <USART1_IRQHandler+0xc8>
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <USART1_IRQHandler+0x150>)
 800239c:	785a      	ldrb	r2, [r3, #1]
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <USART1_IRQHandler+0x160>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d10a      	bne.n	80023bc <USART1_IRQHandler+0xc8>
				
				FLAG_UART_RX1 = 1;
 80023a6:	4a25      	ldr	r2, [pc, #148]	; (800243c <USART1_IRQHandler+0x148>)
 80023a8:	7813      	ldrb	r3, [r2, #0]
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	7013      	strb	r3, [r2, #0]
				gu8Uart1RxCnt = 2;
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <USART1_IRQHandler+0x14c>)
 80023b2:	2202      	movs	r2, #2
 80023b4:	701a      	strb	r2, [r3, #0]
        gu8UartRxMax = MAX_RX_DATA-1;//gu8RxData[2] + 4;
 80023b6:	4b24      	ldr	r3, [pc, #144]	; (8002448 <USART1_IRQHandler+0x154>)
 80023b8:	220f      	movs	r2, #15
 80023ba:	701a      	strb	r2, [r3, #0]
				
			}
		}
	}
	if(FLAG_UART_TX1){
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <USART1_IRQHandler+0x148>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d02f      	beq.n	800242a <USART1_IRQHandler+0x136>
		if(USART1->SR & USART_SR_TXE){
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <USART1_IRQHandler+0x140>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d029      	beq.n	800242a <USART1_IRQHandler+0x136>
			// USART1->SR &= ~USART_SR_TXE;
			if(gu8Uart1TxCnt < gu8Uart1TxCntMax){
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <USART1_IRQHandler+0x164>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <USART1_IRQHandler+0x168>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d210      	bcs.n	8002404 <USART1_IRQHandler+0x110>
				USART1->DR = (uint32_t)gu8Uart1Txbuff[gu8Uart1TxCnt];
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <USART1_IRQHandler+0x164>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <USART1_IRQHandler+0x16c>)
 80023ea:	5c9a      	ldrb	r2, [r3, r2]
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <USART1_IRQHandler+0x140>)
 80023ee:	605a      	str	r2, [r3, #4]
				++gu8Uart1TxCnt;
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <USART1_IRQHandler+0x164>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <USART1_IRQHandler+0x164>)
 80023fa:	701a      	strb	r2, [r3, #0]
        gu16TimerUart1=0;
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <USART1_IRQHandler+0x170>)
 80023fe:	2200      	movs	r2, #0
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	e012      	b.n	800242a <USART1_IRQHandler+0x136>
			}
			else{
        __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <USART1_IRQHandler+0x174>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <USART1_IRQHandler+0x174>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002412:	60da      	str	r2, [r3, #12]
				FLAG_UART_TX1 = 0;
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <USART1_IRQHandler+0x148>)
 8002416:	7813      	ldrb	r3, [r2, #0]
 8002418:	f36f 0382 	bfc	r3, #2, #1
 800241c:	7013      	strb	r3, [r2, #0]
				osThreadFlagsSet( FunctionJobHandle, EVENT_FLAG_UART1_485); 
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <USART1_IRQHandler+0x158>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2101      	movs	r1, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fe49 	bl	80050bc <osThreadFlagsSet>
			}
		}
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800242a:	480f      	ldr	r0, [pc, #60]	; (8002468 <USART1_IRQHandler+0x174>)
 800242c:	f002 fa74 	bl	8004918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40013800 	.word	0x40013800
 8002438:	20002058 	.word	0x20002058
 800243c:	20002054 	.word	0x20002054
 8002440:	20002073 	.word	0x20002073
 8002444:	20002088 	.word	0x20002088
 8002448:	20002074 	.word	0x20002074
 800244c:	20001de4 	.word	0x20001de4
 8002450:	2000205e 	.word	0x2000205e
 8002454:	2000205f 	.word	0x2000205f
 8002458:	2000205a 	.word	0x2000205a
 800245c:	20002059 	.word	0x20002059
 8002460:	20002064 	.word	0x20002064
 8002464:	2000205c 	.word	0x2000205c
 8002468:	20001ec8 	.word	0x20001ec8

0800246c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <TaskInputThread>:
  * @brief  checkiing switch or logical siganl
  * @param  None
  * @retval None
-----------------------------------------------------*/
 void TaskInputThread(void)
 {
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  
  for(gu16NumOfInput = SW_1; gu16NumOfInput < SW_SPARE1 ; gu16NumOfInput++){
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <TaskInputThread+0x138>)
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e08b      	b.n	800259c <TaskInputThread+0x124>
    if(StructInputPort[gu16NumOfInput].GPIOx->IDR & StructInputPort[gu16NumOfInput].GPIO_Pin){
 8002484:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <TaskInputThread+0x138>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <TaskInputThread+0x13c>)
 800248c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <TaskInputThread+0x138>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	4947      	ldr	r1, [pc, #284]	; (80025b4 <TaskInputThread+0x13c>)
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d035      	beq.n	8002512 <TaskInputThread+0x9a>
      if(!(gu16IoBits.Val & gu16AddrBits[gu16NumOfInput])){
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <TaskInputThread+0x140>)
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <TaskInputThread+0x138>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	4b42      	ldr	r3, [pc, #264]	; (80025bc <TaskInputThread+0x144>)
 80024b2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80024b6:	4013      	ands	r3, r2
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d121      	bne.n	8002502 <TaskInputThread+0x8a>
        if(gu16TimerInput[gu16NumOfInput] > StructInputPort[gu16NumOfInput].vChatTime){
 80024be:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <TaskInputThread+0x138>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <TaskInputThread+0x148>)
 80024c6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80024ca:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <TaskInputThread+0x138>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	4939      	ldr	r1, [pc, #228]	; (80025b4 <TaskInputThread+0x13c>)
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	88db      	ldrh	r3, [r3, #6]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d95a      	bls.n	8002590 <TaskInputThread+0x118>
          gu16TimerInput[gu16NumOfInput] = 0;
 80024da:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <TaskInputThread+0x138>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <TaskInputThread+0x148>)
 80024e2:	2100      	movs	r1, #0
 80024e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          gu16IoBits.Val |= (gu16AddrBits[gu16NumOfInput]);
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <TaskInputThread+0x140>)
 80024ea:	881a      	ldrh	r2, [r3, #0]
 80024ec:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <TaskInputThread+0x138>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	4b32      	ldr	r3, [pc, #200]	; (80025bc <TaskInputThread+0x144>)
 80024f4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <TaskInputThread+0x140>)
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	e046      	b.n	8002590 <TaskInputThread+0x118>
        }
      }
      else{
        gu16TimerInput[gu16NumOfInput] = 0;
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <TaskInputThread+0x138>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <TaskInputThread+0x148>)
 800250a:	2100      	movs	r1, #0
 800250c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002510:	e03e      	b.n	8002590 <TaskInputThread+0x118>
      }
    }
    else{
      if(gu16IoBits.Val & gu16AddrBits[gu16NumOfInput]){
 8002512:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <TaskInputThread+0x140>)
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <TaskInputThread+0x138>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <TaskInputThread+0x144>)
 800251e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002522:	4013      	ands	r3, r2
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d02b      	beq.n	8002582 <TaskInputThread+0x10a>
        if(gu16TimerInput[gu16NumOfInput] > StructInputPort[gu16NumOfInput].vChatTime){
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <TaskInputThread+0x138>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <TaskInputThread+0x148>)
 8002532:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <TaskInputThread+0x138>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	491e      	ldr	r1, [pc, #120]	; (80025b4 <TaskInputThread+0x13c>)
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	88db      	ldrh	r3, [r3, #6]
 8002542:	429a      	cmp	r2, r3
 8002544:	d924      	bls.n	8002590 <TaskInputThread+0x118>
          gu16TimerInput[gu16NumOfInput] = 0;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <TaskInputThread+0x138>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <TaskInputThread+0x148>)
 800254e:	2100      	movs	r1, #0
 8002550:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          gu16IoBits.Val &= ~(gu16AddrBits[gu16NumOfInput]);
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <TaskInputThread+0x140>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b21a      	sxth	r2, r3
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <TaskInputThread+0x138>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <TaskInputThread+0x144>)
 8002562:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002566:	b21b      	sxth	r3, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	b21b      	sxth	r3, r3
 800256c:	4013      	ands	r3, r2
 800256e:	b21b      	sxth	r3, r3
 8002570:	b29a      	uxth	r2, r3
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <TaskInputThread+0x140>)
 8002574:	801a      	strh	r2, [r3, #0]
          FLAG_EVT_INPUT = 1;
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <TaskInputThread+0x14c>)
 8002578:	7813      	ldrb	r3, [r2, #0]
 800257a:	f043 0308 	orr.w	r3, r3, #8
 800257e:	7013      	strb	r3, [r2, #0]
 8002580:	e006      	b.n	8002590 <TaskInputThread+0x118>
        }
      }
      else{
        gu16TimerInput[gu16NumOfInput] = 0;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <TaskInputThread+0x138>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <TaskInputThread+0x148>)
 800258a:	2100      	movs	r1, #0
 800258c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(gu16NumOfInput = SW_1; gu16NumOfInput < SW_SPARE1 ; gu16NumOfInput++){
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <TaskInputThread+0x138>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <TaskInputThread+0x138>)
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <TaskInputThread+0x138>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	f67f af6f 	bls.w	8002484 <TaskInputThread+0xc>
      }
    }
  }
 }
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	200020e0 	.word	0x200020e0
 80025b4:	20000004 	.word	0x20000004
 80025b8:	200020e4 	.word	0x200020e4
 80025bc:	2000001c 	.word	0x2000001c
 80025c0:	20002098 	.word	0x20002098
 80025c4:	20002054 	.word	0x20002054

080025c8 <ResetJigIoPin>:
  * @brief  Reset Jig Port Pin
  * @param  uint8_t gu8Adc1Channel
  * @retval None
-----------------------------------------------------*/
void ResetJigIoPin(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  clr_fix_pba();
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d2:	480b      	ldr	r0, [pc, #44]	; (8002600 <ResetJigIoPin+0x38>)
 80025d4:	f001 f90a 	bl	80037ec <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Relay_Wifi_Pin|Relay_Temp_Pin|Sol_SetSw_Pin|Sol_OpClSw_Pin
 80025d8:	2200      	movs	r2, #0
 80025da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025de:	4808      	ldr	r0, [pc, #32]	; (8002600 <ResetJigIoPin+0x38>)
 80025e0:	f001 f904 	bl	80037ec <HAL_GPIO_WritePin>
                          |Sol_HandleSw_Pin|Reset485_Pin|Sol_FixPbaOn_Pin|Sol_OpClSw_Pin2
                          |Sol_TriggerOn_Pin|Sol_TriggerOff_Pin|SpareOut1_Pin|SpareOut2_Pin
                          |SpareOut3_Pin|SpareOut4_Pin|Relay_HA_Pin|Relay_RF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80025e4:	2200      	movs	r2, #0
 80025e6:	f248 014f 	movw	r1, #32847	; 0x804f
 80025ea:	4806      	ldr	r0, [pc, #24]	; (8002604 <ResetJigIoPin+0x3c>)
 80025ec:	f001 f8fe 	bl	80037ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|RS485_de_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Change_LowVol_Pin|En_VBAT_Pin|En_VEMG_Pin|SpareOut5_Pin
 80025f0:	2200      	movs	r2, #0
 80025f2:	f64f 5187 	movw	r1, #64903	; 0xfd87
 80025f6:	4804      	ldr	r0, [pc, #16]	; (8002608 <ResetJigIoPin+0x40>)
 80025f8:	f001 f8f8 	bl	80037ec <HAL_GPIO_WritePin>
                          |SpareOut6_Pin|SpareOut7_Pin|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|Test_Pin
                          |GPIO_PIN_8, GPIO_PIN_RESET);

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40011800 	.word	0x40011800
 8002604:	40011000 	.word	0x40011000
 8002608:	40010c00 	.word	0x40010c00

0800260c <ResetADCData>:
  * @brief  Reset ADC Control data
  * @param  uint8_t gu8Adc1Channel
  * @retval None
-----------------------------------------------------*/
void ResetADCData(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  gu8Adc1Data = 0;
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <ResetADCData+0x24>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
  gu8Adc1Channel = 0;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <ResetADCData+0x28>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
  gu8Adc1TmpCnt = 0;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <ResetADCData+0x2c>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
  gu8TaskAdc1 = TASK_ADC_STEP_SET_START;
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <ResetADCData+0x30>)
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	20002228 	.word	0x20002228
 8002634:	200020e3 	.word	0x200020e3
 8002638:	20002229 	.word	0x20002229
 800263c:	200020e2 	.word	0x200020e2

08002640 <CalculateAverageForAdc>:
  * @brief  Calculate average
  * @param  None
  * @retval None
-----------------------------------------------------*/
uint32_t CalculateAverageForAdc(uint8_t u8AdcNum)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  uint16_t u16TmpCnt;//, u16TmpBuff[MAX_ADC_CAL_AVG];
  uint32_t u32ReturnValue=0;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
  if(u8AdcNum >= ADC_DATA_MAX){
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b0f      	cmp	r3, #15
 8002652:	d901      	bls.n	8002658 <CalculateAverageForAdc+0x18>
    return 0;
 8002654:	2300      	movs	r3, #0
 8002656:	e019      	b.n	800268c <CalculateAverageForAdc+0x4c>
  }
  for(u16TmpCnt=0; u16TmpCnt < MAX_ADC_CAL_AVG; u16TmpCnt++){
 8002658:	2300      	movs	r3, #0
 800265a:	81fb      	strh	r3, [r7, #14]
 800265c:	e00e      	b.n	800267c <CalculateAverageForAdc+0x3c>
    // u16TmpBuff[u16TmpCnt] = (uint16_t)(gu32Adc1Tmp[u8AdcNum][u16TmpCnt] >> 8);
    // u32ReturnValue += (uint32_t)(u16TmpBuff[u16TmpCnt]);
    u32ReturnValue += gu32Adc1Tmp[u8AdcNum][u16TmpCnt];
 800265e:	79fa      	ldrb	r2, [r7, #7]
 8002660:	89f9      	ldrh	r1, [r7, #14]
 8002662:	480d      	ldr	r0, [pc, #52]	; (8002698 <CalculateAverageForAdc+0x58>)
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	440b      	add	r3, r1
 800266c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	4413      	add	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
  for(u16TmpCnt=0; u16TmpCnt < MAX_ADC_CAL_AVG; u16TmpCnt++){
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	3301      	adds	r3, #1
 800267a:	81fb      	strh	r3, [r7, #14]
 800267c:	89fb      	ldrh	r3, [r7, #14]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d9ed      	bls.n	800265e <CalculateAverageForAdc+0x1e>
  } 
  return (u32ReturnValue/MAX_ADC_CAL_AVG);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4a05      	ldr	r2, [pc, #20]	; (800269c <CalculateAverageForAdc+0x5c>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	089b      	lsrs	r3, r3, #2
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	200020e8 	.word	0x200020e8
 800269c:	cccccccd 	.word	0xcccccccd

080026a0 <ChangeAdc1Channel>:
  * @brief  Configure Regular Channel
  * @param  uint8_t gu8Adc1Channel
  * @retval None
-----------------------------------------------------*/
uint16_t ChangeAdc1Channel(uint8_t u8ChannelNum)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]

  sConfig.Channel = (uint32_t)u8ChannelNum;
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	4619      	mov	r1, r3
 80026c8:	4806      	ldr	r0, [pc, #24]	; (80026e4 <ChangeAdc1Channel+0x44>)
 80026ca:	f000 fb61 	bl	8002d90 <HAL_ADC_ConfigChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <ChangeAdc1Channel+0x38>
  {
    return 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e000      	b.n	80026da <ChangeAdc1Channel+0x3a>
  }
  return 1;
 80026d8:	2301      	movs	r3, #1
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20001e74 	.word	0x20001e74

080026e8 <TaskAdc1Thread>:
  * @brief  checkiing analog siganal
  * @param  None
  * @retval None
-----------------------------------------------------*/
void TaskAdc1Thread(void)
{
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  switch(gu8TaskAdc1)
 80026ec:	4b5e      	ldr	r3, [pc, #376]	; (8002868 <TaskAdc1Thread+0x180>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f000 80a7 	beq.w	8002844 <TaskAdc1Thread+0x15c>
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	f300 80ac 	bgt.w	8002854 <TaskAdc1Thread+0x16c>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <TaskAdc1Thread+0x1e>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d039      	beq.n	8002778 <TaskAdc1Thread+0x90>
      ResetADCData();
      break;
    }
    default:
    {
      break;
 8002704:	e0a6      	b.n	8002854 <TaskAdc1Thread+0x16c>
      if(gu8Adc1Data < ADC_SWITCH_UL2){
 8002706:	4b59      	ldr	r3, [pc, #356]	; (800286c <TaskAdc1Thread+0x184>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b07      	cmp	r3, #7
 800270c:	d80e      	bhi.n	800272c <TaskAdc1Thread+0x44>
        HAL_GPIO_WritePin(En_UL1_GPIO_Port, En_UL1_Pin, GPIO_PIN_SET);
 800270e:	2201      	movs	r2, #1
 8002710:	2110      	movs	r1, #16
 8002712:	4857      	ldr	r0, [pc, #348]	; (8002870 <TaskAdc1Thread+0x188>)
 8002714:	f001 f86a 	bl	80037ec <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(En_UL2_GPIO_Port, En_UL2_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2120      	movs	r1, #32
 800271c:	4854      	ldr	r0, [pc, #336]	; (8002870 <TaskAdc1Thread+0x188>)
 800271e:	f001 f865 	bl	80037ec <HAL_GPIO_WritePin>
        gu8Adc1Channel = gu8Adc1Data;
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <TaskAdc1Thread+0x184>)
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	4b53      	ldr	r3, [pc, #332]	; (8002874 <TaskAdc1Thread+0x18c>)
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e00f      	b.n	800274c <TaskAdc1Thread+0x64>
        HAL_GPIO_WritePin(En_UL2_GPIO_Port, En_UL2_Pin, GPIO_PIN_SET);
 800272c:	2201      	movs	r2, #1
 800272e:	2120      	movs	r1, #32
 8002730:	484f      	ldr	r0, [pc, #316]	; (8002870 <TaskAdc1Thread+0x188>)
 8002732:	f001 f85b 	bl	80037ec <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(En_UL1_GPIO_Port, En_UL1_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	2110      	movs	r1, #16
 800273a:	484d      	ldr	r0, [pc, #308]	; (8002870 <TaskAdc1Thread+0x188>)
 800273c:	f001 f856 	bl	80037ec <HAL_GPIO_WritePin>
        gu8Adc1Channel = gu8Adc1Data - ADC_SWITCH_UL2;
 8002740:	4b4a      	ldr	r3, [pc, #296]	; (800286c <TaskAdc1Thread+0x184>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	3b08      	subs	r3, #8
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <TaskAdc1Thread+0x18c>)
 800274a:	701a      	strb	r2, [r3, #0]
      if(ChangeAdc1Channel(gu8Adc1Channel)){
 800274c:	4b49      	ldr	r3, [pc, #292]	; (8002874 <TaskAdc1Thread+0x18c>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ffa5 	bl	80026a0 <ChangeAdc1Channel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <TaskAdc1Thread+0x88>
        HAL_ADC_Start(&hadc1);
 800275c:	4846      	ldr	r0, [pc, #280]	; (8002878 <TaskAdc1Thread+0x190>)
 800275e:	f000 fa31 	bl	8002bc4 <HAL_ADC_Start>
        ++gu8TaskAdc1;
 8002762:	4b41      	ldr	r3, [pc, #260]	; (8002868 <TaskAdc1Thread+0x180>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <TaskAdc1Thread+0x180>)
 800276c:	701a      	strb	r2, [r3, #0]
      break;
 800276e:	e078      	b.n	8002862 <TaskAdc1Thread+0x17a>
        gu8TaskAdc1 = TASK_ADC_STEP_INITIAL;
 8002770:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <TaskAdc1Thread+0x180>)
 8002772:	2202      	movs	r2, #2
 8002774:	701a      	strb	r2, [r3, #0]
      break;
 8002776:	e074      	b.n	8002862 <TaskAdc1Thread+0x17a>
      if(HAL_IS_BIT_CLR(hadc1.Instance->SR, ADC_FLAG_EOC)){
 8002778:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <TaskAdc1Thread+0x190>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d068      	beq.n	8002858 <TaskAdc1Thread+0x170>
      HAL_ADC_Stop(&hadc1);
 8002786:	483c      	ldr	r0, [pc, #240]	; (8002878 <TaskAdc1Thread+0x190>)
 8002788:	f000 faca 	bl	8002d20 <HAL_ADC_Stop>
      gu8TaskAdc1 = TASK_ADC_STEP_SET_START;
 800278c:	4b36      	ldr	r3, [pc, #216]	; (8002868 <TaskAdc1Thread+0x180>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
      if(gu8Adc1TmpCnt >= MAX_ADC_CAL_AVG){
 8002792:	4b3a      	ldr	r3, [pc, #232]	; (800287c <TaskAdc1Thread+0x194>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b04      	cmp	r3, #4
 8002798:	d903      	bls.n	80027a2 <TaskAdc1Thread+0xba>
        gu8Adc1TmpCnt = 0;
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <TaskAdc1Thread+0x194>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
        break;
 80027a0:	e05f      	b.n	8002862 <TaskAdc1Thread+0x17a>
      if(gu8Adc1Data >= ADC_DATA_MAX){
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <TaskAdc1Thread+0x184>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	d903      	bls.n	80027b2 <TaskAdc1Thread+0xca>
        gu8Adc1Data = 0;
 80027aa:	4b30      	ldr	r3, [pc, #192]	; (800286c <TaskAdc1Thread+0x184>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
        break;
 80027b0:	e057      	b.n	8002862 <TaskAdc1Thread+0x17a>
      gu32Adc1Tmp[gu8Adc1Data][gu8Adc1TmpCnt] = HAL_ADC_GetValue(&hadc1);
 80027b2:	4b2e      	ldr	r3, [pc, #184]	; (800286c <TaskAdc1Thread+0x184>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461c      	mov	r4, r3
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <TaskAdc1Thread+0x194>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	461d      	mov	r5, r3
 80027be:	482e      	ldr	r0, [pc, #184]	; (8002878 <TaskAdc1Thread+0x190>)
 80027c0:	f000 fada 	bl	8002d78 <HAL_ADC_GetValue>
 80027c4:	4602      	mov	r2, r0
 80027c6:	492e      	ldr	r1, [pc, #184]	; (8002880 <TaskAdc1Thread+0x198>)
 80027c8:	4623      	mov	r3, r4
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4423      	add	r3, r4
 80027ce:	442b      	add	r3, r5
 80027d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      gu32Adc1Data[gu8Adc1Data] = CalculateAverageForAdc(gu8Adc1Data);
 80027d4:	4b25      	ldr	r3, [pc, #148]	; (800286c <TaskAdc1Thread+0x184>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4a24      	ldr	r2, [pc, #144]	; (800286c <TaskAdc1Thread+0x184>)
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	4614      	mov	r4, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff2e 	bl	8002640 <CalculateAverageForAdc>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a27      	ldr	r2, [pc, #156]	; (8002884 <TaskAdc1Thread+0x19c>)
 80027e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      if(++gu8Adc1Data < ADC_DATA_MAX){
 80027ec:	4b1f      	ldr	r3, [pc, #124]	; (800286c <TaskAdc1Thread+0x184>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <TaskAdc1Thread+0x184>)
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <TaskAdc1Thread+0x184>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b0f      	cmp	r3, #15
 80027fe:	d92d      	bls.n	800285c <TaskAdc1Thread+0x174>
      gu8Adc1Data = 0;
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <TaskAdc1Thread+0x184>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
      if(FLAG_ADC_START){
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <TaskAdc1Thread+0x1a0>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <TaskAdc1Thread+0x136>
        FLAG_ADC_FINISH = 1;
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <TaskAdc1Thread+0x1a0>)
 8002816:	7813      	ldrb	r3, [r2, #0]
 8002818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800281c:	7013      	strb	r3, [r2, #0]
      FLAG_ADC_START = 1;
 800281e:	4a1a      	ldr	r2, [pc, #104]	; (8002888 <TaskAdc1Thread+0x1a0>)
 8002820:	7813      	ldrb	r3, [r2, #0]
 8002822:	f043 0320 	orr.w	r3, r3, #32
 8002826:	7013      	strb	r3, [r2, #0]
      if(++gu8Adc1TmpCnt < MAX_ADC_CAL_AVG){
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <TaskAdc1Thread+0x194>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <TaskAdc1Thread+0x194>)
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <TaskAdc1Thread+0x194>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d911      	bls.n	8002860 <TaskAdc1Thread+0x178>
      gu8Adc1TmpCnt = 0;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <TaskAdc1Thread+0x194>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
      break;
 8002842:	e00e      	b.n	8002862 <TaskAdc1Thread+0x17a>
      MX_ADC1_Init();
 8002844:	f7ff f852 	bl	80018ec <MX_ADC1_Init>
      HAL_ADC_MspInit(&hadc1);
 8002848:	480b      	ldr	r0, [pc, #44]	; (8002878 <TaskAdc1Thread+0x190>)
 800284a:	f7ff fbd9 	bl	8002000 <HAL_ADC_MspInit>
      ResetADCData();
 800284e:	f7ff fedd 	bl	800260c <ResetADCData>
      break;
 8002852:	e006      	b.n	8002862 <TaskAdc1Thread+0x17a>
      break;
 8002854:	bf00      	nop
 8002856:	e004      	b.n	8002862 <TaskAdc1Thread+0x17a>
        break;
 8002858:	bf00      	nop
 800285a:	e002      	b.n	8002862 <TaskAdc1Thread+0x17a>
        break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <TaskAdc1Thread+0x17a>
        break;
 8002860:	bf00      	nop
    }
  }
}
 8002862:	bf00      	nop
 8002864:	bdb0      	pop	{r4, r5, r7, pc}
 8002866:	bf00      	nop
 8002868:	200020e2 	.word	0x200020e2
 800286c:	20002228 	.word	0x20002228
 8002870:	40011000 	.word	0x40011000
 8002874:	200020e3 	.word	0x200020e3
 8002878:	20001e74 	.word	0x20001e74
 800287c:	20002229 	.word	0x20002229
 8002880:	200020e8 	.word	0x200020e8
 8002884:	200020a0 	.word	0x200020a0
 8002888:	20002054 	.word	0x20002054

0800288c <CheckKeyLed>:

uint16_t CheckKeyLed(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
  uint16_t u16KeyLedBits=0;
 8002892:	2300      	movs	r3, #0
 8002894:	80fb      	strh	r3, [r7, #6]
  uint16_t u16PositionBit, u16TmpCnt;

  for(u16TmpCnt = 0; u16TmpCnt < ADC_DATA_MAX; u16TmpCnt++){
 8002896:	2300      	movs	r3, #0
 8002898:	80bb      	strh	r3, [r7, #4]
 800289a:	e012      	b.n	80028c2 <CheckKeyLed+0x36>
    if(gu32Adc1Data[u16TmpCnt] > 500){        // gu32Adc1Data -> READ한 LED 값을 번지에 저장
 800289c:	88bb      	ldrh	r3, [r7, #4]
 800289e:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <CheckKeyLed+0x50>)
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028a8:	d908      	bls.n	80028bc <CheckKeyLed+0x30>
      u16PositionBit = (0x0001 << u16TmpCnt);
 80028aa:	88bb      	ldrh	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	807b      	strh	r3, [r7, #2]
      u16KeyLedBits |= u16PositionBit;
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	80fb      	strh	r3, [r7, #6]
  for(u16TmpCnt = 0; u16TmpCnt < ADC_DATA_MAX; u16TmpCnt++){
 80028bc:	88bb      	ldrh	r3, [r7, #4]
 80028be:	3301      	adds	r3, #1
 80028c0:	80bb      	strh	r3, [r7, #4]
 80028c2:	88bb      	ldrh	r3, [r7, #4]
 80028c4:	2b0f      	cmp	r3, #15
 80028c6:	d9e9      	bls.n	800289c <CheckKeyLed+0x10>
    }
  }
  u16KeyLedBits &= ~(KEY_LED_CD | KEY_LED_LD);
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028ce:	80fb      	strh	r3, [r7, #6]
  return u16KeyLedBits;
 80028d0:	88fb      	ldrh	r3, [r7, #6]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	200020a0 	.word	0x200020a0

080028e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80028e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80028e2:	e003      	b.n	80028ec <LoopCopyDataInit>

080028e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80028e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80028e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80028ea:	3104      	adds	r1, #4

080028ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80028ec:	480a      	ldr	r0, [pc, #40]	; (8002918 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80028f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80028f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028f4:	d3f6      	bcc.n	80028e4 <CopyDataInit>
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028f8:	e002      	b.n	8002900 <LoopFillZerobss>

080028fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028fc:	f842 3b04 	str.w	r3, [r2], #4

08002900 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002902:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002904:	d3f9      	bcc.n	80028fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002906:	f7ff fdb1 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290a:	f006 f957 	bl	8008bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290e:	f7fe ff29 	bl	8001764 <main>
  bx lr
 8002912:	4770      	bx	lr
  ldr r3, =_sidata
 8002914:	08009c6c 	.word	0x08009c6c
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800291c:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 8002920:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 8002924:	20002270 	.word	0x20002270

08002928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_2_IRQHandler>
	...

0800292c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_Init+0x28>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_Init+0x28>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 fc77 	bl	8003230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	200f      	movs	r0, #15
 8002944:	f000 f808 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f7ff fb26 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_InitTick+0x54>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_InitTick+0x58>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fc8f 	bl	800329a <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f000 fc57 	bl	8003246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <HAL_InitTick+0x5c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000028 	.word	0x20000028
 80029b4:	20000024 	.word	0x20000024

080029b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_IncTick+0x1c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_IncTick+0x20>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <HAL_IncTick+0x20>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000028 	.word	0x20000028
 80029d8:	2000222c 	.word	0x2000222c

080029dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return uwTick;
 80029e0:	4b02      	ldr	r3, [pc, #8]	; (80029ec <HAL_GetTick+0x10>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	2000222c 	.word	0x2000222c

080029f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0ce      	b.n	8002bb0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fae6 	bl	8002000 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 faf5 	bl	8003024 <ADC_ConversionStop_Disable>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 80a9 	bne.w	8002b9e <HAL_ADC_Init+0x1ae>
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 80a5 	bne.w	8002b9e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a5c:	f023 0302 	bic.w	r3, r3, #2
 8002a60:	f043 0202 	orr.w	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4951      	ldr	r1, [pc, #324]	; (8002bb8 <HAL_ADC_Init+0x1c8>)
 8002a72:	428b      	cmp	r3, r1
 8002a74:	d10a      	bne.n	8002a8c <HAL_ADC_Init+0x9c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a7e:	d002      	beq.n	8002a86 <HAL_ADC_Init+0x96>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	e004      	b.n	8002a90 <HAL_ADC_Init+0xa0>
 8002a86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a8a:	e001      	b.n	8002a90 <HAL_ADC_Init+0xa0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7b1b      	ldrb	r3, [r3, #12]
 8002a96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa8:	d003      	beq.n	8002ab2 <HAL_ADC_Init+0xc2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_ADC_Init+0xc8>
 8002ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab6:	e000      	b.n	8002aba <HAL_ADC_Init+0xca>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7d1b      	ldrb	r3, [r3, #20]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d119      	bne.n	8002afc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7b1b      	ldrb	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	035a      	lsls	r2, r3, #13
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e00b      	b.n	8002afc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <HAL_ADC_Init+0x1cc>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b2c:	d003      	beq.n	8002b36 <HAL_ADC_Init+0x146>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d104      	bne.n	8002b40 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	051b      	lsls	r3, r3, #20
 8002b3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_ADC_Init+0x1d0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10b      	bne.n	8002b7c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b7a:	e018      	b.n	8002bae <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	f023 0312 	bic.w	r3, r3, #18
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b9c:	e007      	b.n	8002bae <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	f043 0210 	orr.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40013c00 	.word	0x40013c00
 8002bbc:	ffe1f7fd 	.word	0xffe1f7fd
 8002bc0:	ff1f0efe 	.word	0xff1f0efe

08002bc4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_Start+0x1a>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e098      	b.n	8002d10 <HAL_ADC_Start+0x14c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f9ca 	bl	8002f80 <ADC_Enable>
 8002bec:	4603      	mov	r3, r0
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 8087 	bne.w	8002d06 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a41      	ldr	r2, [pc, #260]	; (8002d18 <HAL_ADC_Start+0x154>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d105      	bne.n	8002c22 <HAL_ADC_Start+0x5e>
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_ADC_Start+0x158>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d115      	bne.n	8002c4e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d026      	beq.n	8002c8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c4c:	e01d      	b.n	8002c8a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <HAL_ADC_Start+0x158>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_ADC_Start+0xaa>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <HAL_ADC_Start+0x154>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10d      	bne.n	8002c8a <HAL_ADC_Start+0xc6>
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_ADC_Start+0x158>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f023 0206 	bic.w	r2, r3, #6
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ca2:	e002      	b.n	8002caa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f06f 0202 	mvn.w	r2, #2
 8002cba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cc6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cca:	d113      	bne.n	8002cf4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cd0:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <HAL_ADC_Start+0x154>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d105      	bne.n	8002ce2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <HAL_ADC_Start+0x158>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	e00c      	b.n	8002d0e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e003      	b.n	8002d0e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40012800 	.word	0x40012800
 8002d1c:	40012400 	.word	0x40012400

08002d20 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_Stop+0x1a>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e01a      	b.n	8002d70 <HAL_ADC_Stop+0x50>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f96e 	bl	8003024 <ADC_ConversionStop_Disable>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x20>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0dc      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x1da>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b06      	cmp	r3, #6
 8002dbe:	d81c      	bhi.n	8002dfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b05      	subs	r3, #5
 8002dd2:	221f      	movs	r2, #31
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	4019      	ands	r1, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	3b05      	subs	r3, #5
 8002dec:	fa00 f203 	lsl.w	r2, r0, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	635a      	str	r2, [r3, #52]	; 0x34
 8002df8:	e03c      	b.n	8002e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d81c      	bhi.n	8002e3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b23      	subs	r3, #35	; 0x23
 8002e14:	221f      	movs	r2, #31
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	4019      	ands	r1, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b23      	subs	r3, #35	; 0x23
 8002e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3a:	e01b      	b.n	8002e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b41      	subs	r3, #65	; 0x41
 8002e4e:	221f      	movs	r2, #31
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	4019      	ands	r1, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	3b41      	subs	r3, #65	; 0x41
 8002e68:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b09      	cmp	r3, #9
 8002e7a:	d91c      	bls.n	8002eb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68d9      	ldr	r1, [r3, #12]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b1e      	subs	r3, #30
 8002e8e:	2207      	movs	r2, #7
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	4019      	ands	r1, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6898      	ldr	r0, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b1e      	subs	r3, #30
 8002ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	e019      	b.n	8002eea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6919      	ldr	r1, [r3, #16]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4019      	ands	r1, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6898      	ldr	r0, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d003      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ef6:	2b11      	cmp	r3, #17
 8002ef8:	d132      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d125      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d126      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f20:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d11a      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <HAL_ADC_ConfigChannel+0x1ec>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	0c9a      	lsrs	r2, r3, #18
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f40:	e002      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x1b2>
 8002f4e:	e007      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40012400 	.word	0x40012400
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	431bde83 	.word	0x431bde83

08002f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d039      	beq.n	8003012 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <ADC_Enable+0x9c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <ADC_Enable+0xa0>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	0c9b      	lsrs	r3, r3, #18
 8002fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fbc:	e002      	b.n	8002fc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f9      	bne.n	8002fbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fca:	f7ff fd07 	bl	80029dc <HAL_GetTick>
 8002fce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fd0:	e018      	b.n	8003004 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd2:	f7ff fd03 	bl	80029dc <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d911      	bls.n	8003004 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f043 0210 	orr.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d1df      	bne.n	8002fd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000000 	.word	0x20000000
 8003020:	431bde83 	.word	0x431bde83

08003024 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d127      	bne.n	800308e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800304e:	f7ff fcc5 	bl	80029dc <HAL_GetTick>
 8003052:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003054:	e014      	b.n	8003080 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003056:	f7ff fcc1 	bl	80029dc <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d90d      	bls.n	8003080 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d0e3      	beq.n	8003056 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ca:	4a04      	ldr	r2, [pc, #16]	; (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	60d3      	str	r3, [r2, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <__NVIC_GetPriorityGrouping+0x18>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0307 	and.w	r3, r3, #7
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	db0b      	blt.n	8003126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	4906      	ldr	r1, [pc, #24]	; (8003130 <__NVIC_EnableIRQ+0x34>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	2001      	movs	r0, #1
 800311e:	fa00 f202 	lsl.w	r2, r0, r2
 8003122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	; (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031fc:	d301      	bcc.n	8003202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fe:	2301      	movs	r3, #1
 8003200:	e00f      	b.n	8003222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <SysTick_Config+0x40>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320a:	210f      	movs	r1, #15
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f7ff ff90 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <SysTick_Config+0x40>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <SysTick_Config+0x40>)
 800321c:	2207      	movs	r2, #7
 800321e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e000e010 	.word	0xe000e010

08003230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff2d 	bl	8003098 <__NVIC_SetPriorityGrouping>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003258:	f7ff ff42 	bl	80030e0 <__NVIC_GetPriorityGrouping>
 800325c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	6978      	ldr	r0, [r7, #20]
 8003264:	f7ff ff90 	bl	8003188 <NVIC_EncodePriority>
 8003268:	4602      	mov	r2, r0
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff5f 	bl	8003134 <__NVIC_SetPriority>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff35 	bl	80030fc <__NVIC_EnableIRQ>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ffa2 	bl	80031ec <SysTick_Config>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d005      	beq.n	80032d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2204      	movs	r2, #4
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e0d6      	b.n	8003484 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 020e 	bic.w	r2, r2, #14
 80032e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b64      	ldr	r3, [pc, #400]	; (8003490 <HAL_DMA_Abort_IT+0x1dc>)
 80032fe:	429a      	cmp	r2, r3
 8003300:	d958      	bls.n	80033b4 <HAL_DMA_Abort_IT+0x100>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a63      	ldr	r2, [pc, #396]	; (8003494 <HAL_DMA_Abort_IT+0x1e0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d04f      	beq.n	80033ac <HAL_DMA_Abort_IT+0xf8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a61      	ldr	r2, [pc, #388]	; (8003498 <HAL_DMA_Abort_IT+0x1e4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d048      	beq.n	80033a8 <HAL_DMA_Abort_IT+0xf4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a60      	ldr	r2, [pc, #384]	; (800349c <HAL_DMA_Abort_IT+0x1e8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d040      	beq.n	80033a2 <HAL_DMA_Abort_IT+0xee>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5e      	ldr	r2, [pc, #376]	; (80034a0 <HAL_DMA_Abort_IT+0x1ec>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d038      	beq.n	800339c <HAL_DMA_Abort_IT+0xe8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5d      	ldr	r2, [pc, #372]	; (80034a4 <HAL_DMA_Abort_IT+0x1f0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d030      	beq.n	8003396 <HAL_DMA_Abort_IT+0xe2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5b      	ldr	r2, [pc, #364]	; (80034a8 <HAL_DMA_Abort_IT+0x1f4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d028      	beq.n	8003390 <HAL_DMA_Abort_IT+0xdc>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a53      	ldr	r2, [pc, #332]	; (8003490 <HAL_DMA_Abort_IT+0x1dc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d020      	beq.n	800338a <HAL_DMA_Abort_IT+0xd6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a57      	ldr	r2, [pc, #348]	; (80034ac <HAL_DMA_Abort_IT+0x1f8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d019      	beq.n	8003386 <HAL_DMA_Abort_IT+0xd2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a56      	ldr	r2, [pc, #344]	; (80034b0 <HAL_DMA_Abort_IT+0x1fc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d012      	beq.n	8003382 <HAL_DMA_Abort_IT+0xce>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a54      	ldr	r2, [pc, #336]	; (80034b4 <HAL_DMA_Abort_IT+0x200>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00a      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a53      	ldr	r2, [pc, #332]	; (80034b8 <HAL_DMA_Abort_IT+0x204>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d102      	bne.n	8003376 <HAL_DMA_Abort_IT+0xc2>
 8003370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003374:	e01b      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 8003376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800337a:	e018      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 800337c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003380:	e015      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 8003382:	2310      	movs	r3, #16
 8003384:	e013      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 8003386:	2301      	movs	r3, #1
 8003388:	e011      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 800338a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800338e:	e00e      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 8003390:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003394:	e00b      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 8003396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339a:	e008      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 800339c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a0:	e005      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 80033a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033a6:	e002      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 80033a8:	2310      	movs	r3, #16
 80033aa:	e000      	b.n	80033ae <HAL_DMA_Abort_IT+0xfa>
 80033ac:	2301      	movs	r3, #1
 80033ae:	4a43      	ldr	r2, [pc, #268]	; (80034bc <HAL_DMA_Abort_IT+0x208>)
 80033b0:	6053      	str	r3, [r2, #4]
 80033b2:	e057      	b.n	8003464 <HAL_DMA_Abort_IT+0x1b0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a36      	ldr	r2, [pc, #216]	; (8003494 <HAL_DMA_Abort_IT+0x1e0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d04f      	beq.n	800345e <HAL_DMA_Abort_IT+0x1aa>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a35      	ldr	r2, [pc, #212]	; (8003498 <HAL_DMA_Abort_IT+0x1e4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d048      	beq.n	800345a <HAL_DMA_Abort_IT+0x1a6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a33      	ldr	r2, [pc, #204]	; (800349c <HAL_DMA_Abort_IT+0x1e8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d040      	beq.n	8003454 <HAL_DMA_Abort_IT+0x1a0>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a32      	ldr	r2, [pc, #200]	; (80034a0 <HAL_DMA_Abort_IT+0x1ec>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d038      	beq.n	800344e <HAL_DMA_Abort_IT+0x19a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <HAL_DMA_Abort_IT+0x1f0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d030      	beq.n	8003448 <HAL_DMA_Abort_IT+0x194>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2f      	ldr	r2, [pc, #188]	; (80034a8 <HAL_DMA_Abort_IT+0x1f4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d028      	beq.n	8003442 <HAL_DMA_Abort_IT+0x18e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a26      	ldr	r2, [pc, #152]	; (8003490 <HAL_DMA_Abort_IT+0x1dc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d020      	beq.n	800343c <HAL_DMA_Abort_IT+0x188>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <HAL_DMA_Abort_IT+0x1f8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d019      	beq.n	8003438 <HAL_DMA_Abort_IT+0x184>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <HAL_DMA_Abort_IT+0x1fc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d012      	beq.n	8003434 <HAL_DMA_Abort_IT+0x180>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <HAL_DMA_Abort_IT+0x200>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00a      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_DMA_Abort_IT+0x204>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d102      	bne.n	8003428 <HAL_DMA_Abort_IT+0x174>
 8003422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003426:	e01b      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 8003428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800342c:	e018      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 800342e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003432:	e015      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 8003434:	2310      	movs	r3, #16
 8003436:	e013      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 8003438:	2301      	movs	r3, #1
 800343a:	e011      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 800343c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003440:	e00e      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 8003442:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003446:	e00b      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 8003448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800344c:	e008      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 800344e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003452:	e005      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 8003454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003458:	e002      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 800345a:	2310      	movs	r3, #16
 800345c:	e000      	b.n	8003460 <HAL_DMA_Abort_IT+0x1ac>
 800345e:	2301      	movs	r3, #1
 8003460:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <HAL_DMA_Abort_IT+0x20c>)
 8003462:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
    } 
  }
  return status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40020080 	.word	0x40020080
 8003494:	40020008 	.word	0x40020008
 8003498:	4002001c 	.word	0x4002001c
 800349c:	40020030 	.word	0x40020030
 80034a0:	40020044 	.word	0x40020044
 80034a4:	40020058 	.word	0x40020058
 80034a8:	4002006c 	.word	0x4002006c
 80034ac:	40020408 	.word	0x40020408
 80034b0:	4002041c 	.word	0x4002041c
 80034b4:	40020430 	.word	0x40020430
 80034b8:	40020444 	.word	0x40020444
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020000 	.word	0x40020000

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b08b      	sub	sp, #44	; 0x2c
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034d2:	2300      	movs	r3, #0
 80034d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d6:	e179      	b.n	80037cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034d8:	2201      	movs	r2, #1
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f040 8168 	bne.w	80037c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4aa0      	ldr	r2, [pc, #640]	; (800377c <HAL_GPIO_Init+0x2b8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d05e      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 8003500:	4a9e      	ldr	r2, [pc, #632]	; (800377c <HAL_GPIO_Init+0x2b8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d875      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 8003506:	4a9e      	ldr	r2, [pc, #632]	; (8003780 <HAL_GPIO_Init+0x2bc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d058      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 800350c:	4a9c      	ldr	r2, [pc, #624]	; (8003780 <HAL_GPIO_Init+0x2bc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d86f      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 8003512:	4a9c      	ldr	r2, [pc, #624]	; (8003784 <HAL_GPIO_Init+0x2c0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d052      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 8003518:	4a9a      	ldr	r2, [pc, #616]	; (8003784 <HAL_GPIO_Init+0x2c0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d869      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 800351e:	4a9a      	ldr	r2, [pc, #616]	; (8003788 <HAL_GPIO_Init+0x2c4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04c      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 8003524:	4a98      	ldr	r2, [pc, #608]	; (8003788 <HAL_GPIO_Init+0x2c4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d863      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 800352a:	4a98      	ldr	r2, [pc, #608]	; (800378c <HAL_GPIO_Init+0x2c8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d046      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 8003530:	4a96      	ldr	r2, [pc, #600]	; (800378c <HAL_GPIO_Init+0x2c8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d85d      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 8003536:	2b12      	cmp	r3, #18
 8003538:	d82a      	bhi.n	8003590 <HAL_GPIO_Init+0xcc>
 800353a:	2b12      	cmp	r3, #18
 800353c:	d859      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_GPIO_Init+0x80>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	080035bf 	.word	0x080035bf
 8003548:	08003599 	.word	0x08003599
 800354c:	080035ab 	.word	0x080035ab
 8003550:	080035ed 	.word	0x080035ed
 8003554:	080035f3 	.word	0x080035f3
 8003558:	080035f3 	.word	0x080035f3
 800355c:	080035f3 	.word	0x080035f3
 8003560:	080035f3 	.word	0x080035f3
 8003564:	080035f3 	.word	0x080035f3
 8003568:	080035f3 	.word	0x080035f3
 800356c:	080035f3 	.word	0x080035f3
 8003570:	080035f3 	.word	0x080035f3
 8003574:	080035f3 	.word	0x080035f3
 8003578:	080035f3 	.word	0x080035f3
 800357c:	080035f3 	.word	0x080035f3
 8003580:	080035f3 	.word	0x080035f3
 8003584:	080035f3 	.word	0x080035f3
 8003588:	080035a1 	.word	0x080035a1
 800358c:	080035b5 	.word	0x080035b5
 8003590:	4a7f      	ldr	r2, [pc, #508]	; (8003790 <HAL_GPIO_Init+0x2cc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003596:	e02c      	b.n	80035f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	623b      	str	r3, [r7, #32]
          break;
 800359e:	e029      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	3304      	adds	r3, #4
 80035a6:	623b      	str	r3, [r7, #32]
          break;
 80035a8:	e024      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	3308      	adds	r3, #8
 80035b0:	623b      	str	r3, [r7, #32]
          break;
 80035b2:	e01f      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	330c      	adds	r3, #12
 80035ba:	623b      	str	r3, [r7, #32]
          break;
 80035bc:	e01a      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035c6:	2304      	movs	r3, #4
 80035c8:	623b      	str	r3, [r7, #32]
          break;
 80035ca:	e013      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035d4:	2308      	movs	r3, #8
 80035d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	611a      	str	r2, [r3, #16]
          break;
 80035de:	e009      	b.n	80035f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035e0:	2308      	movs	r3, #8
 80035e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	615a      	str	r2, [r3, #20]
          break;
 80035ea:	e003      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035ec:	2300      	movs	r3, #0
 80035ee:	623b      	str	r3, [r7, #32]
          break;
 80035f0:	e000      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          break;
 80035f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2bff      	cmp	r3, #255	; 0xff
 80035f8:	d801      	bhi.n	80035fe <HAL_GPIO_Init+0x13a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	e001      	b.n	8003602 <HAL_GPIO_Init+0x13e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2bff      	cmp	r3, #255	; 0xff
 8003608:	d802      	bhi.n	8003610 <HAL_GPIO_Init+0x14c>
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	e002      	b.n	8003616 <HAL_GPIO_Init+0x152>
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	3b08      	subs	r3, #8
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	210f      	movs	r1, #15
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	401a      	ands	r2, r3
 8003628:	6a39      	ldr	r1, [r7, #32]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	431a      	orrs	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80c1 	beq.w	80037c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003644:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	4a52      	ldr	r2, [pc, #328]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6193      	str	r3, [r2, #24]
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800365c:	4a4e      	ldr	r2, [pc, #312]	; (8003798 <HAL_GPIO_Init+0x2d4>)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003668:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4013      	ands	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a46      	ldr	r2, [pc, #280]	; (800379c <HAL_GPIO_Init+0x2d8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d01f      	beq.n	80036c8 <HAL_GPIO_Init+0x204>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a45      	ldr	r2, [pc, #276]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d019      	beq.n	80036c4 <HAL_GPIO_Init+0x200>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a44      	ldr	r2, [pc, #272]	; (80037a4 <HAL_GPIO_Init+0x2e0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_GPIO_Init+0x1fc>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a43      	ldr	r2, [pc, #268]	; (80037a8 <HAL_GPIO_Init+0x2e4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00d      	beq.n	80036bc <HAL_GPIO_Init+0x1f8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a42      	ldr	r2, [pc, #264]	; (80037ac <HAL_GPIO_Init+0x2e8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <HAL_GPIO_Init+0x1f4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <HAL_GPIO_Init+0x2ec>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_GPIO_Init+0x1f0>
 80036b0:	2305      	movs	r3, #5
 80036b2:	e00a      	b.n	80036ca <HAL_GPIO_Init+0x206>
 80036b4:	2306      	movs	r3, #6
 80036b6:	e008      	b.n	80036ca <HAL_GPIO_Init+0x206>
 80036b8:	2304      	movs	r3, #4
 80036ba:	e006      	b.n	80036ca <HAL_GPIO_Init+0x206>
 80036bc:	2303      	movs	r3, #3
 80036be:	e004      	b.n	80036ca <HAL_GPIO_Init+0x206>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e002      	b.n	80036ca <HAL_GPIO_Init+0x206>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_GPIO_Init+0x206>
 80036c8:	2300      	movs	r3, #0
 80036ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036cc:	f002 0203 	and.w	r2, r2, #3
 80036d0:	0092      	lsls	r2, r2, #2
 80036d2:	4093      	lsls	r3, r2
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036da:	492f      	ldr	r1, [pc, #188]	; (8003798 <HAL_GPIO_Init+0x2d4>)
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3302      	adds	r3, #2
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036f4:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	492e      	ldr	r1, [pc, #184]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	43db      	mvns	r3, r3
 800370a:	492a      	ldr	r1, [pc, #168]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 800370c:	4013      	ands	r3, r2
 800370e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d006      	beq.n	800372a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	4924      	ldr	r1, [pc, #144]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	43db      	mvns	r3, r3
 8003732:	4920      	ldr	r1, [pc, #128]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 8003734:	4013      	ands	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d006      	beq.n	8003752 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	491a      	ldr	r1, [pc, #104]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	608b      	str	r3, [r1, #8]
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	43db      	mvns	r3, r3
 800375a:	4916      	ldr	r1, [pc, #88]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 800375c:	4013      	ands	r3, r2
 800375e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d025      	beq.n	80037b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800376c:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	4910      	ldr	r1, [pc, #64]	; (80037b4 <HAL_GPIO_Init+0x2f0>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
 8003778:	e025      	b.n	80037c6 <HAL_GPIO_Init+0x302>
 800377a:	bf00      	nop
 800377c:	10320000 	.word	0x10320000
 8003780:	10310000 	.word	0x10310000
 8003784:	10220000 	.word	0x10220000
 8003788:	10210000 	.word	0x10210000
 800378c:	10120000 	.word	0x10120000
 8003790:	10110000 	.word	0x10110000
 8003794:	40021000 	.word	0x40021000
 8003798:	40010000 	.word	0x40010000
 800379c:	40010800 	.word	0x40010800
 80037a0:	40010c00 	.word	0x40010c00
 80037a4:	40011000 	.word	0x40011000
 80037a8:	40011400 	.word	0x40011400
 80037ac:	40011800 	.word	0x40011800
 80037b0:	40011c00 	.word	0x40011c00
 80037b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_GPIO_Init+0x324>)
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	43db      	mvns	r3, r3
 80037c0:	4909      	ldr	r1, [pc, #36]	; (80037e8 <HAL_GPIO_Init+0x324>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	3301      	adds	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f47f ae7e 	bne.w	80034d8 <HAL_GPIO_Init+0x14>
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	372c      	adds	r7, #44	; 0x2c
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
 80037f8:	4613      	mov	r3, r2
 80037fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037fc:	787b      	ldrb	r3, [r7, #1]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003808:	e003      	b.n	8003812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	041a      	lsls	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	611a      	str	r2, [r3, #16]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e26c      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8087 	beq.w	800394a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800383c:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b04      	cmp	r3, #4
 8003846:	d00c      	beq.n	8003862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003848:	4b8f      	ldr	r3, [pc, #572]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d112      	bne.n	800387a <HAL_RCC_OscConfig+0x5e>
 8003854:	4b8c      	ldr	r3, [pc, #560]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d10b      	bne.n	800387a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06c      	beq.n	8003948 <HAL_RCC_OscConfig+0x12c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d168      	bne.n	8003948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e246      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x76>
 8003884:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7f      	ldr	r2, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e02e      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x98>
 800389a:	4b7b      	ldr	r3, [pc, #492]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a7a      	ldr	r2, [pc, #488]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b78      	ldr	r3, [pc, #480]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a77      	ldr	r2, [pc, #476]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0xbc>
 80038be:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a71      	ldr	r2, [pc, #452]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038d8:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6a      	ldr	r2, [pc, #424]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a67      	ldr	r2, [pc, #412]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7ff f870 	bl	80029dc <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003900:	f7ff f86c 	bl	80029dc <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e1fa      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xe4>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7ff f85c 	bl	80029dc <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7ff f858 	bl	80029dc <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1e6      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x10c>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x18c>
 800396e:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1ba      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4939      	ldr	r1, [pc, #228]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7ff f811 	bl	80029dc <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7ff f80d 	bl	80029dc <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e19b      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4927      	ldr	r1, [pc, #156]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fff0 	bl	80029dc <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fe ffec 	bl	80029dc <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e17a      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03a      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d019      	beq.n	8003a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fe ffd0 	bl	80029dc <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe ffcc 	bl	80029dc <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e15a      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f000 fad8 	bl	8004014 <RCC_Delay>
 8003a64:	e01c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fe ffb6 	bl	80029dc <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a72:	e00f      	b.n	8003a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe ffb2 	bl	80029dc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d908      	bls.n	8003a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e140      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	42420000 	.word	0x42420000
 8003a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b9e      	ldr	r3, [pc, #632]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e9      	bne.n	8003a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a6 	beq.w	8003bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b97      	ldr	r3, [pc, #604]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b94      	ldr	r3, [pc, #592]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a93      	ldr	r2, [pc, #588]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]
 8003aca:	4b91      	ldr	r3, [pc, #580]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b8e      	ldr	r3, [pc, #568]	; (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b8b      	ldr	r3, [pc, #556]	; (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a8a      	ldr	r2, [pc, #552]	; (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fe ff73 	bl	80029dc <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fe ff6f 	bl	80029dc <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b64      	cmp	r3, #100	; 0x64
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0fd      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b81      	ldr	r3, [pc, #516]	; (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x312>
 8003b20:	4b7b      	ldr	r3, [pc, #492]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a7a      	ldr	r2, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	e02d      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x334>
 8003b36:	4b76      	ldr	r3, [pc, #472]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a75      	ldr	r2, [pc, #468]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	4b73      	ldr	r3, [pc, #460]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a72      	ldr	r2, [pc, #456]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	6213      	str	r3, [r2, #32]
 8003b4e:	e01c      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x356>
 8003b58:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a6c      	ldr	r2, [pc, #432]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6213      	str	r3, [r2, #32]
 8003b70:	e00b      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b72:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a66      	ldr	r2, [pc, #408]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6213      	str	r3, [r2, #32]
 8003b7e:	4b64      	ldr	r3, [pc, #400]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d015      	beq.n	8003bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fe ff23 	bl	80029dc <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fe ff1f 	bl	80029dc <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0ab      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4b57      	ldr	r3, [pc, #348]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ee      	beq.n	8003b9a <HAL_RCC_OscConfig+0x37e>
 8003bbc:	e014      	b.n	8003be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe ff0d 	bl	80029dc <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fe ff09 	bl	80029dc <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e095      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ee      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bee:	4b48      	ldr	r3, [pc, #288]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4a47      	ldr	r2, [pc, #284]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8081 	beq.w	8003d06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c04:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d061      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d146      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c18:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_OscConfig+0x4fc>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fe fedd 	bl	80029dc <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fe fed9 	bl	80029dc <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e067      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	492d      	ldr	r1, [pc, #180]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a19      	ldr	r1, [r3, #32]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	430b      	orrs	r3, r1
 8003c72:	4927      	ldr	r1, [pc, #156]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x4fc>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe fead 	bl	80029dc <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fe fea9 	bl	80029dc <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e037      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x46a>
 8003ca4:	e02f      	b.n	8003d06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_RCC_OscConfig+0x4fc>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fe96 	bl	80029dc <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe fe92 	bl	80029dc <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e020      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x498>
 8003cd2:	e018      	b.n	8003d06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e013      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40007000 	.word	0x40007000
 8003d18:	42420060 	.word	0x42420060

08003d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0d0      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d910      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b67      	ldr	r3, [pc, #412]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	4965      	ldr	r1, [pc, #404]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b63      	ldr	r3, [pc, #396]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0b8      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d78:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a58      	ldr	r2, [pc, #352]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d90:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b50      	ldr	r3, [pc, #320]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	494d      	ldr	r1, [pc, #308]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d040      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d115      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e07f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dda:	4b41      	ldr	r3, [pc, #260]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e073      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dea:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06b      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfa:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f023 0203 	bic.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4936      	ldr	r1, [pc, #216]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e0c:	f7fe fde6 	bl	80029dc <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e14:	f7fe fde2 	bl	80029dc <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e053      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 020c 	and.w	r2, r3, #12
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d1eb      	bne.n	8003e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d210      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 0207 	bic.w	r2, r3, #7
 8003e52:	4922      	ldr	r1, [pc, #136]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e032      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4916      	ldr	r1, [pc, #88]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	490e      	ldr	r1, [pc, #56]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eaa:	f000 f821 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	490a      	ldr	r1, [pc, #40]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	5ccb      	ldrb	r3, [r1, r3]
 8003ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1d0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fd44 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	08009c4c 	.word	0x08009c4c
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	20000024 	.word	0x20000024

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	b490      	push	{r4, r7}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ef8:	1d3c      	adds	r4, r7, #4
 8003efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f00:	f240 2301 	movw	r3, #513	; 0x201
 8003f04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x40>
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x46>
 8003f2e:	e02d      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f30:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f32:	623b      	str	r3, [r7, #32]
      break;
 8003f34:	e02d      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	0c9b      	lsrs	r3, r3, #18
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f42:	4413      	add	r3, r2
 8003f44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	0c5b      	lsrs	r3, r3, #17
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f62:	4413      	add	r3, r2
 8003f64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f6e:	fb02 f203 	mul.w	r2, r2, r3
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7a:	e004      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	623b      	str	r3, [r7, #32]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f8e:	623b      	str	r3, [r7, #32]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	6a3b      	ldr	r3, [r7, #32]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc90      	pop	{r4, r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	08008ca0 	.word	0x08008ca0
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	003d0900 	.word	0x003d0900

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b02      	ldr	r3, [pc, #8]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	20000000 	.word	0x20000000

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc8:	f7ff fff2 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4903      	ldr	r1, [pc, #12]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08009c5c 	.word	0x08009c5c

08003fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff0:	f7ff ffde 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	0adb      	lsrs	r3, r3, #11
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000
 8004010:	08009c5c 	.word	0x08009c5c

08004014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <RCC_Delay+0x34>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <RCC_Delay+0x38>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	0a5b      	lsrs	r3, r3, #9
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004030:	bf00      	nop
  }
  while (Delay --);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	60fa      	str	r2, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f9      	bne.n	8004030 <RCC_Delay+0x1c>
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	20000000 	.word	0x20000000
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d07d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800406c:	2300      	movs	r3, #0
 800406e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004070:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10d      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407c:	4b4c      	ldr	r3, [pc, #304]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4a4b      	ldr	r2, [pc, #300]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004086:	61d3      	str	r3, [r2, #28]
 8004088:	4b49      	ldr	r3, [pc, #292]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d118      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a4:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b0:	f7fe fc94 	bl	80029dc <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b8:	f7fe fc90 	bl	80029dc <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e06d      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ca:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d02e      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d027      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040f4:	4b2e      	ldr	r3, [pc, #184]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040fe:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800410a:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d014      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7fe fc5f 	bl	80029dc <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	e00a      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fe fc5b 	bl	80029dc <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e036      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ee      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4917      	ldr	r1, [pc, #92]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	4313      	orrs	r3, r2
 8004154:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004166:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	490b      	ldr	r1, [pc, #44]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	4904      	ldr	r1, [pc, #16]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40007000 	.word	0x40007000
 80041b8:	42420440 	.word	0x42420440

080041bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e041      	b.n	8004252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd ff48 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f000 f934 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_TIM_ConfigClockSource+0x18>
 800426e:	2302      	movs	r3, #2
 8004270:	e0b3      	b.n	80043da <HAL_TIM_ConfigClockSource+0x180>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004290:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004298:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042aa:	d03e      	beq.n	800432a <HAL_TIM_ConfigClockSource+0xd0>
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	f200 8087 	bhi.w	80043c2 <HAL_TIM_ConfigClockSource+0x168>
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	f000 8085 	beq.w	80043c6 <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c0:	d87f      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x168>
 80042c2:	2b70      	cmp	r3, #112	; 0x70
 80042c4:	d01a      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0xa2>
 80042c6:	2b70      	cmp	r3, #112	; 0x70
 80042c8:	d87b      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x168>
 80042ca:	2b60      	cmp	r3, #96	; 0x60
 80042cc:	d050      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0x116>
 80042ce:	2b60      	cmp	r3, #96	; 0x60
 80042d0:	d877      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x168>
 80042d2:	2b50      	cmp	r3, #80	; 0x50
 80042d4:	d03c      	beq.n	8004350 <HAL_TIM_ConfigClockSource+0xf6>
 80042d6:	2b50      	cmp	r3, #80	; 0x50
 80042d8:	d873      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x168>
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d058      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0x136>
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d86f      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x168>
 80042e2:	2b30      	cmp	r3, #48	; 0x30
 80042e4:	d064      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x156>
 80042e6:	2b30      	cmp	r3, #48	; 0x30
 80042e8:	d86b      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x168>
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d060      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x156>
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d867      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x168>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d05c      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x156>
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d05a      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042fa:	e062      	b.n	80043c2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f000 fa2b 	bl	8004766 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800431e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	609a      	str	r2, [r3, #8]
      break;
 8004328:	e04e      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6899      	ldr	r1, [r3, #8]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f000 fa14 	bl	8004766 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434c:	609a      	str	r2, [r3, #8]
      break;
 800434e:	e03b      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	461a      	mov	r2, r3
 800435e:	f000 f98b 	bl	8004678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2150      	movs	r1, #80	; 0x50
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f9e2 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 800436e:	e02b      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	461a      	mov	r2, r3
 800437e:	f000 f9a9 	bl	80046d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2160      	movs	r1, #96	; 0x60
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f9d2 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 800438e:	e01b      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	f000 f96b 	bl	8004678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2140      	movs	r1, #64	; 0x40
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f9c2 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 80043ae:	e00b      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 f9b9 	bl	8004732 <TIM_ITRx_SetConfig>
        break;
 80043c0:	e002      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_SlaveConfigSynchro+0x18>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e031      	b.n	800445e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800440a:	6839      	ldr	r1, [r7, #0]
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f8a5 	bl	800455c <TIM_SlaveTimer_SetConfig>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e018      	b.n	800445e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800444a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a33      	ldr	r2, [pc, #204]	; (8004548 <TIM_Base_SetConfig+0xe0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a32      	ldr	r2, [pc, #200]	; (800454c <TIM_Base_SetConfig+0xe4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00f      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d00b      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a2f      	ldr	r2, [pc, #188]	; (8004550 <TIM_Base_SetConfig+0xe8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a2e      	ldr	r2, [pc, #184]	; (8004554 <TIM_Base_SetConfig+0xec>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a2d      	ldr	r2, [pc, #180]	; (8004558 <TIM_Base_SetConfig+0xf0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <TIM_Base_SetConfig+0xe0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <TIM_Base_SetConfig+0x82>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a21      	ldr	r2, [pc, #132]	; (800454c <TIM_Base_SetConfig+0xe4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0x82>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x82>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <TIM_Base_SetConfig+0xe8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x82>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <TIM_Base_SetConfig+0xec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x82>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <TIM_Base_SetConfig+0xf0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a09      	ldr	r2, [pc, #36]	; (8004548 <TIM_Base_SetConfig+0xe0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_Base_SetConfig+0xc8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a08      	ldr	r2, [pc, #32]	; (800454c <TIM_Base_SetConfig+0xe4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d103      	bne.n	8004538 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	615a      	str	r2, [r3, #20]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40013400 	.word	0x40013400
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40000c00 	.word	0x40000c00

0800455c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f023 0307 	bic.w	r3, r3, #7
 8004586:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b70      	cmp	r3, #112	; 0x70
 80045a0:	d01a      	beq.n	80045d8 <TIM_SlaveTimer_SetConfig+0x7c>
 80045a2:	2b70      	cmp	r3, #112	; 0x70
 80045a4:	d860      	bhi.n	8004668 <TIM_SlaveTimer_SetConfig+0x10c>
 80045a6:	2b60      	cmp	r3, #96	; 0x60
 80045a8:	d054      	beq.n	8004654 <TIM_SlaveTimer_SetConfig+0xf8>
 80045aa:	2b60      	cmp	r3, #96	; 0x60
 80045ac:	d85c      	bhi.n	8004668 <TIM_SlaveTimer_SetConfig+0x10c>
 80045ae:	2b50      	cmp	r3, #80	; 0x50
 80045b0:	d046      	beq.n	8004640 <TIM_SlaveTimer_SetConfig+0xe4>
 80045b2:	2b50      	cmp	r3, #80	; 0x50
 80045b4:	d858      	bhi.n	8004668 <TIM_SlaveTimer_SetConfig+0x10c>
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d019      	beq.n	80045ee <TIM_SlaveTimer_SetConfig+0x92>
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d854      	bhi.n	8004668 <TIM_SlaveTimer_SetConfig+0x10c>
 80045be:	2b30      	cmp	r3, #48	; 0x30
 80045c0:	d054      	beq.n	800466c <TIM_SlaveTimer_SetConfig+0x110>
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d850      	bhi.n	8004668 <TIM_SlaveTimer_SetConfig+0x10c>
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d050      	beq.n	800466c <TIM_SlaveTimer_SetConfig+0x110>
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d84c      	bhi.n	8004668 <TIM_SlaveTimer_SetConfig+0x10c>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04c      	beq.n	800466c <TIM_SlaveTimer_SetConfig+0x110>
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d04a      	beq.n	800466c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80045d6:	e047      	b.n	8004668 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68d9      	ldr	r1, [r3, #12]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f000 f8bd 	bl	8004766 <TIM_ETR_SetConfig>
      break;
 80045ec:	e03f      	b.n	800466e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d101      	bne.n	80045fa <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03a      	b.n	8004670 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004620:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	621a      	str	r2, [r3, #32]
      break;
 800463e:	e016      	b.n	800466e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6899      	ldr	r1, [r3, #8]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	461a      	mov	r2, r3
 800464e:	f000 f813 	bl	8004678 <TIM_TI1_ConfigInputStage>
      break;
 8004652:	e00c      	b.n	800466e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6899      	ldr	r1, [r3, #8]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	461a      	mov	r2, r3
 8004662:	f000 f837 	bl	80046d4 <TIM_TI2_ConfigInputStage>
      break;
 8004666:	e002      	b.n	800466e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004668:	bf00      	nop
 800466a:	e000      	b.n	800466e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800466c:	bf00      	nop
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0201 	bic.w	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 030a 	bic.w	r3, r3, #10
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f023 0210 	bic.w	r2, r3, #16
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	031b      	lsls	r3, r3, #12
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004710:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	621a      	str	r2, [r3, #32]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	f043 0307 	orr.w	r3, r3, #7
 8004754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004780:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	021a      	lsls	r2, r3, #8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	431a      	orrs	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4313      	orrs	r3, r2
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	609a      	str	r2, [r3, #8]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e050      	b.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d018      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a19      	ldr	r2, [pc, #100]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004812:	d00e      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a15      	ldr	r2, [pc, #84]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a14      	ldr	r2, [pc, #80]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a12      	ldr	r2, [pc, #72]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10c      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40013400 	.word	0x40013400
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00

0800487c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e03f      	b.n	800490e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd fc54 	bl	8002150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	; 0x24
 80048ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fa5d 	bl	8004d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004938:	2300      	movs	r3, #0
 800493a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_UART_IRQHandler+0x52>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f98b 	bl	8004c7e <UART_Receive_IT>
      return;
 8004968:	e0d0      	b.n	8004b0c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80b0 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x1ba>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_UART_IRQHandler+0x70>
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80a5 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_UART_IRQHandler+0x90>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_UART_IRQHandler+0xb0>
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c0:	f043 0202 	orr.w	r2, r3, #2
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_UART_IRQHandler+0xd0>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e0:	f043 0204 	orr.w	r2, r3, #4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00f      	beq.n	8004a12 <HAL_UART_IRQHandler+0xfa>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_UART_IRQHandler+0xee>
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	f043 0208 	orr.w	r2, r3, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d077      	beq.n	8004b0a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_UART_IRQHandler+0x11c>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f925 	bl	8004c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bf14      	ite	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	2300      	moveq	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <HAL_UART_IRQHandler+0x144>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d031      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f876 	bl	8004b4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d023      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <HAL_UART_IRQHandler+0x1fc>)
 8004a8e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe fc0d 	bl	80032b4 <HAL_DMA_Abort_IT>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d016      	beq.n	8004ace <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aae:	e00e      	b.n	8004ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f843 	bl	8004b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab6:	e00a      	b.n	8004ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f83f 	bl	8004b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abe:	e006      	b.n	8004ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f83b 	bl	8004b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004acc:	e01d      	b.n	8004b0a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ace:	bf00      	nop
    return;
 8004ad0:	e01b      	b.n	8004b0a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_UART_IRQHandler+0x1d6>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f862 	bl	8004bb0 <UART_Transmit_IT>
    return;
 8004aec:	e00e      	b.n	8004b0c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_UART_IRQHandler+0x1f4>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8a3 	bl	8004c4e <UART_EndTransmit_IT>
    return;
 8004b08:	e000      	b.n	8004b0c <HAL_UART_IRQHandler+0x1f4>
    return;
 8004b0a:	bf00      	nop
  }
}
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	08004b89 	.word	0x08004b89

08004b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr

08004b2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b64:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff ffca 	bl	8004b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b21      	cmp	r3, #33	; 0x21
 8004bc2:	d13e      	bne.n	8004c42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d114      	bne.n	8004bf8 <UART_Transmit_IT+0x48>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d110      	bne.n	8004bf8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	461a      	mov	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	1c9a      	adds	r2, r3, #2
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]
 8004bf6:	e008      	b.n	8004c0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	1c59      	adds	r1, r3, #1
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6211      	str	r1, [r2, #32]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4619      	mov	r1, r3
 8004c18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e000      	b.n	8004c44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
  }
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff52 	bl	8004b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b22      	cmp	r3, #34	; 0x22
 8004c90:	d170      	bne.n	8004d74 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d117      	bne.n	8004ccc <UART_Receive_IT+0x4e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d113      	bne.n	8004ccc <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	1c9a      	adds	r2, r3, #2
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
 8004cca:	e026      	b.n	8004d1a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	d007      	beq.n	8004cf0 <UART_Receive_IT+0x72>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <UART_Receive_IT+0x80>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e008      	b.n	8004d10 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	4619      	mov	r1, r3
 8004d28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d120      	bne.n	8004d70 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0220 	bic.w	r2, r2, #32
 8004d3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fedf 	bl	8004b2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e002      	b.n	8004d76 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e000      	b.n	8004d76 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004dba:	f023 030c 	bic.w	r3, r3, #12
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2c      	ldr	r2, [pc, #176]	; (8004e94 <UART_SetConfig+0x114>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d103      	bne.n	8004df0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004de8:	f7ff f900 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	e002      	b.n	8004df6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004df0:	f7ff f8e8 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 8004df4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009a      	lsls	r2, r3, #2
 8004e00:	441a      	add	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	4a22      	ldr	r2, [pc, #136]	; (8004e98 <UART_SetConfig+0x118>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	0119      	lsls	r1, r3, #4
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009a      	lsls	r2, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <UART_SetConfig+0x118>)
 8004e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	2064      	movs	r0, #100	; 0x64
 8004e36:	fb00 f303 	mul.w	r3, r0, r3
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	3332      	adds	r3, #50	; 0x32
 8004e40:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <UART_SetConfig+0x118>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4c:	4419      	add	r1, r3
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009a      	lsls	r2, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <UART_SetConfig+0x118>)
 8004e66:	fba3 0302 	umull	r0, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2064      	movs	r0, #100	; 0x64
 8004e6e:	fb00 f303 	mul.w	r3, r0, r3
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	3332      	adds	r3, #50	; 0x32
 8004e78:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <UART_SetConfig+0x118>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	440a      	add	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40013800 	.word	0x40013800
 8004e98:	51eb851f 	.word	0x51eb851f

08004e9c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea2:	f3ef 8305 	mrs	r3, IPSR
 8004ea6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eae:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb2:	607b      	str	r3, [r7, #4]
  return(result);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <osKernelInitialize+0x32>
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <osKernelInitialize+0x60>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d109      	bne.n	8004ed6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ece:	f06f 0305 	mvn.w	r3, #5
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e00c      	b.n	8004ef0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <osKernelInitialize+0x60>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <osKernelInitialize+0x60>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e002      	b.n	8004ef0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	2000004c 	.word	0x2000004c

08004f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f06:	f3ef 8305 	mrs	r3, IPSR
 8004f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f12:	f3ef 8310 	mrs	r3, PRIMASK
 8004f16:	607b      	str	r3, [r7, #4]
  return(result);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <osKernelStart+0x32>
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <osKernelStart+0x64>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d109      	bne.n	8004f3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f26:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f32:	f06f 0305 	mvn.w	r3, #5
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e00e      	b.n	8004f58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <osKernelStart+0x64>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <osKernelStart+0x64>)
 8004f44:	2202      	movs	r2, #2
 8004f46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004f48:	f001 ff0a 	bl	8006d60 <vTaskStartScheduler>
      stat = osOK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e002      	b.n	8004f58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f58:	68fb      	ldr	r3, [r7, #12]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	2000004c 	.word	0x2000004c

08004f68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b092      	sub	sp, #72	; 0x48
 8004f6c:	af04      	add	r7, sp, #16
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f78:	f3ef 8305 	mrs	r3, IPSR
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 8094 	bne.w	80050ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f86:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 808d 	bne.w	80050ae <osThreadNew+0x146>
 8004f94:	4b48      	ldr	r3, [pc, #288]	; (80050b8 <osThreadNew+0x150>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d106      	bne.n	8004faa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f040 8082 	bne.w	80050ae <osThreadNew+0x146>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d07e      	beq.n	80050ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004fb4:	2318      	movs	r3, #24
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004fb8:	2300      	movs	r3, #0
 8004fba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004fbc:	f107 031b 	add.w	r3, r7, #27
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d045      	beq.n	800505a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <osThreadNew+0x74>
        name = attr->name;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <osThreadNew+0x9a>
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	2b38      	cmp	r3, #56	; 0x38
 8004ff4:	d805      	bhi.n	8005002 <osThreadNew+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <osThreadNew+0x9e>
        return (NULL);
 8005002:	2300      	movs	r3, #0
 8005004:	e054      	b.n	80050b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	089b      	lsrs	r3, r3, #2
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00e      	beq.n	800503c <osThreadNew+0xd4>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	2b5b      	cmp	r3, #91	; 0x5b
 8005024:	d90a      	bls.n	800503c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800502a:	2b00      	cmp	r3, #0
 800502c:	d006      	beq.n	800503c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <osThreadNew+0xd4>
        mem = 1;
 8005036:	2301      	movs	r3, #1
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
 800503a:	e010      	b.n	800505e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10c      	bne.n	800505e <osThreadNew+0xf6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d108      	bne.n	800505e <osThreadNew+0xf6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d104      	bne.n	800505e <osThreadNew+0xf6>
          mem = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
 8005058:	e001      	b.n	800505e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	2b01      	cmp	r3, #1
 8005062:	d110      	bne.n	8005086 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800506c:	9202      	str	r2, [sp, #8]
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005078:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f001 fca4 	bl	80069c8 <xTaskCreateStatic>
 8005080:	4603      	mov	r3, r0
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e013      	b.n	80050ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d110      	bne.n	80050ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	b29a      	uxth	r2, r3
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f001 fcee 	bl	8006a80 <xTaskCreate>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d001      	beq.n	80050ae <osThreadNew+0x146>
          hTask = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050ae:	697b      	ldr	r3, [r7, #20]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3738      	adds	r7, #56	; 0x38
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	2000004c 	.word	0x2000004c

080050bc <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <osThreadFlagsSet+0x1a>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	da03      	bge.n	80050de <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80050d6:	f06f 0303 	mvn.w	r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e045      	b.n	800516a <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 80050de:	f04f 33ff 	mov.w	r3, #4294967295
 80050e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e4:	f3ef 8305 	mrs	r3, IPSR
 80050e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80050ea:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10f      	bne.n	8005110 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f0:	f3ef 8310 	mrs	r3, PRIMASK
 80050f4:	617b      	str	r3, [r7, #20]
  return(result);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <osThreadFlagsSet+0x54>
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <osThreadFlagsSet+0xb8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d125      	bne.n	8005150 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005104:	f3ef 8311 	mrs	r3, BASEPRI
 8005108:	613b      	str	r3, [r7, #16]
  return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01f      	beq.n	8005150 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2300      	movs	r3, #0
 800511c:	2201      	movs	r2, #1
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	69f8      	ldr	r0, [r7, #28]
 8005122:	f002 fca3 	bl	8007a6c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005126:	f107 030c 	add.w	r3, r7, #12
 800512a:	2200      	movs	r2, #0
 800512c:	9200      	str	r2, [sp, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	2100      	movs	r1, #0
 8005132:	69f8      	ldr	r0, [r7, #28]
 8005134:	f002 fc9a 	bl	8007a6c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d015      	beq.n	800516a <osThreadFlagsSet+0xae>
 800513e:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <osThreadFlagsSet+0xbc>)
 8005140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	e00c      	b.n	800516a <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005150:	2300      	movs	r3, #0
 8005152:	2201      	movs	r2, #1
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	69f8      	ldr	r0, [r7, #28]
 8005158:	f002 fbe4 	bl	8007924 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	2200      	movs	r2, #0
 8005162:	2100      	movs	r1, #0
 8005164:	69f8      	ldr	r0, [r7, #28]
 8005166:	f002 fbdd 	bl	8007924 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800516a:	68fb      	ldr	r3, [r7, #12]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	2000004c 	.word	0x2000004c
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005184:	f3ef 8305 	mrs	r3, IPSR
 8005188:	613b      	str	r3, [r7, #16]
  return(result);
 800518a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10f      	bne.n	80051b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005190:	f3ef 8310 	mrs	r3, PRIMASK
 8005194:	60fb      	str	r3, [r7, #12]
  return(result);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <osDelay+0x34>
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <osDelay+0x58>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d109      	bne.n	80051b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051a4:	f3ef 8311 	mrs	r3, BASEPRI
 80051a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <osDelay+0x3c>
    stat = osErrorISR;
 80051b0:	f06f 0305 	mvn.w	r3, #5
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e007      	b.n	80051c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 fd98 	bl	8006cf8 <vTaskDelay>
    }
  }

  return (stat);
 80051c8:	697b      	ldr	r3, [r7, #20]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	2000004c 	.word	0x2000004c

080051d8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f003 f903 	bl	80083ec <pvTimerGetTimerID>
 80051e6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <TimerCallback+0x22>
    callb->func (callb->arg);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6852      	ldr	r2, [r2, #4]
 80051f6:	4610      	mov	r0, r2
 80051f8:	4798      	blx	r3
  }
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b08e      	sub	sp, #56	; 0x38
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	460b      	mov	r3, r1
 8005212:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005214:	2300      	movs	r3, #0
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005218:	f3ef 8305 	mrs	r3, IPSR
 800521c:	61bb      	str	r3, [r7, #24]
  return(result);
 800521e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005220:	2b00      	cmp	r3, #0
 8005222:	d16a      	bne.n	80052fa <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005224:	f3ef 8310 	mrs	r3, PRIMASK
 8005228:	617b      	str	r3, [r7, #20]
  return(result);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d164      	bne.n	80052fa <osTimerNew+0xf6>
 8005230:	4b34      	ldr	r3, [pc, #208]	; (8005304 <osTimerNew+0x100>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d105      	bne.n	8005244 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005238:	f3ef 8311 	mrs	r3, BASEPRI
 800523c:	613b      	str	r3, [r7, #16]
  return(result);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d15a      	bne.n	80052fa <osTimerNew+0xf6>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d057      	beq.n	80052fa <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800524a:	2008      	movs	r0, #8
 800524c:	f003 fade 	bl	800880c <pvPortMalloc>
 8005250:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d050      	beq.n	80052fa <osTimerNew+0xf6>
      callb->func = func;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005264:	7afb      	ldrb	r3, [r7, #11]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <osTimerNew+0x6c>
        reload = pdFALSE;
 800526a:	2300      	movs	r3, #0
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	e001      	b.n	8005274 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005270:	2301      	movs	r3, #1
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
 8005278:	623b      	str	r3, [r7, #32]
      name = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01c      	beq.n	80052be <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <osTimerNew+0x8e>
          name = attr->name;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d006      	beq.n	80052a8 <osTimerNew+0xa4>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b2f      	cmp	r3, #47	; 0x2f
 80052a0:	d902      	bls.n	80052a8 <osTimerNew+0xa4>
          mem = 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	e00c      	b.n	80052c2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d108      	bne.n	80052c2 <osTimerNew+0xbe>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <osTimerNew+0xbe>
            mem = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	e001      	b.n	80052c2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10c      	bne.n	80052e2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <osTimerNew+0x104>)
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d6:	2101      	movs	r1, #1
 80052d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052da:	f002 fd4e 	bl	8007d7a <xTimerCreateStatic>
 80052de:	62b8      	str	r0, [r7, #40]	; 0x28
 80052e0:	e00b      	b.n	80052fa <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d108      	bne.n	80052fa <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <osTimerNew+0x104>)
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	2101      	movs	r1, #1
 80052f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052f4:	f002 fd20 	bl	8007d38 <xTimerCreate>
 80052f8:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3730      	adds	r7, #48	; 0x30
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	2000004c 	.word	0x2000004c
 8005308:	080051d9 	.word	0x080051d9

0800530c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800531a:	f3ef 8305 	mrs	r3, IPSR
 800531e:	617b      	str	r3, [r7, #20]
  return(result);
 8005320:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005326:	f3ef 8310 	mrs	r3, PRIMASK
 800532a:	613b      	str	r3, [r7, #16]
  return(result);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <osTimerStart+0x3a>
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <osTimerStart+0x7c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d109      	bne.n	800534e <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800533a:	f3ef 8311 	mrs	r3, BASEPRI
 800533e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <osTimerStart+0x42>
    stat = osErrorISR;
 8005346:	f06f 0305 	mvn.w	r3, #5
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e017      	b.n	800537e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d103      	bne.n	800535c <osTimerStart+0x50>
    stat = osErrorParameter;
 8005354:	f06f 0303 	mvn.w	r3, #3
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	e010      	b.n	800537e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800535c:	2300      	movs	r3, #0
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	2300      	movs	r3, #0
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	2104      	movs	r1, #4
 8005366:	69b8      	ldr	r0, [r7, #24]
 8005368:	f002 fd76 	bl	8007e58 <xTimerGenericCommand>
 800536c:	4603      	mov	r3, r0
 800536e:	2b01      	cmp	r3, #1
 8005370:	d102      	bne.n	8005378 <osTimerStart+0x6c>
      stat = osOK;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	e002      	b.n	800537e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005378:	f06f 0302 	mvn.w	r3, #2
 800537c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800537e:	69fb      	ldr	r3, [r7, #28]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	2000004c 	.word	0x2000004c

0800538c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005398:	f3ef 8305 	mrs	r3, IPSR
 800539c:	617b      	str	r3, [r7, #20]
  return(result);
 800539e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d13d      	bne.n	8005420 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a4:	f3ef 8310 	mrs	r3, PRIMASK
 80053a8:	613b      	str	r3, [r7, #16]
  return(result);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d137      	bne.n	8005420 <osEventFlagsNew+0x94>
 80053b0:	4b1e      	ldr	r3, [pc, #120]	; (800542c <osEventFlagsNew+0xa0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d105      	bne.n	80053c4 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053b8:	f3ef 8311 	mrs	r3, BASEPRI
 80053bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d12d      	bne.n	8005420 <osEventFlagsNew+0x94>
    mem = -1;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d015      	beq.n	80053fc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <osEventFlagsNew+0x5a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b1f      	cmp	r3, #31
 80053de:	d902      	bls.n	80053e6 <osEventFlagsNew+0x5a>
        mem = 1;
 80053e0:	2301      	movs	r3, #1
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e00c      	b.n	8005400 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d108      	bne.n	8005400 <osEventFlagsNew+0x74>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <osEventFlagsNew+0x74>
          mem = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e001      	b.n	8005400 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d106      	bne.n	8005414 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f9d2 	bl	80057b4 <xEventGroupCreateStatic>
 8005410:	61f8      	str	r0, [r7, #28]
 8005412:	e005      	b.n	8005420 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800541a:	f000 fa02 	bl	8005822 <xEventGroupCreate>
 800541e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005420:	69fb      	ldr	r3, [r7, #28]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	2000004c 	.word	0x2000004c

08005430 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b08c      	sub	sp, #48	; 0x30
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005440:	f3ef 8305 	mrs	r3, IPSR
 8005444:	61bb      	str	r3, [r7, #24]
  return(result);
 8005446:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005448:	2b00      	cmp	r3, #0
 800544a:	f040 8086 	bne.w	800555a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800544e:	f3ef 8310 	mrs	r3, PRIMASK
 8005452:	617b      	str	r3, [r7, #20]
  return(result);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d17f      	bne.n	800555a <osSemaphoreNew+0x12a>
 800545a:	4b42      	ldr	r3, [pc, #264]	; (8005564 <osSemaphoreNew+0x134>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d105      	bne.n	800546e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005462:	f3ef 8311 	mrs	r3, BASEPRI
 8005466:	613b      	str	r3, [r7, #16]
  return(result);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d175      	bne.n	800555a <osSemaphoreNew+0x12a>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d072      	beq.n	800555a <osSemaphoreNew+0x12a>
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	429a      	cmp	r2, r3
 800547a:	d86e      	bhi.n	800555a <osSemaphoreNew+0x12a>
    mem = -1;
 800547c:	f04f 33ff 	mov.w	r3, #4294967295
 8005480:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d015      	beq.n	80054b4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d006      	beq.n	800549e <osSemaphoreNew+0x6e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2b4f      	cmp	r3, #79	; 0x4f
 8005496:	d902      	bls.n	800549e <osSemaphoreNew+0x6e>
        mem = 1;
 8005498:	2301      	movs	r3, #1
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	e00c      	b.n	80054b8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d108      	bne.n	80054b8 <osSemaphoreNew+0x88>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <osSemaphoreNew+0x88>
          mem = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	623b      	str	r3, [r7, #32]
 80054b2:	e001      	b.n	80054b8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d04c      	beq.n	800555a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d128      	bne.n	8005518 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10a      	bne.n	80054e2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2203      	movs	r2, #3
 80054d2:	9200      	str	r2, [sp, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2100      	movs	r1, #0
 80054d8:	2001      	movs	r0, #1
 80054da:	f000 fad3 	bl	8005a84 <xQueueGenericCreateStatic>
 80054de:	6278      	str	r0, [r7, #36]	; 0x24
 80054e0:	e005      	b.n	80054ee <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80054e2:	2203      	movs	r2, #3
 80054e4:	2100      	movs	r1, #0
 80054e6:	2001      	movs	r0, #1
 80054e8:	f000 fb43 	bl	8005b72 <xQueueGenericCreate>
 80054ec:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d022      	beq.n	800553a <osSemaphoreNew+0x10a>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01f      	beq.n	800553a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80054fa:	2300      	movs	r3, #0
 80054fc:	2200      	movs	r2, #0
 80054fe:	2100      	movs	r1, #0
 8005500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005502:	f000 fc01 	bl	8005d08 <xQueueGenericSend>
 8005506:	4603      	mov	r3, r0
 8005508:	2b01      	cmp	r3, #1
 800550a:	d016      	beq.n	800553a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800550c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800550e:	f001 f88b 	bl	8006628 <vQueueDelete>
            hSemaphore = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
 8005516:	e010      	b.n	800553a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d108      	bne.n	8005530 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	461a      	mov	r2, r3
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fb84 	bl	8005c34 <xQueueCreateCountingSemaphoreStatic>
 800552c:	6278      	str	r0, [r7, #36]	; 0x24
 800552e:	e004      	b.n	800553a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fbb5 	bl	8005ca2 <xQueueCreateCountingSemaphore>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <osSemaphoreNew+0x11e>
          name = attr->name;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	e001      	b.n	8005552 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005552:	69f9      	ldr	r1, [r7, #28]
 8005554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005556:	f001 f9b1 	bl	80068bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800555c:	4618      	mov	r0, r3
 800555e:	3728      	adds	r7, #40	; 0x28
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	2000004c 	.word	0x2000004c

08005568 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d103      	bne.n	8005588 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005580:	f06f 0303 	mvn.w	r3, #3
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e04b      	b.n	8005620 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005588:	f3ef 8305 	mrs	r3, IPSR
 800558c:	617b      	str	r3, [r7, #20]
  return(result);
 800558e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10f      	bne.n	80055b4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005594:	f3ef 8310 	mrs	r3, PRIMASK
 8005598:	613b      	str	r3, [r7, #16]
  return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <osSemaphoreAcquire+0x4c>
 80055a0:	4b22      	ldr	r3, [pc, #136]	; (800562c <osSemaphoreAcquire+0xc4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d128      	bne.n	80055fa <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a8:	f3ef 8311 	mrs	r3, BASEPRI
 80055ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d022      	beq.n	80055fa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80055ba:	f06f 0303 	mvn.w	r3, #3
 80055be:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80055c0:	e02d      	b.n	800561e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80055c6:	f107 0308 	add.w	r3, r7, #8
 80055ca:	461a      	mov	r2, r3
 80055cc:	2100      	movs	r1, #0
 80055ce:	69b8      	ldr	r0, [r7, #24]
 80055d0:	f000 ffaa 	bl	8006528 <xQueueReceiveFromISR>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d003      	beq.n	80055e2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80055da:	f06f 0302 	mvn.w	r3, #2
 80055de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80055e0:	e01d      	b.n	800561e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01a      	beq.n	800561e <osSemaphoreAcquire+0xb6>
 80055e8:	4b11      	ldr	r3, [pc, #68]	; (8005630 <osSemaphoreAcquire+0xc8>)
 80055ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80055f8:	e011      	b.n	800561e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	69b8      	ldr	r0, [r7, #24]
 80055fe:	f000 fe87 	bl	8006310 <xQueueSemaphoreTake>
 8005602:	4603      	mov	r3, r0
 8005604:	2b01      	cmp	r3, #1
 8005606:	d00b      	beq.n	8005620 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800560e:	f06f 0301 	mvn.w	r3, #1
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	e004      	b.n	8005620 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005616:	f06f 0302 	mvn.w	r3, #2
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e000      	b.n	8005620 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800561e:	bf00      	nop
      }
    }
  }

  return (stat);
 8005620:	69fb      	ldr	r3, [r7, #28]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	2000004c 	.word	0x2000004c
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005640:	2300      	movs	r3, #0
 8005642:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800564a:	f06f 0303 	mvn.w	r3, #3
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	e03e      	b.n	80056d0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005652:	f3ef 8305 	mrs	r3, IPSR
 8005656:	617b      	str	r3, [r7, #20]
  return(result);
 8005658:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565e:	f3ef 8310 	mrs	r3, PRIMASK
 8005662:	613b      	str	r3, [r7, #16]
  return(result);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <osSemaphoreRelease+0x4a>
 800566a:	4b1c      	ldr	r3, [pc, #112]	; (80056dc <osSemaphoreRelease+0xa8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d120      	bne.n	80056b4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005672:	f3ef 8311 	mrs	r3, BASEPRI
 8005676:	60fb      	str	r3, [r7, #12]
  return(result);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01a      	beq.n	80056b4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4619      	mov	r1, r3
 8005688:	69b8      	ldr	r0, [r7, #24]
 800568a:	f000 fcd3 	bl	8006034 <xQueueGiveFromISR>
 800568e:	4603      	mov	r3, r0
 8005690:	2b01      	cmp	r3, #1
 8005692:	d003      	beq.n	800569c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005694:	f06f 0302 	mvn.w	r3, #2
 8005698:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800569a:	e018      	b.n	80056ce <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d015      	beq.n	80056ce <osSemaphoreRelease+0x9a>
 80056a2:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <osSemaphoreRelease+0xac>)
 80056a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056b2:	e00c      	b.n	80056ce <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056b4:	2300      	movs	r3, #0
 80056b6:	2200      	movs	r2, #0
 80056b8:	2100      	movs	r1, #0
 80056ba:	69b8      	ldr	r0, [r7, #24]
 80056bc:	f000 fb24 	bl	8005d08 <xQueueGenericSend>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d004      	beq.n	80056d0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80056c6:	f06f 0302 	mvn.w	r3, #2
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e000      	b.n	80056d0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056ce:	bf00      	nop
    }
  }

  return (stat);
 80056d0:	69fb      	ldr	r3, [r7, #28]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	2000004c 	.word	0x2000004c
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f0:	f3ef 8305 	mrs	r3, IPSR
 80056f4:	617b      	str	r3, [r7, #20]
  return(result);
 80056f6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10f      	bne.n	800571c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005700:	613b      	str	r3, [r7, #16]
  return(result);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <osSemaphoreDelete+0x38>
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <osSemaphoreDelete+0x68>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d109      	bne.n	8005724 <osSemaphoreDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005710:	f3ef 8311 	mrs	r3, BASEPRI
 8005714:	60fb      	str	r3, [r7, #12]
  return(result);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800571c:	f06f 0305 	mvn.w	r3, #5
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	e00e      	b.n	8005742 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800572a:	f06f 0303 	mvn.w	r3, #3
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	e007      	b.n	8005742 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005732:	69b8      	ldr	r0, [r7, #24]
 8005734:	f001 f8ea 	bl	800690c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800573c:	69b8      	ldr	r0, [r7, #24]
 800573e:	f000 ff73 	bl	8006628 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005742:	69fb      	ldr	r3, [r7, #28]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	2000004c 	.word	0x2000004c

08005750 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4a06      	ldr	r2, [pc, #24]	; (8005778 <vApplicationGetIdleTaskMemory+0x28>)
 8005760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4a05      	ldr	r2, [pc, #20]	; (800577c <vApplicationGetIdleTaskMemory+0x2c>)
 8005766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	601a      	str	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	20000050 	.word	0x20000050
 800577c:	200000ac 	.word	0x200000ac

08005780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a07      	ldr	r2, [pc, #28]	; (80057ac <vApplicationGetTimerTaskMemory+0x2c>)
 8005790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4a06      	ldr	r2, [pc, #24]	; (80057b0 <vApplicationGetTimerTaskMemory+0x30>)
 8005796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800579e:	601a      	str	r2, [r3, #0]
}
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	200002ac 	.word	0x200002ac
 80057b0:	20000308 	.word	0x20000308

080057b4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80057d8:	2320      	movs	r3, #32
 80057da:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d00a      	beq.n	80057f8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60fb      	str	r3, [r7, #12]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	3304      	adds	r3, #4
 800580c:	4618      	mov	r0, r3
 800580e:	f000 f822 	bl	8005856 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2201      	movs	r2, #1
 8005816:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005818:	697b      	ldr	r3, [r7, #20]
	}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005828:	2020      	movs	r0, #32
 800582a:	f002 ffef 	bl	800880c <pvPortMalloc>
 800582e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3304      	adds	r3, #4
 8005840:	4618      	mov	r0, r3
 8005842:	f000 f808 	bl	8005856 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800584c:	687b      	ldr	r3, [r7, #4]
	}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f103 0208 	add.w	r2, r3, #8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f04f 32ff 	mov.w	r2, #4294967295
 800586e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f103 0208 	add.w	r2, r3, #8
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f103 0208 	add.w	r2, r3, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d103      	bne.n	8005912 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	e00c      	b.n	800592c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3308      	adds	r3, #8
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e002      	b.n	8005920 <vListInsert+0x2e>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	429a      	cmp	r2, r3
 800592a:	d2f6      	bcs.n	800591a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6892      	ldr	r2, [r2, #8]
 8005978:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6852      	ldr	r2, [r2, #4]
 8005982:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	429a      	cmp	r2, r3
 800598c:	d103      	bne.n	8005996 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	1e5a      	subs	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xQueueGenericReset+0x2a>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60bb      	str	r3, [r7, #8]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059de:	f002 fe15 	bl	800860c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	68f9      	ldr	r1, [r7, #12]
 80059ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	441a      	add	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	68f9      	ldr	r1, [r7, #12]
 8005a12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	441a      	add	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d114      	bne.n	8005a5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01a      	beq.n	8005a72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3310      	adds	r3, #16
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fc17 	bl	8007274 <xTaskRemoveFromEventList>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d012      	beq.n	8005a72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <xQueueGenericReset+0xcc>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	e009      	b.n	8005a72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3310      	adds	r3, #16
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff fef7 	bl	8005856 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3324      	adds	r3, #36	; 0x24
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fef2 	bl	8005856 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a72:	f002 fdfb 	bl	800866c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a76:	2301      	movs	r3, #1
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08e      	sub	sp, #56	; 0x38
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <xQueueGenericCreateStatic+0x52>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <xQueueGenericCreateStatic+0x56>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <xQueueGenericCreateStatic+0x58>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	623b      	str	r3, [r7, #32]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <xQueueGenericCreateStatic+0x7e>
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <xQueueGenericCreateStatic+0x82>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <xQueueGenericCreateStatic+0x84>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	61fb      	str	r3, [r7, #28]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b22:	2350      	movs	r3, #80	; 0x50
 8005b24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b50      	cmp	r3, #80	; 0x50
 8005b2a:	d00a      	beq.n	8005b42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	61bb      	str	r3, [r7, #24]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b54:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f843 	bl	8005bee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3730      	adds	r7, #48	; 0x30
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b08a      	sub	sp, #40	; 0x28
 8005b76:	af02      	add	r7, sp, #8
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	613b      	str	r3, [r7, #16]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	e004      	b.n	8005bb2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
 8005bb0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3350      	adds	r3, #80	; 0x50
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f002 fe28 	bl	800880c <pvPortMalloc>
 8005bbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00f      	beq.n	8005be4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	3350      	adds	r3, #80	; 0x50
 8005bc8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bd2:	79fa      	ldrb	r2, [r7, #7]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f805 	bl	8005bee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005be4:	69bb      	ldr	r3, [r7, #24]
	}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	607a      	str	r2, [r7, #4]
 8005bfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e002      	b.n	8005c10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	69b8      	ldr	r0, [r7, #24]
 8005c20:	f7ff fec8 	bl	80059b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c2c:	bf00      	nop
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	61bb      	str	r3, [r7, #24]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d90a      	bls.n	8005c7a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	617b      	str	r3, [r7, #20]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff fefd 	bl	8005a84 <xQueueGenericCreateStatic>
 8005c8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c98:	69fb      	ldr	r3, [r7, #28]
	}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	613b      	str	r3, [r7, #16]
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d90a      	bls.n	8005ce6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60fb      	str	r3, [r7, #12]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ff41 	bl	8005b72 <xQueueGenericCreate>
 8005cf0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005cfe:	697b      	ldr	r3, [r7, #20]
	}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	; 0x38
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d16:	2300      	movs	r3, #0
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <xQueueGenericSend+0x32>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <xQueueGenericSend+0x40>
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <xQueueGenericSend+0x44>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <xQueueGenericSend+0x46>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <xQueueGenericSend+0x60>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d103      	bne.n	8005d76 <xQueueGenericSend+0x6e>
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <xQueueGenericSend+0x72>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <xQueueGenericSend+0x74>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <xQueueGenericSend+0x8e>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	623b      	str	r3, [r7, #32]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d96:	f001 fc31 	bl	80075fc <xTaskGetSchedulerState>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d102      	bne.n	8005da6 <xQueueGenericSend+0x9e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <xQueueGenericSend+0xa2>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <xQueueGenericSend+0xa4>
 8005daa:	2300      	movs	r3, #0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	61fb      	str	r3, [r7, #28]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dc6:	f002 fc21 	bl	800860c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <xQueueGenericSend+0xd4>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d129      	bne.n	8005e30 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005de2:	f000 fc5b 	bl	800669c <prvCopyDataToQueue>
 8005de6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d010      	beq.n	8005e12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	3324      	adds	r3, #36	; 0x24
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fa3d 	bl	8007274 <xTaskRemoveFromEventList>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d013      	beq.n	8005e28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e00:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <xQueueGenericSend+0x1f8>)
 8005e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	e00a      	b.n	8005e28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e18:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <xQueueGenericSend+0x1f8>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e28:	f002 fc20 	bl	800866c <vPortExitCritical>
				return pdPASS;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e063      	b.n	8005ef8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e36:	f002 fc19 	bl	800866c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e05c      	b.n	8005ef8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fa77 	bl	800733c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e52:	f002 fc0b 	bl	800866c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e56:	f000 ffe9 	bl	8006e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e5a:	f002 fbd7 	bl	800860c <vPortEnterCritical>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d103      	bne.n	8005e74 <xQueueGenericSend+0x16c>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e7a:	b25b      	sxtb	r3, r3
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d103      	bne.n	8005e8a <xQueueGenericSend+0x182>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8a:	f002 fbef 	bl	800866c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e8e:	1d3a      	adds	r2, r7, #4
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4611      	mov	r1, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 fa66 	bl	8007368 <xTaskCheckForTimeOut>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d124      	bne.n	8005eec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ea4:	f000 fcf2 	bl	800688c <prvIsQueueFull>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d018      	beq.n	8005ee0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 f98c 	bl	80071d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ebe:	f000 fc7d 	bl	80067bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ec2:	f000 ffc1 	bl	8006e48 <xTaskResumeAll>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f47f af7c 	bne.w	8005dc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <xQueueGenericSend+0x1f8>)
 8005ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	e772      	b.n	8005dc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee2:	f000 fc6b 	bl	80067bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ee6:	f000 ffaf 	bl	8006e48 <xTaskResumeAll>
 8005eea:	e76c      	b.n	8005dc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eee:	f000 fc65 	bl	80067bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ef2:	f000 ffa9 	bl	8006e48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ef6:	2300      	movs	r3, #0
		}
	}
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3738      	adds	r7, #56	; 0x38
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08e      	sub	sp, #56	; 0x38
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d103      	bne.n	8005f40 <xQueueGenericSendFromISR+0x3c>
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <xQueueGenericSendFromISR+0x40>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <xQueueGenericSendFromISR+0x42>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	623b      	str	r3, [r7, #32]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d103      	bne.n	8005f6e <xQueueGenericSendFromISR+0x6a>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <xQueueGenericSendFromISR+0x6e>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericSendFromISR+0x70>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	61fb      	str	r3, [r7, #28]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f8e:	f002 fbff 	bl	8008790 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f92:	f3ef 8211 	mrs	r2, BASEPRI
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	61ba      	str	r2, [r7, #24]
 8005fa8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005faa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <xQueueGenericSendFromISR+0xbc>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d12c      	bne.n	800601a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fd0:	f000 fb64 	bl	800669c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fdc:	d112      	bne.n	8006004 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d016      	beq.n	8006014 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	3324      	adds	r3, #36	; 0x24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 f942 	bl	8007274 <xTaskRemoveFromEventList>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e007      	b.n	8006014 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006008:	3301      	adds	r3, #1
 800600a:	b2db      	uxtb	r3, r3
 800600c:	b25a      	sxtb	r2, r3
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006014:	2301      	movs	r3, #1
 8006016:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006018:	e001      	b.n	800601e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800601a:	2300      	movs	r3, #0
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006028:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800602c:	4618      	mov	r0, r3
 800602e:	3738      	adds	r7, #56	; 0x38
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	; 0x38
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	623b      	str	r3, [r7, #32]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <xQueueGiveFromISR+0x48>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	61fb      	str	r3, [r7, #28]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <xQueueGiveFromISR+0x58>
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <xQueueGiveFromISR+0x5c>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <xQueueGiveFromISR+0x5e>
 8006090:	2300      	movs	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <xQueueGiveFromISR+0x78>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	61bb      	str	r3, [r7, #24]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060ac:	f002 fb70 	bl	8008790 <vPortValidateInterruptPriority>
	__asm volatile
 80060b0:	f3ef 8211 	mrs	r2, BASEPRI
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	617a      	str	r2, [r7, #20]
 80060c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060c8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d8:	429a      	cmp	r2, r3
 80060da:	d22b      	bcs.n	8006134 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d112      	bne.n	800611e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d016      	beq.n	800612e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	3324      	adds	r3, #36	; 0x24
 8006104:	4618      	mov	r0, r3
 8006106:	f001 f8b5 	bl	8007274 <xTaskRemoveFromEventList>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00e      	beq.n	800612e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2201      	movs	r2, #1
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	e007      	b.n	800612e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800611e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006122:	3301      	adds	r3, #1
 8006124:	b2db      	uxtb	r3, r3
 8006126:	b25a      	sxtb	r2, r3
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800612e:	2301      	movs	r3, #1
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
 8006132:	e001      	b.n	8006138 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006134:	2300      	movs	r3, #0
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f383 8811 	msr	BASEPRI, r3
}
 8006142:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006146:	4618      	mov	r0, r3
 8006148:	3738      	adds	r7, #56	; 0x38
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	; 0x30
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800615c:	2300      	movs	r3, #0
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <xQueueReceive+0x30>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	623b      	str	r3, [r7, #32]
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <xQueueReceive+0x3e>
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <xQueueReceive+0x42>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <xQueueReceive+0x44>
 8006192:	2300      	movs	r3, #0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <xQueueReceive+0x5e>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	61fb      	str	r3, [r7, #28]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ae:	f001 fa25 	bl	80075fc <xTaskGetSchedulerState>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <xQueueReceive+0x6e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueReceive+0x72>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueReceive+0x74>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueReceive+0x8e>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	61bb      	str	r3, [r7, #24]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80061de:	f002 fa15 	bl	800860c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01f      	beq.n	800622e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f2:	f000 fabd 	bl	8006770 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	1e5a      	subs	r2, r3, #1
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00f      	beq.n	8006226 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	3310      	adds	r3, #16
 800620a:	4618      	mov	r0, r3
 800620c:	f001 f832 	bl	8007274 <xTaskRemoveFromEventList>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006216:	4b3d      	ldr	r3, [pc, #244]	; (800630c <xQueueReceive+0x1bc>)
 8006218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006226:	f002 fa21 	bl	800866c <vPortExitCritical>
				return pdPASS;
 800622a:	2301      	movs	r3, #1
 800622c:	e069      	b.n	8006302 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006234:	f002 fa1a 	bl	800866c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006238:	2300      	movs	r3, #0
 800623a:	e062      	b.n	8006302 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006242:	f107 0310 	add.w	r3, r7, #16
 8006246:	4618      	mov	r0, r3
 8006248:	f001 f878 	bl	800733c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006250:	f002 fa0c 	bl	800866c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006254:	f000 fdea 	bl	8006e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006258:	f002 f9d8 	bl	800860c <vPortEnterCritical>
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006262:	b25b      	sxtb	r3, r3
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d103      	bne.n	8006272 <xQueueReceive+0x122>
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006278:	b25b      	sxtb	r3, r3
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d103      	bne.n	8006288 <xQueueReceive+0x138>
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006288:	f002 f9f0 	bl	800866c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800628c:	1d3a      	adds	r2, r7, #4
 800628e:	f107 0310 	add.w	r3, r7, #16
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f001 f867 	bl	8007368 <xTaskCheckForTimeOut>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d123      	bne.n	80062e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a2:	f000 fadd 	bl	8006860 <prvIsQueueEmpty>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d017      	beq.n	80062dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	3324      	adds	r3, #36	; 0x24
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4611      	mov	r1, r2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 ff8d 	bl	80071d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062bc:	f000 fa7e 	bl	80067bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c0:	f000 fdc2 	bl	8006e48 <xTaskResumeAll>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d189      	bne.n	80061de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062ca:	4b10      	ldr	r3, [pc, #64]	; (800630c <xQueueReceive+0x1bc>)
 80062cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	e780      	b.n	80061de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062de:	f000 fa6d 	bl	80067bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e2:	f000 fdb1 	bl	8006e48 <xTaskResumeAll>
 80062e6:	e77a      	b.n	80061de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ea:	f000 fa67 	bl	80067bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ee:	f000 fdab 	bl	8006e48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f4:	f000 fab4 	bl	8006860 <prvIsQueueEmpty>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f43f af6f 	beq.w	80061de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006300:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006302:	4618      	mov	r0, r3
 8006304:	3730      	adds	r7, #48	; 0x30
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	e000ed04 	.word	0xe000ed04

08006310 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08e      	sub	sp, #56	; 0x38
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800631a:	2300      	movs	r3, #0
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006322:	2300      	movs	r3, #0
 8006324:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	623b      	str	r3, [r7, #32]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	61fb      	str	r3, [r7, #28]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006360:	f001 f94c 	bl	80075fc <xTaskGetSchedulerState>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <xQueueSemaphoreTake+0x60>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <xQueueSemaphoreTake+0x64>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <xQueueSemaphoreTake+0x66>
 8006374:	2300      	movs	r3, #0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	61bb      	str	r3, [r7, #24]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006390:	f002 f93c 	bl	800860c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d024      	beq.n	80063ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	1e5a      	subs	r2, r3, #1
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80063b0:	f001 faa4 	bl	80078fc <pvTaskIncrementMutexHeldCount>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00f      	beq.n	80063e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	3310      	adds	r3, #16
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 ff54 	bl	8007274 <xTaskRemoveFromEventList>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063d2:	4b54      	ldr	r3, [pc, #336]	; (8006524 <xQueueSemaphoreTake+0x214>)
 80063d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063e2:	f002 f943 	bl	800866c <vPortExitCritical>
				return pdPASS;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e097      	b.n	800651a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d111      	bne.n	8006414 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	617b      	str	r3, [r7, #20]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800640c:	f002 f92e 	bl	800866c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006410:	2300      	movs	r3, #0
 8006412:	e082      	b.n	800651a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800641a:	f107 030c 	add.w	r3, r7, #12
 800641e:	4618      	mov	r0, r3
 8006420:	f000 ff8c 	bl	800733c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006428:	f002 f920 	bl	800866c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800642c:	f000 fcfe 	bl	8006e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006430:	f002 f8ec 	bl	800860c <vPortEnterCritical>
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800643a:	b25b      	sxtb	r3, r3
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d103      	bne.n	800644a <xQueueSemaphoreTake+0x13a>
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <xQueueSemaphoreTake+0x150>
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006460:	f002 f904 	bl	800866c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006464:	463a      	mov	r2, r7
 8006466:	f107 030c 	add.w	r3, r7, #12
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f000 ff7b 	bl	8007368 <xTaskCheckForTimeOut>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d132      	bne.n	80064de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800647a:	f000 f9f1 	bl	8006860 <prvIsQueueEmpty>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d026      	beq.n	80064d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d109      	bne.n	80064a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800648c:	f002 f8be 	bl	800860c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4618      	mov	r0, r3
 8006496:	f001 f8cf 	bl	8007638 <xTaskPriorityInherit>
 800649a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800649c:	f002 f8e6 	bl	800866c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	4611      	mov	r1, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fe93 	bl	80071d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064b0:	f000 f984 	bl	80067bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064b4:	f000 fcc8 	bl	8006e48 <xTaskResumeAll>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f47f af68 	bne.w	8006390 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064c0:	4b18      	ldr	r3, [pc, #96]	; (8006524 <xQueueSemaphoreTake+0x214>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	e75e      	b.n	8006390 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d4:	f000 f972 	bl	80067bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064d8:	f000 fcb6 	bl	8006e48 <xTaskResumeAll>
 80064dc:	e758      	b.n	8006390 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e0:	f000 f96c 	bl	80067bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064e4:	f000 fcb0 	bl	8006e48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ea:	f000 f9b9 	bl	8006860 <prvIsQueueEmpty>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f43f af4d 	beq.w	8006390 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00d      	beq.n	8006518 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80064fc:	f002 f886 	bl	800860c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006502:	f000 f8b4 	bl	800666e <prvGetDisinheritPriorityAfterTimeout>
 8006506:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f001 f96e 	bl	80077f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006514:	f002 f8aa 	bl	800866c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006518:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800651a:	4618      	mov	r0, r3
 800651c:	3738      	adds	r7, #56	; 0x38
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08e      	sub	sp, #56	; 0x38
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	623b      	str	r3, [r7, #32]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d103      	bne.n	8006562 <xQueueReceiveFromISR+0x3a>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <xQueueReceiveFromISR+0x3e>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <xQueueReceiveFromISR+0x40>
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	61fb      	str	r3, [r7, #28]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006582:	f002 f905 	bl	8008790 <vPortValidateInterruptPriority>
	__asm volatile
 8006586:	f3ef 8211 	mrs	r2, BASEPRI
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	61ba      	str	r2, [r7, #24]
 800659c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800659e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d02f      	beq.n	800660e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065bc:	f000 f8d8 	bl	8006770 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	1e5a      	subs	r2, r3, #1
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d112      	bne.n	80065f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d016      	beq.n	8006608 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	3310      	adds	r3, #16
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fe48 	bl	8007274 <xTaskRemoveFromEventList>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e007      	b.n	8006608 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80065f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065fc:	3301      	adds	r3, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	b25a      	sxtb	r2, r3
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006608:	2301      	movs	r3, #1
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
 800660c:	e001      	b.n	8006612 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800660e:	2300      	movs	r3, #0
 8006610:	637b      	str	r3, [r7, #52]	; 0x34
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f383 8811 	msr	BASEPRI, r3
}
 800661c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006620:	4618      	mov	r0, r3
 8006622:	3738      	adds	r7, #56	; 0x38
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <vQueueDelete+0x28>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60bb      	str	r3, [r7, #8]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f95b 	bl	800690c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f002 f997 	bl	8008994 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d006      	beq.n	800668c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	e001      	b.n	8006690 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006690:	68fb      	ldr	r3, [r7, #12]
	}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10d      	bne.n	80066d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d14d      	bne.n	800675e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 f824 	bl	8007714 <xTaskPriorityDisinherit>
 80066cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	605a      	str	r2, [r3, #4]
 80066d4:	e043      	b.n	800675e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d119      	bne.n	8006710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6898      	ldr	r0, [r3, #8]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	461a      	mov	r2, r3
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	f002 fa8c 	bl	8008c04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	441a      	add	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d32b      	bcc.n	800675e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	609a      	str	r2, [r3, #8]
 800670e:	e026      	b.n	800675e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68d8      	ldr	r0, [r3, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	461a      	mov	r2, r3
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	f002 fa72 	bl	8008c04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	425b      	negs	r3, r3
 800672a:	441a      	add	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d207      	bcs.n	800674c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	425b      	negs	r3, r3
 8006746:	441a      	add	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d105      	bne.n	800675e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	3b01      	subs	r3, #1
 800675c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006766:	697b      	ldr	r3, [r7, #20]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d018      	beq.n	80067b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	441a      	add	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d303      	bcc.n	80067a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68d9      	ldr	r1, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	461a      	mov	r2, r3
 80067ae:	6838      	ldr	r0, [r7, #0]
 80067b0:	f002 fa28 	bl	8008c04 <memcpy>
	}
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067c4:	f001 ff22 	bl	800860c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d0:	e011      	b.n	80067f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d012      	beq.n	8006800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3324      	adds	r3, #36	; 0x24
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fd48 	bl	8007274 <xTaskRemoveFromEventList>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067ea:	f000 fe1f 	bl	800742c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	dce9      	bgt.n	80067d2 <prvUnlockQueue+0x16>
 80067fe:	e000      	b.n	8006802 <prvUnlockQueue+0x46>
					break;
 8006800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	22ff      	movs	r2, #255	; 0xff
 8006806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800680a:	f001 ff2f 	bl	800866c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800680e:	f001 fefd 	bl	800860c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800681a:	e011      	b.n	8006840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3310      	adds	r3, #16
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fd23 	bl	8007274 <xTaskRemoveFromEventList>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006834:	f000 fdfa 	bl	800742c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	3b01      	subs	r3, #1
 800683c:	b2db      	uxtb	r3, r3
 800683e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006844:	2b00      	cmp	r3, #0
 8006846:	dce9      	bgt.n	800681c <prvUnlockQueue+0x60>
 8006848:	e000      	b.n	800684c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800684a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	22ff      	movs	r2, #255	; 0xff
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006854:	f001 ff0a 	bl	800866c <vPortExitCritical>
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006868:	f001 fed0 	bl	800860c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e001      	b.n	800687e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800687e:	f001 fef5 	bl	800866c <vPortExitCritical>

	return xReturn;
 8006882:	68fb      	ldr	r3, [r7, #12]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006894:	f001 feba 	bl	800860c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d102      	bne.n	80068aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e001      	b.n	80068ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068ae:	f001 fedd 	bl	800866c <vPortExitCritical>

	return xReturn;
 80068b2:	68fb      	ldr	r3, [r7, #12]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e014      	b.n	80068f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068cc:	4a0e      	ldr	r2, [pc, #56]	; (8006908 <vQueueAddToRegistry+0x4c>)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10b      	bne.n	80068f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068d8:	490b      	ldr	r1, [pc, #44]	; (8006908 <vQueueAddToRegistry+0x4c>)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068e2:	4a09      	ldr	r2, [pc, #36]	; (8006908 <vQueueAddToRegistry+0x4c>)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	4413      	add	r3, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068ee:	e006      	b.n	80068fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b07      	cmp	r3, #7
 80068fa:	d9e7      	bls.n	80068cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr
 8006908:	20002230 	.word	0x20002230

0800690c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e016      	b.n	8006948 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800691a:	4a10      	ldr	r2, [pc, #64]	; (800695c <vQueueUnregisterQueue+0x50>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	4413      	add	r3, r2
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	429a      	cmp	r2, r3
 8006928:	d10b      	bne.n	8006942 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800692a:	4a0c      	ldr	r2, [pc, #48]	; (800695c <vQueueUnregisterQueue+0x50>)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2100      	movs	r1, #0
 8006930:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006934:	4a09      	ldr	r2, [pc, #36]	; (800695c <vQueueUnregisterQueue+0x50>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	4413      	add	r3, r2
 800693c:	2200      	movs	r2, #0
 800693e:	605a      	str	r2, [r3, #4]
				break;
 8006940:	e006      	b.n	8006950 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b07      	cmp	r3, #7
 800694c:	d9e5      	bls.n	800691a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20002230 	.word	0x20002230

08006960 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006970:	f001 fe4c 	bl	800860c <vPortEnterCritical>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800697a:	b25b      	sxtb	r3, r3
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d103      	bne.n	800698a <vQueueWaitForMessageRestricted+0x2a>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006990:	b25b      	sxtb	r3, r3
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d103      	bne.n	80069a0 <vQueueWaitForMessageRestricted+0x40>
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a0:	f001 fe64 	bl	800866c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	3324      	adds	r3, #36	; 0x24
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fc31 	bl	800721c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	f7ff fefe 	bl	80067bc <prvUnlockQueue>
	}
 80069c0:	bf00      	nop
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08e      	sub	sp, #56	; 0x38
 80069cc:	af04      	add	r7, sp, #16
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	623b      	str	r3, [r7, #32]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xTaskCreateStatic+0x46>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	61fb      	str	r3, [r7, #28]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a0e:	235c      	movs	r3, #92	; 0x5c
 8006a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b5c      	cmp	r3, #92	; 0x5c
 8006a16:	d00a      	beq.n	8006a2e <xTaskCreateStatic+0x66>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	61bb      	str	r3, [r7, #24]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01e      	beq.n	8006a72 <xTaskCreateStatic+0xaa>
 8006a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01b      	beq.n	8006a72 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	9303      	str	r3, [sp, #12]
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	9302      	str	r3, [sp, #8]
 8006a54:	f107 0314 	add.w	r3, r7, #20
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f850 	bl	8006b0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a6c:	f000 f8d4 	bl	8006c18 <prvAddNewTaskToReadyList>
 8006a70:	e001      	b.n	8006a76 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a76:	697b      	ldr	r3, [r7, #20]
	}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3728      	adds	r7, #40	; 0x28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08c      	sub	sp, #48	; 0x30
 8006a84:	af04      	add	r7, sp, #16
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a90:	88fb      	ldrh	r3, [r7, #6]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 feb9 	bl	800880c <pvPortMalloc>
 8006a9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00e      	beq.n	8006ac0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006aa2:	205c      	movs	r0, #92	; 0x5c
 8006aa4:	f001 feb2 	bl	800880c <pvPortMalloc>
 8006aa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ab6:	e005      	b.n	8006ac4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ab8:	6978      	ldr	r0, [r7, #20]
 8006aba:	f001 ff6b 	bl	8008994 <vPortFree>
 8006abe:	e001      	b.n	8006ac4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d017      	beq.n	8006afa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ad2:	88fa      	ldrh	r2, [r7, #6]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9303      	str	r3, [sp, #12]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f80e 	bl	8006b0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aee:	69f8      	ldr	r0, [r7, #28]
 8006af0:	f000 f892 	bl	8006c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006af4:	2301      	movs	r3, #1
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	e002      	b.n	8006b00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006afa:	f04f 33ff 	mov.w	r3, #4294967295
 8006afe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b00:	69bb      	ldr	r3, [r7, #24]
	}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b088      	sub	sp, #32
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	461a      	mov	r2, r3
 8006b22:	21a5      	movs	r1, #165	; 0xa5
 8006b24:	f002 f87c 	bl	8008c20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b32:	3b01      	subs	r3, #1
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	617b      	str	r3, [r7, #20]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b62:	2300      	movs	r3, #0
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	e012      	b.n	8006b8e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	7819      	ldrb	r1, [r3, #0]
 8006b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	4413      	add	r3, r2
 8006b76:	3334      	adds	r3, #52	; 0x34
 8006b78:	460a      	mov	r2, r1
 8006b7a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	2b0f      	cmp	r3, #15
 8006b92:	d9e9      	bls.n	8006b68 <prvInitialiseNewTask+0x5e>
 8006b94:	e000      	b.n	8006b98 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006b96:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	2b37      	cmp	r3, #55	; 0x37
 8006ba4:	d901      	bls.n	8006baa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ba6:	2337      	movs	r3, #55	; 0x37
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2200      	movs	r2, #0
 8006bba:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe fe67 	bl	8005894 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	3318      	adds	r3, #24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fe62 	bl	8005894 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	2200      	movs	r2, #0
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	69b8      	ldr	r0, [r7, #24]
 8006bfa:	f001 fc17 	bl	800842c <pxPortInitialiseStack>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c10:	bf00      	nop
 8006c12:	3720      	adds	r7, #32
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c20:	f001 fcf4 	bl	800860c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c24:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <prvAddNewTaskToReadyList+0xc4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <prvAddNewTaskToReadyList+0xc4>)
 8006c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ce0 <prvAddNewTaskToReadyList+0xc8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d109      	bne.n	8006c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c36:	4a2a      	ldr	r2, [pc, #168]	; (8006ce0 <prvAddNewTaskToReadyList+0xc8>)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c3c:	4b27      	ldr	r3, [pc, #156]	; (8006cdc <prvAddNewTaskToReadyList+0xc4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d110      	bne.n	8006c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c44:	f000 fc18 	bl	8007478 <prvInitialiseTaskLists>
 8006c48:	e00d      	b.n	8006c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c4a:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <prvAddNewTaskToReadyList+0xcc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c52:	4b23      	ldr	r3, [pc, #140]	; (8006ce0 <prvAddNewTaskToReadyList+0xc8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d802      	bhi.n	8006c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c60:	4a1f      	ldr	r2, [pc, #124]	; (8006ce0 <prvAddNewTaskToReadyList+0xc8>)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c66:	4b20      	ldr	r3, [pc, #128]	; (8006ce8 <prvAddNewTaskToReadyList+0xd0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ce8 <prvAddNewTaskToReadyList+0xd0>)
 8006c6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c70:	4b1d      	ldr	r3, [pc, #116]	; (8006ce8 <prvAddNewTaskToReadyList+0xd0>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <prvAddNewTaskToReadyList+0xd4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d903      	bls.n	8006c8c <prvAddNewTaskToReadyList+0x74>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4a18      	ldr	r2, [pc, #96]	; (8006cec <prvAddNewTaskToReadyList+0xd4>)
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <prvAddNewTaskToReadyList+0xd8>)
 8006c9a:	441a      	add	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f7fe fe02 	bl	80058ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ca8:	f001 fce0 	bl	800866c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cac:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <prvAddNewTaskToReadyList+0xcc>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00e      	beq.n	8006cd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <prvAddNewTaskToReadyList+0xc8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d207      	bcs.n	8006cd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cc2:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <prvAddNewTaskToReadyList+0xdc>)
 8006cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000bdc 	.word	0x20000bdc
 8006ce0:	20000708 	.word	0x20000708
 8006ce4:	20000be8 	.word	0x20000be8
 8006ce8:	20000bf8 	.word	0x20000bf8
 8006cec:	20000be4 	.word	0x20000be4
 8006cf0:	2000070c 	.word	0x2000070c
 8006cf4:	e000ed04 	.word	0xe000ed04

08006cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d017      	beq.n	8006d3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d0a:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <vTaskDelay+0x60>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <vTaskDelay+0x30>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60bb      	str	r3, [r7, #8]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d28:	f000 f880 	bl	8006e2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 ff66 	bl	8007c00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d34:	f000 f888 	bl	8006e48 <xTaskResumeAll>
 8006d38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d107      	bne.n	8006d50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <vTaskDelay+0x64>)
 8006d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000c04 	.word	0x20000c04
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	; 0x28
 8006d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d6e:	463a      	mov	r2, r7
 8006d70:	1d39      	adds	r1, r7, #4
 8006d72:	f107 0308 	add.w	r3, r7, #8
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe fcea 	bl	8005750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	9202      	str	r2, [sp, #8]
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	2300      	movs	r3, #0
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	4921      	ldr	r1, [pc, #132]	; (8006e14 <vTaskStartScheduler+0xb4>)
 8006d90:	4821      	ldr	r0, [pc, #132]	; (8006e18 <vTaskStartScheduler+0xb8>)
 8006d92:	f7ff fe19 	bl	80069c8 <xTaskCreateStatic>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <vTaskStartScheduler+0xbc>)
 8006d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d9c:	4b1f      	ldr	r3, [pc, #124]	; (8006e1c <vTaskStartScheduler+0xbc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e001      	b.n	8006dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d102      	bne.n	8006dba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006db4:	f000 ff78 	bl	8007ca8 <xTimerCreateTimerTask>
 8006db8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d116      	bne.n	8006dee <vTaskStartScheduler+0x8e>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	613b      	str	r3, [r7, #16]
}
 8006dd2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd4:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <vTaskStartScheduler+0xc0>)
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ddc:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <vTaskStartScheduler+0xc4>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006de2:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <vTaskStartScheduler+0xc8>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006de8:	f001 fb9e 	bl	8008528 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dec:	e00e      	b.n	8006e0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d10a      	bne.n	8006e0c <vTaskStartScheduler+0xac>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60fb      	str	r3, [r7, #12]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <vTaskStartScheduler+0xaa>
}
 8006e0c:	bf00      	nop
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	08008cb0 	.word	0x08008cb0
 8006e18:	08007445 	.word	0x08007445
 8006e1c:	20000c00 	.word	0x20000c00
 8006e20:	20000bfc 	.word	0x20000bfc
 8006e24:	20000be8 	.word	0x20000be8
 8006e28:	20000be0 	.word	0x20000be0

08006e2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <vTaskSuspendAll+0x18>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a03      	ldr	r2, [pc, #12]	; (8006e44 <vTaskSuspendAll+0x18>)
 8006e38:	6013      	str	r3, [r2, #0]
}
 8006e3a:	bf00      	nop
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20000c04 	.word	0x20000c04

08006e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e56:	4b42      	ldr	r3, [pc, #264]	; (8006f60 <xTaskResumeAll+0x118>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	603b      	str	r3, [r7, #0]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e74:	f001 fbca 	bl	800860c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e78:	4b39      	ldr	r3, [pc, #228]	; (8006f60 <xTaskResumeAll+0x118>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	4a38      	ldr	r2, [pc, #224]	; (8006f60 <xTaskResumeAll+0x118>)
 8006e80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e82:	4b37      	ldr	r3, [pc, #220]	; (8006f60 <xTaskResumeAll+0x118>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d162      	bne.n	8006f50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e8a:	4b36      	ldr	r3, [pc, #216]	; (8006f64 <xTaskResumeAll+0x11c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d05e      	beq.n	8006f50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e92:	e02f      	b.n	8006ef4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e94:	4b34      	ldr	r3, [pc, #208]	; (8006f68 <xTaskResumeAll+0x120>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3318      	adds	r3, #24
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fe fd5e 	bl	8005962 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fd59 	bl	8005962 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb4:	4b2d      	ldr	r3, [pc, #180]	; (8006f6c <xTaskResumeAll+0x124>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d903      	bls.n	8006ec4 <xTaskResumeAll+0x7c>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a2a      	ldr	r2, [pc, #168]	; (8006f6c <xTaskResumeAll+0x124>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a27      	ldr	r2, [pc, #156]	; (8006f70 <xTaskResumeAll+0x128>)
 8006ed2:	441a      	add	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe fce6 	bl	80058ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	4b23      	ldr	r3, [pc, #140]	; (8006f74 <xTaskResumeAll+0x12c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d302      	bcc.n	8006ef4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006eee:	4b22      	ldr	r3, [pc, #136]	; (8006f78 <xTaskResumeAll+0x130>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef4:	4b1c      	ldr	r3, [pc, #112]	; (8006f68 <xTaskResumeAll+0x120>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1cb      	bne.n	8006e94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f02:	f000 fb57 	bl	80075b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <xTaskResumeAll+0x134>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d010      	beq.n	8006f34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f12:	f000 f845 	bl	8006fa0 <xTaskIncrementTick>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f1c:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <xTaskResumeAll+0x130>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f1      	bne.n	8006f12 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <xTaskResumeAll+0x134>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f34:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <xTaskResumeAll+0x130>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f40:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <xTaskResumeAll+0x138>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f50:	f001 fb8c 	bl	800866c <vPortExitCritical>

	return xAlreadyYielded;
 8006f54:	68bb      	ldr	r3, [r7, #8]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000c04 	.word	0x20000c04
 8006f64:	20000bdc 	.word	0x20000bdc
 8006f68:	20000b9c 	.word	0x20000b9c
 8006f6c:	20000be4 	.word	0x20000be4
 8006f70:	2000070c 	.word	0x2000070c
 8006f74:	20000708 	.word	0x20000708
 8006f78:	20000bf0 	.word	0x20000bf0
 8006f7c:	20000bec 	.word	0x20000bec
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f8a:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <xTaskGetTickCount+0x18>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f90:	687b      	ldr	r3, [r7, #4]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr
 8006f9c:	20000be0 	.word	0x20000be0

08006fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006faa:	4b51      	ldr	r3, [pc, #324]	; (80070f0 <xTaskIncrementTick+0x150>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f040 808e 	bne.w	80070d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fb4:	4b4f      	ldr	r3, [pc, #316]	; (80070f4 <xTaskIncrementTick+0x154>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fbc:	4a4d      	ldr	r2, [pc, #308]	; (80070f4 <xTaskIncrementTick+0x154>)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d120      	bne.n	800700a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fc8:	4b4b      	ldr	r3, [pc, #300]	; (80070f8 <xTaskIncrementTick+0x158>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	603b      	str	r3, [r7, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <xTaskIncrementTick+0x46>
 8006fe8:	4b43      	ldr	r3, [pc, #268]	; (80070f8 <xTaskIncrementTick+0x158>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	4b43      	ldr	r3, [pc, #268]	; (80070fc <xTaskIncrementTick+0x15c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a41      	ldr	r2, [pc, #260]	; (80070f8 <xTaskIncrementTick+0x158>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	4a41      	ldr	r2, [pc, #260]	; (80070fc <xTaskIncrementTick+0x15c>)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4b40      	ldr	r3, [pc, #256]	; (8007100 <xTaskIncrementTick+0x160>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	4a3f      	ldr	r2, [pc, #252]	; (8007100 <xTaskIncrementTick+0x160>)
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	f000 fad5 	bl	80075b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800700a:	4b3e      	ldr	r3, [pc, #248]	; (8007104 <xTaskIncrementTick+0x164>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	429a      	cmp	r2, r3
 8007012:	d34e      	bcc.n	80070b2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007014:	4b38      	ldr	r3, [pc, #224]	; (80070f8 <xTaskIncrementTick+0x158>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <xTaskIncrementTick+0x82>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <xTaskIncrementTick+0x84>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007028:	4b36      	ldr	r3, [pc, #216]	; (8007104 <xTaskIncrementTick+0x164>)
 800702a:	f04f 32ff 	mov.w	r2, #4294967295
 800702e:	601a      	str	r2, [r3, #0]
					break;
 8007030:	e03f      	b.n	80070b2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007032:	4b31      	ldr	r3, [pc, #196]	; (80070f8 <xTaskIncrementTick+0x158>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	429a      	cmp	r2, r3
 8007048:	d203      	bcs.n	8007052 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800704a:	4a2e      	ldr	r2, [pc, #184]	; (8007104 <xTaskIncrementTick+0x164>)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6013      	str	r3, [r2, #0]
						break;
 8007050:	e02f      	b.n	80070b2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fc83 	bl	8005962 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007060:	2b00      	cmp	r3, #0
 8007062:	d004      	beq.n	800706e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	3318      	adds	r3, #24
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fc7a 	bl	8005962 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007072:	4b25      	ldr	r3, [pc, #148]	; (8007108 <xTaskIncrementTick+0x168>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d903      	bls.n	8007082 <xTaskIncrementTick+0xe2>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a22      	ldr	r2, [pc, #136]	; (8007108 <xTaskIncrementTick+0x168>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a1f      	ldr	r2, [pc, #124]	; (800710c <xTaskIncrementTick+0x16c>)
 8007090:	441a      	add	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7fe fc07 	bl	80058ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <xTaskIncrementTick+0x170>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d3b3      	bcc.n	8007014 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b0:	e7b0      	b.n	8007014 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070b2:	4b17      	ldr	r3, [pc, #92]	; (8007110 <xTaskIncrementTick+0x170>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	4914      	ldr	r1, [pc, #80]	; (800710c <xTaskIncrementTick+0x16c>)
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d907      	bls.n	80070da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e004      	b.n	80070da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070d0:	4b10      	ldr	r3, [pc, #64]	; (8007114 <xTaskIncrementTick+0x174>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a0f      	ldr	r2, [pc, #60]	; (8007114 <xTaskIncrementTick+0x174>)
 80070d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070da:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <xTaskIncrementTick+0x178>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070e6:	697b      	ldr	r3, [r7, #20]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000c04 	.word	0x20000c04
 80070f4:	20000be0 	.word	0x20000be0
 80070f8:	20000b94 	.word	0x20000b94
 80070fc:	20000b98 	.word	0x20000b98
 8007100:	20000bf4 	.word	0x20000bf4
 8007104:	20000bfc 	.word	0x20000bfc
 8007108:	20000be4 	.word	0x20000be4
 800710c:	2000070c 	.word	0x2000070c
 8007110:	20000708 	.word	0x20000708
 8007114:	20000bec 	.word	0x20000bec
 8007118:	20000bf0 	.word	0x20000bf0

0800711c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007122:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <vTaskSwitchContext+0xa4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800712a:	4b26      	ldr	r3, [pc, #152]	; (80071c4 <vTaskSwitchContext+0xa8>)
 800712c:	2201      	movs	r2, #1
 800712e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007130:	e041      	b.n	80071b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <vTaskSwitchContext+0xa8>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007138:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <vTaskSwitchContext+0xac>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e010      	b.n	8007162 <vTaskSwitchContext+0x46>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <vTaskSwitchContext+0x40>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	607b      	str	r3, [r7, #4]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <vTaskSwitchContext+0x3e>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3b01      	subs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	491a      	ldr	r1, [pc, #104]	; (80071cc <vTaskSwitchContext+0xb0>)
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0e4      	beq.n	8007140 <vTaskSwitchContext+0x24>
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4a12      	ldr	r2, [pc, #72]	; (80071cc <vTaskSwitchContext+0xb0>)
 8007182:	4413      	add	r3, r2
 8007184:	60bb      	str	r3, [r7, #8]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	605a      	str	r2, [r3, #4]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	3308      	adds	r3, #8
 8007198:	429a      	cmp	r2, r3
 800719a:	d104      	bne.n	80071a6 <vTaskSwitchContext+0x8a>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <vTaskSwitchContext+0xb4>)
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	4a05      	ldr	r2, [pc, #20]	; (80071c8 <vTaskSwitchContext+0xac>)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6013      	str	r3, [r2, #0]
}
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr
 80071c0:	20000c04 	.word	0x20000c04
 80071c4:	20000bf0 	.word	0x20000bf0
 80071c8:	20000be4 	.word	0x20000be4
 80071cc:	2000070c 	.word	0x2000070c
 80071d0:	20000708 	.word	0x20000708

080071d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071fa:	4b07      	ldr	r3, [pc, #28]	; (8007218 <vTaskPlaceOnEventList+0x44>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3318      	adds	r3, #24
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fe fb75 	bl	80058f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007208:	2101      	movs	r1, #1
 800720a:	6838      	ldr	r0, [r7, #0]
 800720c:	f000 fcf8 	bl	8007c00 <prvAddCurrentTaskToDelayedList>
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20000708 	.word	0x20000708

0800721c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	617b      	str	r3, [r7, #20]
}
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <vTaskPlaceOnEventListRestricted+0x54>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3318      	adds	r3, #24
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7fe fb2d 	bl	80058ac <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007258:	f04f 33ff 	mov.w	r3, #4294967295
 800725c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	68b8      	ldr	r0, [r7, #8]
 8007262:	f000 fccd 	bl	8007c00 <prvAddCurrentTaskToDelayedList>
	}
 8007266:	bf00      	nop
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000708 	.word	0x20000708

08007274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60fb      	str	r3, [r7, #12]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	3318      	adds	r3, #24
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe fb5c 	bl	8005962 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072aa:	4b1e      	ldr	r3, [pc, #120]	; (8007324 <xTaskRemoveFromEventList+0xb0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d11d      	bne.n	80072ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3304      	adds	r3, #4
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fb53 	bl	8005962 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4b19      	ldr	r3, [pc, #100]	; (8007328 <xTaskRemoveFromEventList+0xb4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d903      	bls.n	80072d0 <xTaskRemoveFromEventList+0x5c>
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	4a16      	ldr	r2, [pc, #88]	; (8007328 <xTaskRemoveFromEventList+0xb4>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4a13      	ldr	r2, [pc, #76]	; (800732c <xTaskRemoveFromEventList+0xb8>)
 80072de:	441a      	add	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7fe fae0 	bl	80058ac <vListInsertEnd>
 80072ec:	e005      	b.n	80072fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	3318      	adds	r3, #24
 80072f2:	4619      	mov	r1, r3
 80072f4:	480e      	ldr	r0, [pc, #56]	; (8007330 <xTaskRemoveFromEventList+0xbc>)
 80072f6:	f7fe fad9 	bl	80058ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fe:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <xTaskRemoveFromEventList+0xc0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	429a      	cmp	r2, r3
 8007306:	d905      	bls.n	8007314 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007308:	2301      	movs	r3, #1
 800730a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <xTaskRemoveFromEventList+0xc4>)
 800730e:	2201      	movs	r2, #1
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e001      	b.n	8007318 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007318:	697b      	ldr	r3, [r7, #20]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000c04 	.word	0x20000c04
 8007328:	20000be4 	.word	0x20000be4
 800732c:	2000070c 	.word	0x2000070c
 8007330:	20000b9c 	.word	0x20000b9c
 8007334:	20000708 	.word	0x20000708
 8007338:	20000bf0 	.word	0x20000bf0

0800733c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <vTaskInternalSetTimeOutState+0x24>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <vTaskInternalSetTimeOutState+0x28>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	605a      	str	r2, [r3, #4]
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000bf4 	.word	0x20000bf4
 8007364:	20000be0 	.word	0x20000be0

08007368 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	613b      	str	r3, [r7, #16]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	60fb      	str	r3, [r7, #12]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073aa:	f001 f92f 	bl	800860c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073ae:	4b1d      	ldr	r3, [pc, #116]	; (8007424 <xTaskCheckForTimeOut+0xbc>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d102      	bne.n	80073ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	e023      	b.n	8007416 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b15      	ldr	r3, [pc, #84]	; (8007428 <xTaskCheckForTimeOut+0xc0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d007      	beq.n	80073ea <xTaskCheckForTimeOut+0x82>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d302      	bcc.n	80073ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	61fb      	str	r3, [r7, #28]
 80073e8:	e015      	b.n	8007416 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d20b      	bcs.n	800740c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	1ad2      	subs	r2, r2, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ff9b 	bl	800733c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	e004      	b.n	8007416 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007416:	f001 f929 	bl	800866c <vPortExitCritical>

	return xReturn;
 800741a:	69fb      	ldr	r3, [r7, #28]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000be0 	.word	0x20000be0
 8007428:	20000bf4 	.word	0x20000bf4

0800742c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007430:	4b03      	ldr	r3, [pc, #12]	; (8007440 <vTaskMissedYield+0x14>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]
}
 8007436:	bf00      	nop
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000bf0 	.word	0x20000bf0

08007444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800744c:	f000 f854 	bl	80074f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <prvIdleTask+0x2c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d907      	bls.n	8007468 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <prvIdleTask+0x30>)
 800745a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007468:	f7f8 fee2 	bl	8000230 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800746c:	e7ee      	b.n	800744c <prvIdleTask+0x8>
 800746e:	bf00      	nop
 8007470:	2000070c 	.word	0x2000070c
 8007474:	e000ed04 	.word	0xe000ed04

08007478 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800747e:	2300      	movs	r3, #0
 8007480:	607b      	str	r3, [r7, #4]
 8007482:	e00c      	b.n	800749e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4a12      	ldr	r2, [pc, #72]	; (80074d8 <prvInitialiseTaskLists+0x60>)
 8007490:	4413      	add	r3, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe f9df 	bl	8005856 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3301      	adds	r3, #1
 800749c:	607b      	str	r3, [r7, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b37      	cmp	r3, #55	; 0x37
 80074a2:	d9ef      	bls.n	8007484 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074a4:	480d      	ldr	r0, [pc, #52]	; (80074dc <prvInitialiseTaskLists+0x64>)
 80074a6:	f7fe f9d6 	bl	8005856 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074aa:	480d      	ldr	r0, [pc, #52]	; (80074e0 <prvInitialiseTaskLists+0x68>)
 80074ac:	f7fe f9d3 	bl	8005856 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074b0:	480c      	ldr	r0, [pc, #48]	; (80074e4 <prvInitialiseTaskLists+0x6c>)
 80074b2:	f7fe f9d0 	bl	8005856 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074b6:	480c      	ldr	r0, [pc, #48]	; (80074e8 <prvInitialiseTaskLists+0x70>)
 80074b8:	f7fe f9cd 	bl	8005856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074bc:	480b      	ldr	r0, [pc, #44]	; (80074ec <prvInitialiseTaskLists+0x74>)
 80074be:	f7fe f9ca 	bl	8005856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074c2:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <prvInitialiseTaskLists+0x78>)
 80074c4:	4a05      	ldr	r2, [pc, #20]	; (80074dc <prvInitialiseTaskLists+0x64>)
 80074c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <prvInitialiseTaskLists+0x7c>)
 80074ca:	4a05      	ldr	r2, [pc, #20]	; (80074e0 <prvInitialiseTaskLists+0x68>)
 80074cc:	601a      	str	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	2000070c 	.word	0x2000070c
 80074dc:	20000b6c 	.word	0x20000b6c
 80074e0:	20000b80 	.word	0x20000b80
 80074e4:	20000b9c 	.word	0x20000b9c
 80074e8:	20000bb0 	.word	0x20000bb0
 80074ec:	20000bc8 	.word	0x20000bc8
 80074f0:	20000b94 	.word	0x20000b94
 80074f4:	20000b98 	.word	0x20000b98

080074f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074fe:	e019      	b.n	8007534 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007500:	f001 f884 	bl	800860c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007504:	4b10      	ldr	r3, [pc, #64]	; (8007548 <prvCheckTasksWaitingTermination+0x50>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3304      	adds	r3, #4
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe fa26 	bl	8005962 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007516:	4b0d      	ldr	r3, [pc, #52]	; (800754c <prvCheckTasksWaitingTermination+0x54>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3b01      	subs	r3, #1
 800751c:	4a0b      	ldr	r2, [pc, #44]	; (800754c <prvCheckTasksWaitingTermination+0x54>)
 800751e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <prvCheckTasksWaitingTermination+0x58>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3b01      	subs	r3, #1
 8007526:	4a0a      	ldr	r2, [pc, #40]	; (8007550 <prvCheckTasksWaitingTermination+0x58>)
 8007528:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800752a:	f001 f89f 	bl	800866c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f810 	bl	8007554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <prvCheckTasksWaitingTermination+0x58>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e1      	bne.n	8007500 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000bb0 	.word	0x20000bb0
 800754c:	20000bdc 	.word	0x20000bdc
 8007550:	20000bc4 	.word	0x20000bc4

08007554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007562:	2b00      	cmp	r3, #0
 8007564:	d108      	bne.n	8007578 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	4618      	mov	r0, r3
 800756c:	f001 fa12 	bl	8008994 <vPortFree>
				vPortFree( pxTCB );
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 fa0f 	bl	8008994 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007576:	e018      	b.n	80075aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800757e:	2b01      	cmp	r3, #1
 8007580:	d103      	bne.n	800758a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fa06 	bl	8008994 <vPortFree>
	}
 8007588:	e00f      	b.n	80075aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007590:	2b02      	cmp	r3, #2
 8007592:	d00a      	beq.n	80075aa <prvDeleteTCB+0x56>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	60fb      	str	r3, [r7, #12]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <prvDeleteTCB+0x54>
	}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ba:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <prvResetNextTaskUnblockTime+0x40>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <prvResetNextTaskUnblockTime+0x14>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <prvResetNextTaskUnblockTime+0x16>
 80075c8:	2300      	movs	r3, #0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d004      	beq.n	80075d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075ce:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <prvResetNextTaskUnblockTime+0x44>)
 80075d0:	f04f 32ff 	mov.w	r2, #4294967295
 80075d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075d6:	e008      	b.n	80075ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <prvResetNextTaskUnblockTime+0x40>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4a04      	ldr	r2, [pc, #16]	; (80075f8 <prvResetNextTaskUnblockTime+0x44>)
 80075e8:	6013      	str	r3, [r2, #0]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr
 80075f4:	20000b94 	.word	0x20000b94
 80075f8:	20000bfc 	.word	0x20000bfc

080075fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007602:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <xTaskGetSchedulerState+0x34>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800760a:	2301      	movs	r3, #1
 800760c:	607b      	str	r3, [r7, #4]
 800760e:	e008      	b.n	8007622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007610:	4b08      	ldr	r3, [pc, #32]	; (8007634 <xTaskGetSchedulerState+0x38>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d102      	bne.n	800761e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007618:	2302      	movs	r3, #2
 800761a:	607b      	str	r3, [r7, #4]
 800761c:	e001      	b.n	8007622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007622:	687b      	ldr	r3, [r7, #4]
	}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	20000be8 	.word	0x20000be8
 8007634:	20000c04 	.word	0x20000c04

08007638 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d056      	beq.n	80076fc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007652:	4b2d      	ldr	r3, [pc, #180]	; (8007708 <xTaskPriorityInherit+0xd0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	429a      	cmp	r2, r3
 800765a:	d246      	bcs.n	80076ea <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	db06      	blt.n	8007672 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007664:	4b28      	ldr	r3, [pc, #160]	; (8007708 <xTaskPriorityInherit+0xd0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6959      	ldr	r1, [r3, #20]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4a22      	ldr	r2, [pc, #136]	; (800770c <xTaskPriorityInherit+0xd4>)
 8007684:	4413      	add	r3, r2
 8007686:	4299      	cmp	r1, r3
 8007688:	d101      	bne.n	800768e <xTaskPriorityInherit+0x56>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <xTaskPriorityInherit+0x58>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d022      	beq.n	80076da <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	3304      	adds	r3, #4
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe f962 	bl	8005962 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800769e:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <xTaskPriorityInherit+0xd0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	4b18      	ldr	r3, [pc, #96]	; (8007710 <xTaskPriorityInherit+0xd8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d903      	bls.n	80076bc <xTaskPriorityInherit+0x84>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	4a15      	ldr	r2, [pc, #84]	; (8007710 <xTaskPriorityInherit+0xd8>)
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4a10      	ldr	r2, [pc, #64]	; (800770c <xTaskPriorityInherit+0xd4>)
 80076ca:	441a      	add	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f7fe f8ea 	bl	80058ac <vListInsertEnd>
 80076d8:	e004      	b.n	80076e4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <xTaskPriorityInherit+0xd0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076e4:	2301      	movs	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e008      	b.n	80076fc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076ee:	4b06      	ldr	r3, [pc, #24]	; (8007708 <xTaskPriorityInherit+0xd0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d201      	bcs.n	80076fc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076f8:	2301      	movs	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076fc:	68fb      	ldr	r3, [r7, #12]
	}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000708 	.word	0x20000708
 800770c:	2000070c 	.word	0x2000070c
 8007710:	20000be4 	.word	0x20000be4

08007714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d056      	beq.n	80077d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800772a:	4b2e      	ldr	r3, [pc, #184]	; (80077e4 <xTaskPriorityDisinherit+0xd0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	429a      	cmp	r2, r3
 8007732:	d00a      	beq.n	800774a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60fb      	str	r3, [r7, #12]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60bb      	str	r3, [r7, #8]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776c:	1e5a      	subs	r2, r3, #1
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777a:	429a      	cmp	r2, r3
 800777c:	d02c      	beq.n	80077d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	2b00      	cmp	r3, #0
 8007784:	d128      	bne.n	80077d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	3304      	adds	r3, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe f8e9 	bl	8005962 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <xTaskPriorityDisinherit+0xd4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d903      	bls.n	80077b8 <xTaskPriorityDisinherit+0xa4>
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	4a0c      	ldr	r2, [pc, #48]	; (80077e8 <xTaskPriorityDisinherit+0xd4>)
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077bc:	4613      	mov	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4a09      	ldr	r2, [pc, #36]	; (80077ec <xTaskPriorityDisinherit+0xd8>)
 80077c6:	441a      	add	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7fe f86c 	bl	80058ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077d8:	697b      	ldr	r3, [r7, #20]
	}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000708 	.word	0x20000708
 80077e8:	20000be4 	.word	0x20000be4
 80077ec:	2000070c 	.word	0x2000070c

080077f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d06f      	beq.n	80078e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60fb      	str	r3, [r7, #12]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d902      	bls.n	8007836 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	e002      	b.n	800783c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	69fa      	ldr	r2, [r7, #28]
 8007842:	429a      	cmp	r2, r3
 8007844:	d050      	beq.n	80078e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	429a      	cmp	r2, r3
 800784e:	d14b      	bne.n	80078e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007850:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	429a      	cmp	r2, r3
 8007858:	d10a      	bne.n	8007870 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	60bb      	str	r3, [r7, #8]
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db04      	blt.n	800788e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	6959      	ldr	r1, [r3, #20]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4a15      	ldr	r2, [pc, #84]	; (80078f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800789e:	4413      	add	r3, r2
 80078a0:	4299      	cmp	r1, r3
 80078a2:	d101      	bne.n	80078a8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80078a4:	2301      	movs	r3, #1
 80078a6:	e000      	b.n	80078aa <vTaskPriorityDisinheritAfterTimeout+0xba>
 80078a8:	2300      	movs	r3, #0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01c      	beq.n	80078e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe f855 	bl	8005962 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	4b0e      	ldr	r3, [pc, #56]	; (80078f8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d903      	bls.n	80078cc <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	4a0b      	ldr	r2, [pc, #44]	; (80078f8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4a06      	ldr	r2, [pc, #24]	; (80078f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80078da:	441a      	add	r2, r3
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	3304      	adds	r3, #4
 80078e0:	4619      	mov	r1, r3
 80078e2:	4610      	mov	r0, r2
 80078e4:	f7fd ffe2 	bl	80058ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078e8:	bf00      	nop
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000708 	.word	0x20000708
 80078f4:	2000070c 	.word	0x2000070c
 80078f8:	20000be4 	.word	0x20000be4

080078fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007900:	4b07      	ldr	r3, [pc, #28]	; (8007920 <pvTaskIncrementMutexHeldCount+0x24>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007908:	4b05      	ldr	r3, [pc, #20]	; (8007920 <pvTaskIncrementMutexHeldCount+0x24>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800790e:	3201      	adds	r2, #1
 8007910:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007912:	4b03      	ldr	r3, [pc, #12]	; (8007920 <pvTaskIncrementMutexHeldCount+0x24>)
 8007914:	681b      	ldr	r3, [r3, #0]
	}
 8007916:	4618      	mov	r0, r3
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20000708 	.word	0x20000708

08007924 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08a      	sub	sp, #40	; 0x28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	4613      	mov	r3, r2
 8007932:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007934:	2301      	movs	r3, #1
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <xTaskGenericNotify+0x30>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	61bb      	str	r3, [r7, #24]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007958:	f000 fe58 	bl	800860c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007970:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	2b04      	cmp	r3, #4
 800797e:	d828      	bhi.n	80079d2 <xTaskGenericNotify+0xae>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <xTaskGenericNotify+0x64>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079d3 	.word	0x080079d3
 800798c:	0800799d 	.word	0x0800799d
 8007990:	080079ab 	.word	0x080079ab
 8007994:	080079b7 	.word	0x080079b7
 8007998:	080079bf 	.word	0x080079bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80079a8:	e013      	b.n	80079d2 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80079b4:	e00d      	b.n	80079d2 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80079bc:	e009      	b.n	80079d2 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80079be:	7ffb      	ldrb	r3, [r7, #31]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d003      	beq.n	80079cc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80079ca:	e001      	b.n	80079d0 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80079d0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079d2:	7ffb      	ldrb	r3, [r7, #31]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d13a      	bne.n	8007a4e <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	3304      	adds	r3, #4
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fd ffc0 	bl	8005962 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	4b1d      	ldr	r3, [pc, #116]	; (8007a5c <xTaskGenericNotify+0x138>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d903      	bls.n	80079f6 <xTaskGenericNotify+0xd2>
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	4a1a      	ldr	r2, [pc, #104]	; (8007a5c <xTaskGenericNotify+0x138>)
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4a17      	ldr	r2, [pc, #92]	; (8007a60 <xTaskGenericNotify+0x13c>)
 8007a04:	441a      	add	r2, r3
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f7fd ff4d 	bl	80058ac <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <xTaskGenericNotify+0x10c>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	617b      	str	r3, [r7, #20]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a34:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <xTaskGenericNotify+0x140>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d907      	bls.n	8007a4e <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007a3e:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <xTaskGenericNotify+0x144>)
 8007a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007a4e:	f000 fe0d 	bl	800866c <vPortExitCritical>

		return xReturn;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3728      	adds	r7, #40	; 0x28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20000be4 	.word	0x20000be4
 8007a60:	2000070c 	.word	0x2000070c
 8007a64:	20000708 	.word	0x20000708
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08e      	sub	sp, #56	; 0x38
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a9c:	f000 fe78 	bl	8008790 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007aa4:	f3ef 8211 	mrs	r2, BASEPRI
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	623a      	str	r2, [r7, #32]
 8007aba:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007abc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d828      	bhi.n	8007b38 <xTaskGenericNotifyFromISR+0xcc>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <xTaskGenericNotifyFromISR+0x80>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b39 	.word	0x08007b39
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b0f 	.word	0x08007b0f
 8007af8:	08007b1b 	.word	0x08007b1b
 8007afc:	08007b23 	.word	0x08007b23
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007b0c:	e014      	b.n	8007b38 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007b18:	e00e      	b.n	8007b38 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007b20:	e00a      	b.n	8007b38 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007b22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d003      	beq.n	8007b32 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007b30:	e001      	b.n	8007b36 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007b36:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007b38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d147      	bne.n	8007bd0 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	61bb      	str	r3, [r7, #24]
}
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b5e:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <xTaskGenericNotifyFromISR+0x17c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d11d      	bne.n	8007ba2 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fd fef9 	bl	8005962 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <xTaskGenericNotifyFromISR+0x180>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d903      	bls.n	8007b84 <xTaskGenericNotifyFromISR+0x118>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <xTaskGenericNotifyFromISR+0x180>)
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4a17      	ldr	r2, [pc, #92]	; (8007bf0 <xTaskGenericNotifyFromISR+0x184>)
 8007b92:	441a      	add	r2, r3
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f7fd fe86 	bl	80058ac <vListInsertEnd>
 8007ba0:	e005      	b.n	8007bae <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	3318      	adds	r3, #24
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4812      	ldr	r0, [pc, #72]	; (8007bf4 <xTaskGenericNotifyFromISR+0x188>)
 8007baa:	f7fd fe7f 	bl	80058ac <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb2:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <xTaskGenericNotifyFromISR+0x18c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d909      	bls.n	8007bd0 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	e002      	b.n	8007bd0 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8007bca:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <xTaskGenericNotifyFromISR+0x190>)
 8007bcc:	2201      	movs	r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f383 8811 	msr	BASEPRI, r3
}
 8007bda:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3738      	adds	r7, #56	; 0x38
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000c04 	.word	0x20000c04
 8007bec:	20000be4 	.word	0x20000be4
 8007bf0:	2000070c 	.word	0x2000070c
 8007bf4:	20000b9c 	.word	0x20000b9c
 8007bf8:	20000708 	.word	0x20000708
 8007bfc:	20000bf0 	.word	0x20000bf0

08007c00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c0a:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c10:	4b20      	ldr	r3, [pc, #128]	; (8007c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fd fea3 	bl	8005962 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d10a      	bne.n	8007c3a <prvAddCurrentTaskToDelayedList+0x3a>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d007      	beq.n	8007c3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c2a:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4819      	ldr	r0, [pc, #100]	; (8007c98 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c34:	f7fd fe3a 	bl	80058ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c38:	e026      	b.n	8007c88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c42:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d209      	bcs.n	8007c66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f7fd fe47 	bl	80058f2 <vListInsert>
}
 8007c64:	e010      	b.n	8007c88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c66:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	4619      	mov	r1, r3
 8007c72:	4610      	mov	r0, r2
 8007c74:	f7fd fe3d 	bl	80058f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d202      	bcs.n	8007c88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c82:	4a08      	ldr	r2, [pc, #32]	; (8007ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6013      	str	r3, [r2, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000be0 	.word	0x20000be0
 8007c94:	20000708 	.word	0x20000708
 8007c98:	20000bc8 	.word	0x20000bc8
 8007c9c:	20000b98 	.word	0x20000b98
 8007ca0:	20000b94 	.word	0x20000b94
 8007ca4:	20000bfc 	.word	0x20000bfc

08007ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cb2:	f000 fb5b 	bl	800836c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cb6:	4b1c      	ldr	r3, [pc, #112]	; (8007d28 <xTimerCreateTimerTask+0x80>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d021      	beq.n	8007d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cc6:	1d3a      	adds	r2, r7, #4
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	f107 030c 	add.w	r3, r7, #12
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fd fd55 	bl	8005780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	9202      	str	r2, [sp, #8]
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	2318      	movs	r3, #24
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	4910      	ldr	r1, [pc, #64]	; (8007d2c <xTimerCreateTimerTask+0x84>)
 8007cea:	4811      	ldr	r0, [pc, #68]	; (8007d30 <xTimerCreateTimerTask+0x88>)
 8007cec:	f7fe fe6c 	bl	80069c8 <xTaskCreateStatic>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <xTimerCreateTimerTask+0x8c>)
 8007cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <xTimerCreateTimerTask+0x8c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	613b      	str	r3, [r7, #16]
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d1e:	697b      	ldr	r3, [r7, #20]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000c38 	.word	0x20000c38
 8007d2c:	08008cb8 	.word	0x08008cb8
 8007d30:	08007f75 	.word	0x08007f75
 8007d34:	20000c3c 	.word	0x20000c3c

08007d38 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007d46:	2030      	movs	r0, #48	; 0x30
 8007d48:	f000 fd60 	bl	800880c <pvPortMalloc>
 8007d4c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00d      	beq.n	8007d70 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 f846 	bl	8007df4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007d70:	697b      	ldr	r3, [r7, #20]
	}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b08a      	sub	sp, #40	; 0x28
 8007d7e:	af02      	add	r7, sp, #8
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007d88:	2330      	movs	r3, #48	; 0x30
 8007d8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2b30      	cmp	r3, #48	; 0x30
 8007d90:	d00a      	beq.n	8007da8 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	61bb      	str	r3, [r7, #24]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <xTimerCreateStatic+0x4a>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	617b      	str	r3, [r7, #20]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00d      	beq.n	8007dea <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f809 	bl	8007df4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8007dea:	69fb      	ldr	r3, [r7, #28]
	}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3720      	adds	r7, #32
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	617b      	str	r3, [r7, #20]
}
 8007e1a:	bf00      	nop
 8007e1c:	e7fe      	b.n	8007e1c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d015      	beq.n	8007e50 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007e24:	f000 faa2 	bl	800836c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	6a3a      	ldr	r2, [r7, #32]
 8007e44:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fd fd22 	bl	8005894 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007e50:	bf00      	nop
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	623b      	str	r3, [r7, #32]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e86:	4b1a      	ldr	r3, [pc, #104]	; (8007ef0 <xTimerGenericCommand+0x98>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d02a      	beq.n	8007ee4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2b05      	cmp	r3, #5
 8007e9e:	dc18      	bgt.n	8007ed2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ea0:	f7ff fbac 	bl	80075fc <xTaskGetSchedulerState>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d109      	bne.n	8007ebe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007eaa:	4b11      	ldr	r3, [pc, #68]	; (8007ef0 <xTimerGenericCommand+0x98>)
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f107 0110 	add.w	r1, r7, #16
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb6:	f7fd ff27 	bl	8005d08 <xQueueGenericSend>
 8007eba:	6278      	str	r0, [r7, #36]	; 0x24
 8007ebc:	e012      	b.n	8007ee4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <xTimerGenericCommand+0x98>)
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	f107 0110 	add.w	r1, r7, #16
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f7fd ff1d 	bl	8005d08 <xQueueGenericSend>
 8007ece:	6278      	str	r0, [r7, #36]	; 0x24
 8007ed0:	e008      	b.n	8007ee4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ed2:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <xTimerGenericCommand+0x98>)
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	f107 0110 	add.w	r1, r7, #16
 8007eda:	2300      	movs	r3, #0
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	f7fe f811 	bl	8005f04 <xQueueGenericSendFromISR>
 8007ee2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3728      	adds	r7, #40	; 0x28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000c38 	.word	0x20000c38

08007ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007efe:	4b1c      	ldr	r3, [pc, #112]	; (8007f70 <prvProcessExpiredTimer+0x7c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fd fd28 	bl	8005962 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d122      	bne.n	8007f60 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	699a      	ldr	r2, [r3, #24]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	18d1      	adds	r1, r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	6978      	ldr	r0, [r7, #20]
 8007f28:	f000 f8c8 	bl	80080bc <prvInsertTimerInActiveList>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d016      	beq.n	8007f60 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f32:	2300      	movs	r3, #0
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	2300      	movs	r3, #0
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6978      	ldr	r0, [r7, #20]
 8007f3e:	f7ff ff8b 	bl	8007e58 <xTimerGenericCommand>
 8007f42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	60fb      	str	r3, [r7, #12]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	6978      	ldr	r0, [r7, #20]
 8007f66:	4798      	blx	r3
}
 8007f68:	bf00      	nop
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000c30 	.word	0x20000c30

08007f74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f7c:	f107 0308 	add.w	r3, r7, #8
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 f857 	bl	8008034 <prvGetNextExpireTime>
 8007f86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f803 	bl	8007f98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f92:	f000 f8d5 	bl	8008140 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f96:	e7f1      	b.n	8007f7c <prvTimerTask+0x8>

08007f98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fa2:	f7fe ff43 	bl	8006e2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fa6:	f107 0308 	add.w	r3, r7, #8
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f866 	bl	800807c <prvSampleTimeNow>
 8007fb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d130      	bne.n	800801a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <prvProcessTimerOrBlockTask+0x3c>
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d806      	bhi.n	8007fd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fc6:	f7fe ff3f 	bl	8006e48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fca:	68f9      	ldr	r1, [r7, #12]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff ff91 	bl	8007ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fd2:	e024      	b.n	800801e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d008      	beq.n	8007fec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fda:	4b13      	ldr	r3, [pc, #76]	; (8008028 <prvProcessTimerOrBlockTask+0x90>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2301      	moveq	r3, #1
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fec:	4b0f      	ldr	r3, [pc, #60]	; (800802c <prvProcessTimerOrBlockTask+0x94>)
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f7fe fcb1 	bl	8006960 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ffe:	f7fe ff23 	bl	8006e48 <xTaskResumeAll>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008008:	4b09      	ldr	r3, [pc, #36]	; (8008030 <prvProcessTimerOrBlockTask+0x98>)
 800800a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	f3bf 8f6f 	isb	sy
}
 8008018:	e001      	b.n	800801e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800801a:	f7fe ff15 	bl	8006e48 <xTaskResumeAll>
}
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20000c34 	.word	0x20000c34
 800802c:	20000c38 	.word	0x20000c38
 8008030:	e000ed04 	.word	0xe000ed04

08008034 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800803c:	4b0e      	ldr	r3, [pc, #56]	; (8008078 <prvGetNextExpireTime+0x44>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	bf0c      	ite	eq
 8008046:	2301      	moveq	r3, #1
 8008048:	2300      	movne	r3, #0
 800804a:	b2db      	uxtb	r3, r3
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800805a:	4b07      	ldr	r3, [pc, #28]	; (8008078 <prvGetNextExpireTime+0x44>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e001      	b.n	800806a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800806a:	68fb      	ldr	r3, [r7, #12]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000c30 	.word	0x20000c30

0800807c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008084:	f7fe ff7e 	bl	8006f84 <xTaskGetTickCount>
 8008088:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800808a:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <prvSampleTimeNow+0x3c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	429a      	cmp	r2, r3
 8008092:	d205      	bcs.n	80080a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008094:	f000 f908 	bl	80082a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	e002      	b.n	80080a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080a6:	4a04      	ldr	r2, [pc, #16]	; (80080b8 <prvSampleTimeNow+0x3c>)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080ac:	68fb      	ldr	r3, [r7, #12]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000c40 	.word	0x20000c40

080080bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d812      	bhi.n	8008108 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d302      	bcc.n	80080f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080f0:	2301      	movs	r3, #1
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	e01b      	b.n	800812e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <prvInsertTimerInActiveList+0x7c>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f7fd fbf6 	bl	80058f2 <vListInsert>
 8008106:	e012      	b.n	800812e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d206      	bcs.n	800811e <prvInsertTimerInActiveList+0x62>
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d302      	bcc.n	800811e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008118:	2301      	movs	r3, #1
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e007      	b.n	800812e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <prvInsertTimerInActiveList+0x80>)
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3304      	adds	r3, #4
 8008126:	4619      	mov	r1, r3
 8008128:	4610      	mov	r0, r2
 800812a:	f7fd fbe2 	bl	80058f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800812e:	697b      	ldr	r3, [r7, #20]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	20000c34 	.word	0x20000c34
 800813c:	20000c30 	.word	0x20000c30

08008140 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08e      	sub	sp, #56	; 0x38
 8008144:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008146:	e09d      	b.n	8008284 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	da18      	bge.n	8008180 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	3304      	adds	r3, #4
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10a      	bne.n	8008170 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	61fb      	str	r3, [r7, #28]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008176:	6850      	ldr	r0, [r2, #4]
 8008178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800817a:	6892      	ldr	r2, [r2, #8]
 800817c:	4611      	mov	r1, r2
 800817e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	db7d      	blt.n	8008282 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	3304      	adds	r3, #4
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd fbe3 	bl	8005962 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800819c:	463b      	mov	r3, r7
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff ff6c 	bl	800807c <prvSampleTimeNow>
 80081a4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b09      	cmp	r3, #9
 80081aa:	d86b      	bhi.n	8008284 <prvProcessReceivedCommands+0x144>
 80081ac:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <prvProcessReceivedCommands+0x74>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081dd 	.word	0x080081dd
 80081b8:	080081dd 	.word	0x080081dd
 80081bc:	080081dd 	.word	0x080081dd
 80081c0:	08008285 	.word	0x08008285
 80081c4:	08008239 	.word	0x08008239
 80081c8:	08008271 	.word	0x08008271
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	080081dd 	.word	0x080081dd
 80081d4:	08008285 	.word	0x08008285
 80081d8:	08008239 	.word	0x08008239
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	18d1      	adds	r1, r2, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ea:	f7ff ff67 	bl	80080bc <prvInsertTimerInActiveList>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d047      	beq.n	8008284 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d13f      	bne.n	8008284 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	441a      	add	r2, r3
 800820c:	2300      	movs	r3, #0
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	2300      	movs	r3, #0
 8008212:	2100      	movs	r1, #0
 8008214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008216:	f7ff fe1f 	bl	8007e58 <xTimerGenericCommand>
 800821a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d130      	bne.n	8008284 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	61bb      	str	r3, [r7, #24]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	617b      	str	r3, [r7, #20]
}
 8008258:	bf00      	nop
 800825a:	e7fe      	b.n	800825a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	18d1      	adds	r1, r2, r3
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800826a:	f7ff ff27 	bl	80080bc <prvInsertTimerInActiveList>
					break;
 800826e:	e009      	b.n	8008284 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d104      	bne.n	8008284 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800827a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827c:	f000 fb8a 	bl	8008994 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008280:	e000      	b.n	8008284 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008282:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008284:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <prvProcessReceivedCommands+0x164>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	1d39      	adds	r1, r7, #4
 800828a:	2200      	movs	r2, #0
 800828c:	4618      	mov	r0, r3
 800828e:	f7fd ff5f 	bl	8006150 <xQueueReceive>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	f47f af57 	bne.w	8008148 <prvProcessReceivedCommands+0x8>
	}
}
 800829a:	bf00      	nop
 800829c:	bf00      	nop
 800829e:	3730      	adds	r7, #48	; 0x30
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20000c38 	.word	0x20000c38

080082a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ae:	e045      	b.n	800833c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082b0:	4b2c      	ldr	r3, [pc, #176]	; (8008364 <prvSwitchTimerLists+0xbc>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082ba:	4b2a      	ldr	r3, [pc, #168]	; (8008364 <prvSwitchTimerLists+0xbc>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fd fb4a 	bl	8005962 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d12e      	bne.n	800833c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4413      	add	r3, r2
 80082e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d90e      	bls.n	800830e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082fc:	4b19      	ldr	r3, [pc, #100]	; (8008364 <prvSwitchTimerLists+0xbc>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f7fd faf3 	bl	80058f2 <vListInsert>
 800830c:	e016      	b.n	800833c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800830e:	2300      	movs	r3, #0
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	2100      	movs	r1, #0
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fd9d 	bl	8007e58 <xTimerGenericCommand>
 800831e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10a      	bne.n	800833c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	603b      	str	r3, [r7, #0]
}
 8008338:	bf00      	nop
 800833a:	e7fe      	b.n	800833a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800833c:	4b09      	ldr	r3, [pc, #36]	; (8008364 <prvSwitchTimerLists+0xbc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1b4      	bne.n	80082b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <prvSwitchTimerLists+0xbc>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800834c:	4b06      	ldr	r3, [pc, #24]	; (8008368 <prvSwitchTimerLists+0xc0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a04      	ldr	r2, [pc, #16]	; (8008364 <prvSwitchTimerLists+0xbc>)
 8008352:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008354:	4a04      	ldr	r2, [pc, #16]	; (8008368 <prvSwitchTimerLists+0xc0>)
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	6013      	str	r3, [r2, #0]
}
 800835a:	bf00      	nop
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000c30 	.word	0x20000c30
 8008368:	20000c34 	.word	0x20000c34

0800836c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008372:	f000 f94b 	bl	800860c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008376:	4b15      	ldr	r3, [pc, #84]	; (80083cc <prvCheckForValidListAndQueue+0x60>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d120      	bne.n	80083c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800837e:	4814      	ldr	r0, [pc, #80]	; (80083d0 <prvCheckForValidListAndQueue+0x64>)
 8008380:	f7fd fa69 	bl	8005856 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008384:	4813      	ldr	r0, [pc, #76]	; (80083d4 <prvCheckForValidListAndQueue+0x68>)
 8008386:	f7fd fa66 	bl	8005856 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <prvCheckForValidListAndQueue+0x6c>)
 800838c:	4a10      	ldr	r2, [pc, #64]	; (80083d0 <prvCheckForValidListAndQueue+0x64>)
 800838e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008390:	4b12      	ldr	r3, [pc, #72]	; (80083dc <prvCheckForValidListAndQueue+0x70>)
 8008392:	4a10      	ldr	r2, [pc, #64]	; (80083d4 <prvCheckForValidListAndQueue+0x68>)
 8008394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008396:	2300      	movs	r3, #0
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <prvCheckForValidListAndQueue+0x74>)
 800839c:	4a11      	ldr	r2, [pc, #68]	; (80083e4 <prvCheckForValidListAndQueue+0x78>)
 800839e:	2110      	movs	r1, #16
 80083a0:	200a      	movs	r0, #10
 80083a2:	f7fd fb6f 	bl	8005a84 <xQueueGenericCreateStatic>
 80083a6:	4603      	mov	r3, r0
 80083a8:	4a08      	ldr	r2, [pc, #32]	; (80083cc <prvCheckForValidListAndQueue+0x60>)
 80083aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083ac:	4b07      	ldr	r3, [pc, #28]	; (80083cc <prvCheckForValidListAndQueue+0x60>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <prvCheckForValidListAndQueue+0x60>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	490b      	ldr	r1, [pc, #44]	; (80083e8 <prvCheckForValidListAndQueue+0x7c>)
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fa7e 	bl	80068bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083c0:	f000 f954 	bl	800866c <vPortExitCritical>
}
 80083c4:	bf00      	nop
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000c38 	.word	0x20000c38
 80083d0:	20000c08 	.word	0x20000c08
 80083d4:	20000c1c 	.word	0x20000c1c
 80083d8:	20000c30 	.word	0x20000c30
 80083dc:	20000c34 	.word	0x20000c34
 80083e0:	20000ce4 	.word	0x20000ce4
 80083e4:	20000c44 	.word	0x20000c44
 80083e8:	08008cc0 	.word	0x08008cc0

080083ec <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <pvTimerGetTimerID+0x28>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60fb      	str	r3, [r7, #12]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008414:	f000 f8fa 	bl	800860c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800841e:	f000 f925 	bl	800866c <vPortExitCritical>

	return pvReturn;
 8008422:	693b      	ldr	r3, [r7, #16]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3b04      	subs	r3, #4
 800843c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3b04      	subs	r3, #4
 800844a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f023 0201 	bic.w	r2, r3, #1
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3b04      	subs	r3, #4
 800845a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800845c:	4a08      	ldr	r2, [pc, #32]	; (8008480 <pxPortInitialiseStack+0x54>)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3b14      	subs	r3, #20
 8008466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b20      	subs	r3, #32
 8008472:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr
 8008480:	08008485 	.word	0x08008485

08008484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800848a:	2300      	movs	r3, #0
 800848c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800848e:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <prvTaskExitError+0x54>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008496:	d00a      	beq.n	80084ae <prvTaskExitError+0x2a>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	60fb      	str	r3, [r7, #12]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <prvTaskExitError+0x28>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60bb      	str	r3, [r7, #8]
}
 80084c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084c2:	bf00      	nop
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0fc      	beq.n	80084c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	2000002c 	.word	0x2000002c
 80084dc:	00000000 	.word	0x00000000

080084e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <pxCurrentTCBConst2>)
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084ea:	f380 8809 	msr	PSP, r0
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f380 8811 	msr	BASEPRI, r0
 80084fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80084fe:	4770      	bx	lr

08008500 <pxCurrentTCBConst2>:
 8008500:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008508:	4806      	ldr	r0, [pc, #24]	; (8008524 <prvPortStartFirstTask+0x1c>)
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	6800      	ldr	r0, [r0, #0]
 800850e:	f380 8808 	msr	MSP, r0
 8008512:	b662      	cpsie	i
 8008514:	b661      	cpsie	f
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	df00      	svc	0
 8008520:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008522:	bf00      	nop
 8008524:	e000ed08 	.word	0xe000ed08

08008528 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800852e:	4b32      	ldr	r3, [pc, #200]	; (80085f8 <xPortStartScheduler+0xd0>)
 8008530:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	22ff      	movs	r2, #255	; 0xff
 800853e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	b2db      	uxtb	r3, r3
 800854c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008550:	b2da      	uxtb	r2, r3
 8008552:	4b2a      	ldr	r3, [pc, #168]	; (80085fc <xPortStartScheduler+0xd4>)
 8008554:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008556:	4b2a      	ldr	r3, [pc, #168]	; (8008600 <xPortStartScheduler+0xd8>)
 8008558:	2207      	movs	r2, #7
 800855a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800855c:	e009      	b.n	8008572 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800855e:	4b28      	ldr	r3, [pc, #160]	; (8008600 <xPortStartScheduler+0xd8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3b01      	subs	r3, #1
 8008564:	4a26      	ldr	r2, [pc, #152]	; (8008600 <xPortStartScheduler+0xd8>)
 8008566:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	b2db      	uxtb	r3, r3
 8008570:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857a:	2b80      	cmp	r3, #128	; 0x80
 800857c:	d0ef      	beq.n	800855e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800857e:	4b20      	ldr	r3, [pc, #128]	; (8008600 <xPortStartScheduler+0xd8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f1c3 0307 	rsb	r3, r3, #7
 8008586:	2b04      	cmp	r3, #4
 8008588:	d00a      	beq.n	80085a0 <xPortStartScheduler+0x78>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	60bb      	str	r3, [r7, #8]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085a0:	4b17      	ldr	r3, [pc, #92]	; (8008600 <xPortStartScheduler+0xd8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	021b      	lsls	r3, r3, #8
 80085a6:	4a16      	ldr	r2, [pc, #88]	; (8008600 <xPortStartScheduler+0xd8>)
 80085a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085aa:	4b15      	ldr	r3, [pc, #84]	; (8008600 <xPortStartScheduler+0xd8>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085b2:	4a13      	ldr	r2, [pc, #76]	; (8008600 <xPortStartScheduler+0xd8>)
 80085b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085be:	4b11      	ldr	r3, [pc, #68]	; (8008604 <xPortStartScheduler+0xdc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a10      	ldr	r2, [pc, #64]	; (8008604 <xPortStartScheduler+0xdc>)
 80085c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80085c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085ca:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <xPortStartScheduler+0xdc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a0d      	ldr	r2, [pc, #52]	; (8008604 <xPortStartScheduler+0xdc>)
 80085d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80085d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085d6:	f000 f8b9 	bl	800874c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <xPortStartScheduler+0xe0>)
 80085dc:	2200      	movs	r2, #0
 80085de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085e0:	f7ff ff92 	bl	8008508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085e4:	f7fe fd9a 	bl	800711c <vTaskSwitchContext>
	prvTaskExitError();
 80085e8:	f7ff ff4c 	bl	8008484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	e000e400 	.word	0xe000e400
 80085fc:	20000d34 	.word	0x20000d34
 8008600:	20000d38 	.word	0x20000d38
 8008604:	e000ed20 	.word	0xe000ed20
 8008608:	2000002c 	.word	0x2000002c

0800860c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	607b      	str	r3, [r7, #4]
}
 8008624:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <vPortEnterCritical+0x58>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3301      	adds	r3, #1
 800862c:	4a0d      	ldr	r2, [pc, #52]	; (8008664 <vPortEnterCritical+0x58>)
 800862e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008630:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <vPortEnterCritical+0x58>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d10f      	bne.n	8008658 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008638:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <vPortEnterCritical+0x5c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <vPortEnterCritical+0x4c>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	603b      	str	r3, [r7, #0]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <vPortEnterCritical+0x4a>
	}
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	bc80      	pop	{r7}
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	2000002c 	.word	0x2000002c
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008672:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <vPortExitCritical+0x4c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <vPortExitCritical+0x24>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	607b      	str	r3, [r7, #4]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008690:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <vPortExitCritical+0x4c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3b01      	subs	r3, #1
 8008696:	4a08      	ldr	r2, [pc, #32]	; (80086b8 <vPortExitCritical+0x4c>)
 8008698:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800869a:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <vPortExitCritical+0x4c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d105      	bne.n	80086ae <vPortExitCritical+0x42>
 80086a2:	2300      	movs	r3, #0
 80086a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	f383 8811 	msr	BASEPRI, r3
}
 80086ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr
 80086b8:	2000002c 	.word	0x2000002c
 80086bc:	00000000 	.word	0x00000000

080086c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

__asm volatile
 80086c0:	f3ef 8009 	mrs	r0, PSP
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <pxCurrentTCBConst>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086d0:	6010      	str	r0, [r2, #0]
 80086d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80086d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086da:	f380 8811 	msr	BASEPRI, r0
 80086de:	f7fe fd1d 	bl	800711c <vTaskSwitchContext>
 80086e2:	f04f 0000 	mov.w	r0, #0
 80086e6:	f380 8811 	msr	BASEPRI, r0
 80086ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086ee:	6819      	ldr	r1, [r3, #0]
 80086f0:	6808      	ldr	r0, [r1, #0]
 80086f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086f6:	f380 8809 	msr	PSP, r0
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	4770      	bx	lr

08008700 <pxCurrentTCBConst>:
 8008700:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop

08008708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	607b      	str	r3, [r7, #4]
}
 8008720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008722:	f7fe fc3d 	bl	8006fa0 <xTaskIncrementTick>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800872c:	4b06      	ldr	r3, [pc, #24]	; (8008748 <xPortSysTickHandler+0x40>)
 800872e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	2300      	movs	r3, #0
 8008736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f383 8811 	msr	BASEPRI, r3
}
 800873e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <vPortSetupTimerInterrupt+0x30>)
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008756:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <vPortSetupTimerInterrupt+0x34>)
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <vPortSetupTimerInterrupt+0x38>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a09      	ldr	r2, [pc, #36]	; (8008788 <vPortSetupTimerInterrupt+0x3c>)
 8008762:	fba2 2303 	umull	r2, r3, r2, r3
 8008766:	099b      	lsrs	r3, r3, #6
 8008768:	4a08      	ldr	r2, [pc, #32]	; (800878c <vPortSetupTimerInterrupt+0x40>)
 800876a:	3b01      	subs	r3, #1
 800876c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800876e:	4b03      	ldr	r3, [pc, #12]	; (800877c <vPortSetupTimerInterrupt+0x30>)
 8008770:	2207      	movs	r2, #7
 8008772:	601a      	str	r2, [r3, #0]
}
 8008774:	bf00      	nop
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr
 800877c:	e000e010 	.word	0xe000e010
 8008780:	e000e018 	.word	0xe000e018
 8008784:	20000000 	.word	0x20000000
 8008788:	10624dd3 	.word	0x10624dd3
 800878c:	e000e014 	.word	0xe000e014

08008790 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008796:	f3ef 8305 	mrs	r3, IPSR
 800879a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b0f      	cmp	r3, #15
 80087a0:	d914      	bls.n	80087cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087a2:	4a16      	ldr	r2, [pc, #88]	; (80087fc <vPortValidateInterruptPriority+0x6c>)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4413      	add	r3, r2
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087ac:	4b14      	ldr	r3, [pc, #80]	; (8008800 <vPortValidateInterruptPriority+0x70>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	7afa      	ldrb	r2, [r7, #11]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d20a      	bcs.n	80087cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	607b      	str	r3, [r7, #4]
}
 80087c8:	bf00      	nop
 80087ca:	e7fe      	b.n	80087ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087cc:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <vPortValidateInterruptPriority+0x74>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <vPortValidateInterruptPriority+0x78>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d90a      	bls.n	80087f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	603b      	str	r3, [r7, #0]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <vPortValidateInterruptPriority+0x60>
	}
 80087f2:	bf00      	nop
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	e000e3f0 	.word	0xe000e3f0
 8008800:	20000d34 	.word	0x20000d34
 8008804:	e000ed0c 	.word	0xe000ed0c
 8008808:	20000d38 	.word	0x20000d38

0800880c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008814:	2300      	movs	r3, #0
 8008816:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008818:	f7fe fb08 	bl	8006e2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800881c:	4b58      	ldr	r3, [pc, #352]	; (8008980 <pvPortMalloc+0x174>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008824:	f000 f910 	bl	8008a48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008828:	4b56      	ldr	r3, [pc, #344]	; (8008984 <pvPortMalloc+0x178>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4013      	ands	r3, r2
 8008830:	2b00      	cmp	r3, #0
 8008832:	f040 808e 	bne.w	8008952 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01d      	beq.n	8008878 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800883c:	2208      	movs	r2, #8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4413      	add	r3, r2
 8008842:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	2b00      	cmp	r3, #0
 800884c:	d014      	beq.n	8008878 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f023 0307 	bic.w	r3, r3, #7
 8008854:	3308      	adds	r3, #8
 8008856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00a      	beq.n	8008878 <pvPortMalloc+0x6c>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	617b      	str	r3, [r7, #20]
}
 8008874:	bf00      	nop
 8008876:	e7fe      	b.n	8008876 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d069      	beq.n	8008952 <pvPortMalloc+0x146>
 800887e:	4b42      	ldr	r3, [pc, #264]	; (8008988 <pvPortMalloc+0x17c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d864      	bhi.n	8008952 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008888:	4b40      	ldr	r3, [pc, #256]	; (800898c <pvPortMalloc+0x180>)
 800888a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800888c:	4b3f      	ldr	r3, [pc, #252]	; (800898c <pvPortMalloc+0x180>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008892:	e004      	b.n	800889e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d903      	bls.n	80088b0 <pvPortMalloc+0xa4>
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f1      	bne.n	8008894 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088b0:	4b33      	ldr	r3, [pc, #204]	; (8008980 <pvPortMalloc+0x174>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d04b      	beq.n	8008952 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2208      	movs	r2, #8
 80088c0:	4413      	add	r3, r2
 80088c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	1ad2      	subs	r2, r2, r3
 80088d4:	2308      	movs	r3, #8
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	429a      	cmp	r2, r3
 80088da:	d91f      	bls.n	800891c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4413      	add	r3, r2
 80088e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00a      	beq.n	8008904 <pvPortMalloc+0xf8>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	613b      	str	r3, [r7, #16]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	1ad2      	subs	r2, r2, r3
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008916:	69b8      	ldr	r0, [r7, #24]
 8008918:	f000 f8f8 	bl	8008b0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800891c:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <pvPortMalloc+0x17c>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	4a18      	ldr	r2, [pc, #96]	; (8008988 <pvPortMalloc+0x17c>)
 8008928:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800892a:	4b17      	ldr	r3, [pc, #92]	; (8008988 <pvPortMalloc+0x17c>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4b18      	ldr	r3, [pc, #96]	; (8008990 <pvPortMalloc+0x184>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d203      	bcs.n	800893e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <pvPortMalloc+0x17c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a15      	ldr	r2, [pc, #84]	; (8008990 <pvPortMalloc+0x184>)
 800893c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	4b10      	ldr	r3, [pc, #64]	; (8008984 <pvPortMalloc+0x178>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	431a      	orrs	r2, r3
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008952:	f7fe fa79 	bl	8006e48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <pvPortMalloc+0x16a>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	60fb      	str	r3, [r7, #12]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <pvPortMalloc+0x168>
	return pvReturn;
 8008976:	69fb      	ldr	r3, [r7, #28]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3728      	adds	r7, #40	; 0x28
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20001944 	.word	0x20001944
 8008984:	20001950 	.word	0x20001950
 8008988:	20001948 	.word	0x20001948
 800898c:	2000193c 	.word	0x2000193c
 8008990:	2000194c 	.word	0x2000194c

08008994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d048      	beq.n	8008a38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089a6:	2308      	movs	r3, #8
 80089a8:	425b      	negs	r3, r3
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4413      	add	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	4b21      	ldr	r3, [pc, #132]	; (8008a40 <vPortFree+0xac>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4013      	ands	r3, r2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10a      	bne.n	80089d8 <vPortFree+0x44>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	60fb      	str	r3, [r7, #12]
}
 80089d4:	bf00      	nop
 80089d6:	e7fe      	b.n	80089d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <vPortFree+0x62>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60bb      	str	r3, [r7, #8]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <vPortFree+0xac>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d019      	beq.n	8008a38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d115      	bne.n	8008a38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <vPortFree+0xac>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	43db      	mvns	r3, r3
 8008a16:	401a      	ands	r2, r3
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a1c:	f7fe fa06 	bl	8006e2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <vPortFree+0xb0>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4413      	add	r3, r2
 8008a2a:	4a06      	ldr	r2, [pc, #24]	; (8008a44 <vPortFree+0xb0>)
 8008a2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a2e:	6938      	ldr	r0, [r7, #16]
 8008a30:	f000 f86c 	bl	8008b0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a34:	f7fe fa08 	bl	8006e48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a38:	bf00      	nop
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20001950 	.word	0x20001950
 8008a44:	20001948 	.word	0x20001948

08008a48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008a52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a54:	4b27      	ldr	r3, [pc, #156]	; (8008af4 <prvHeapInit+0xac>)
 8008a56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00c      	beq.n	8008a7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3307      	adds	r3, #7
 8008a66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0307 	bic.w	r3, r3, #7
 8008a6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	4a1f      	ldr	r2, [pc, #124]	; (8008af4 <prvHeapInit+0xac>)
 8008a78:	4413      	add	r3, r2
 8008a7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a80:	4a1d      	ldr	r2, [pc, #116]	; (8008af8 <prvHeapInit+0xb0>)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a86:	4b1c      	ldr	r3, [pc, #112]	; (8008af8 <prvHeapInit+0xb0>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a94:	2208      	movs	r2, #8
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0307 	bic.w	r3, r3, #7
 8008aa2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4a15      	ldr	r2, [pc, #84]	; (8008afc <prvHeapInit+0xb4>)
 8008aa8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008aaa:	4b14      	ldr	r3, [pc, #80]	; (8008afc <prvHeapInit+0xb4>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ab2:	4b12      	ldr	r3, [pc, #72]	; (8008afc <prvHeapInit+0xb4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	1ad2      	subs	r2, r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ac8:	4b0c      	ldr	r3, [pc, #48]	; (8008afc <prvHeapInit+0xb4>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	4a0a      	ldr	r2, [pc, #40]	; (8008b00 <prvHeapInit+0xb8>)
 8008ad6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	4a09      	ldr	r2, [pc, #36]	; (8008b04 <prvHeapInit+0xbc>)
 8008ade:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ae0:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <prvHeapInit+0xc0>)
 8008ae2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ae6:	601a      	str	r2, [r3, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20000d3c 	.word	0x20000d3c
 8008af8:	2000193c 	.word	0x2000193c
 8008afc:	20001944 	.word	0x20001944
 8008b00:	2000194c 	.word	0x2000194c
 8008b04:	20001948 	.word	0x20001948
 8008b08:	20001950 	.word	0x20001950

08008b0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b14:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <prvInsertBlockIntoFreeList+0xa8>)
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e002      	b.n	8008b20 <prvInsertBlockIntoFreeList+0x14>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d8f7      	bhi.n	8008b1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4413      	add	r3, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d108      	bne.n	8008b4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	441a      	add	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	441a      	add	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d118      	bne.n	8008b94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	4b14      	ldr	r3, [pc, #80]	; (8008bb8 <prvInsertBlockIntoFreeList+0xac>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d00d      	beq.n	8008b8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	441a      	add	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	e008      	b.n	8008b9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <prvInsertBlockIntoFreeList+0xac>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	e003      	b.n	8008b9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d002      	beq.n	8008baa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bc80      	pop	{r7}
 8008bb2:	4770      	bx	lr
 8008bb4:	2000193c 	.word	0x2000193c
 8008bb8:	20001944 	.word	0x20001944

08008bbc <__libc_init_array>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	4d0c      	ldr	r5, [pc, #48]	; (8008bf4 <__libc_init_array+0x38>)
 8008bc2:	4c0d      	ldr	r4, [pc, #52]	; (8008bf8 <__libc_init_array+0x3c>)
 8008bc4:	1b64      	subs	r4, r4, r5
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	42a6      	cmp	r6, r4
 8008bca:	d109      	bne.n	8008be0 <__libc_init_array+0x24>
 8008bcc:	f000 f830 	bl	8008c30 <_init>
 8008bd0:	2600      	movs	r6, #0
 8008bd2:	4d0a      	ldr	r5, [pc, #40]	; (8008bfc <__libc_init_array+0x40>)
 8008bd4:	4c0a      	ldr	r4, [pc, #40]	; (8008c00 <__libc_init_array+0x44>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	42a6      	cmp	r6, r4
 8008bdc:	d105      	bne.n	8008bea <__libc_init_array+0x2e>
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be4:	4798      	blx	r3
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7ee      	b.n	8008bc8 <__libc_init_array+0xc>
 8008bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bee:	4798      	blx	r3
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	e7f2      	b.n	8008bda <__libc_init_array+0x1e>
 8008bf4:	08009c64 	.word	0x08009c64
 8008bf8:	08009c64 	.word	0x08009c64
 8008bfc:	08009c64 	.word	0x08009c64
 8008c00:	08009c68 	.word	0x08009c68

08008c04 <memcpy>:
 8008c04:	440a      	add	r2, r1
 8008c06:	4291      	cmp	r1, r2
 8008c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c0c:	d100      	bne.n	8008c10 <memcpy+0xc>
 8008c0e:	4770      	bx	lr
 8008c10:	b510      	push	{r4, lr}
 8008c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c16:	4291      	cmp	r1, r2
 8008c18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c1c:	d1f9      	bne.n	8008c12 <memcpy+0xe>
 8008c1e:	bd10      	pop	{r4, pc}

08008c20 <memset>:
 8008c20:	4603      	mov	r3, r0
 8008c22:	4402      	add	r2, r0
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d100      	bne.n	8008c2a <memset+0xa>
 8008c28:	4770      	bx	lr
 8008c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c2e:	e7f9      	b.n	8008c24 <memset+0x4>

08008c30 <_init>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	bf00      	nop
 8008c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c36:	bc08      	pop	{r3}
 8008c38:	469e      	mov	lr, r3
 8008c3a:	4770      	bx	lr

08008c3c <_fini>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr
